# http://www.appveyor.com/doc{0}
#
# To setup AppVeyor for your own personal repositories do the following:
# - Sign up
# - Add a new project
# - Select Git and fill in the Git clone URL
# - Setup a Git hook as explained in
#   https://github.com/appveyor/webhooks#installing-git-hook
# - Check 'Settings > General > Skip branches without appveyor.yml'
# - Check 'Settings > General > Rolling builds'
# - Setup the global or project notifications to your liking
#
# Note that kicking (or restarting) a build via the web UI will not work, as it
# will fail to find appveyor.yml .  The Git hook is the most practical way to
# kick a build.
#
# See also:
# - http://help.appveyor.com/discussions/problems/2209-node-grunt-build-specify-a-project-or-solution-file-the-directory-does-not-contain-a-project-or-solution-file
# - http://help.appveyor.com/discussions/questions/1184-build-config-vs-appveyoryaml

version: '{build}'

branches:
  except:
  - /^travis.*$/

# Don't download the full Mesa history to speed up cloning.  However the clone
# depth must not be too small, otherwise builds might fail when lots of patches
# are committed in succession, because the desired commit is not found on the
# truncated history.
#
# See also:
# - https://www.appveyor.com/blog/2014/06/04/shallow-clone-for-git-repositories
clone_depth: 100

image:
  - ubuntu
  - Visual Studio 2015
platform:
  - x86
  - x64
configuration:
  - Release
  - Debug

matrix:
  allow_failures:
    - image: ubuntu


for:
-
  matrix:
    only:
      - image: Ubuntu
        platform: x86
        configuration: Release

  install:
#  - sh: sudo apt-get update
#  - sh: sudo DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade
  - sh: sudo apt install sbuild debhelper ubuntu-dev-tools piuparts -y
  - sh: sudo adduser $USER sbuild
  - sh: sudo adduser root sbuild
  - sh: sudo mkdir -p $HOME/ubuntu/scratch
  - sh: sudo chmod ugo+w /etc/schroot/sbuild/fstab
  - sh: sudo echo "/home/$USER/ubuntu/scratch /scratch none rw,bind 0 0" >> /etc/schroot/sbuild/fstab
  - sh: sudo echo "\$maintainer_name='me';\n\$distribution = 'xenial';\n\$build_arch_all = 1;\n\$purge_build_directory = 'successful';\n\$purge_session = 'successful';\n\$purge_build_deps = 'successful';\n\$log_dir=\$ENV{HOME}.'/ubuntu/logs';\n1;" > ~/.sbuildrc
  - sh: sudo mkdir -p $HOME/ubuntu/{build,logs}
  - sh: sudo echo 'SCHROOT_CONF_SUFFIX="source-root-users=root,sbuild,admin\nsource-root-groups=root,sbuild,admin\npreserve-environment=true"'  > ~/.mk-sbuild.rc
  - sh: sudo sg sbuild
#  - sh: sudo mk-sbuild xenial
  - sh: sudo mk-sbuild xenial --arch=i386
  - sh: sudo schroot -c xenial-i386 -u root

  build_script:
  - sh: sudo chmod ugo+w /etc/apt/sources.list
  - sh: sudo echo "deb http://archive.ubuntu.com/ubuntu xenial-security main restricted" > /etc/apt/sources.list
  - sh: sudo echo "deb-src http://archive.ubuntu.com/ubuntu xenial-security main restricted" >> /etc/apt/sources.list
  - sh: sudo echo "deb http://archive.ubuntu.com/ubuntu xenial-security universe" >> /etc/apt/sources.list
  - sh: sudo echo "deb-src http://archive.ubuntu.com/ubuntu xenial-security universe" >> /etc/apt/sources.list
  - sh: sudo echo "deb http://archive.ubuntu.com/ubuntu xenial-security multiverse" >> /etc/apt/sources.list
  - sh: sudo echo "deb-src http://archive.ubuntu.com/ubuntu xenial-security multiverse" >> /etc/apt/sources.list
  - sh: sudo echo "deb http://archive.ubuntu.com/ubuntu xenial main restricted" >> /etc/apt/sources.list
  - sh: sudo echo "deb-src http://archive.ubuntu.com/ubuntu xenial main restricted" >> /etc/apt/sources.list
  - sh: sudo echo "deb http://archive.ubuntu.com/ubuntu xenial-updates main restricted" >> /etc/apt/sources.list
  - sh: sudo echo "deb-src http://archive.ubuntu.com/ubuntu xenial-updates main restricted" >> /etc/apt/sources.list
  - sh: sudo echo "deb http://archive.ubuntu.com/ubuntu xenial universe" >> /etc/apt/sources.list
  - sh: sudo echo "deb-src http://archive.ubuntu.com/ubuntu xenial universe" >> /etc/apt/sources.list
  - sh: sudo echo "deb http://archive.ubuntu.com/ubuntu xenial-updates universe" >> /etc/apt/sources.list
  - sh: sudo echo "deb-src http://archive.ubuntu.com/ubuntu xenial-updates universe" >> /etc/apt/sources.list
  - sh: sudo echo "deb http://archive.ubuntu.com/ubuntu xenial multiverse" >> /etc/apt/sources.list
  - sh: sudo echo "deb-src http://archive.ubuntu.com/ubuntu xenial multiverse" >> /etc/apt/sources.list
  - sh: sudo echo "deb http://archive.ubuntu.com/ubuntu xenial-updates multiverse" >> /etc/apt/sources.list
  - sh: sudo echo "deb-src http://archive.ubuntu.com/ubuntu xenial-updates multiverse" >> /etc/apt/sources.list
  - sh: sudo add-apt-repository ppa:oibaf/graphics-drivers
  - sh: sudo apt-get update
  - sh: sudo DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade
  - sh: sudo apt-get build-dep mesa -y
  - sh: sudo apt-get install libxvmc-dev libxcb-xvmc0-dev libomxil-bellagio-dev -y
  - git clone git://anongit.freedesktop.org/git/mesa/mesa
  - cd mesa
  - setarch i386 ./autogen.sh --enable-llvm
  - make -j$(grep -c ^processor /proc/cpuinfo)
  - sudo make install

-
  matrix:
    only:
      - image: Ubuntu
        platform: x64
        configuration: Release

  install:
  - ls -al
  - sh: sudo sed -i~orig -e 's$# deb-src http://us$deb-src http://us$' /etc/apt/sources.list
  - sh: sudo add-apt-repository ppa:oibaf/graphics-drivers
  - sh: sudo apt-get update
  - sh: sudo DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade
  - sh: sudo apt-get build-dep mesa -y
  - sh: sudo apt-get install libxvmc-dev libxcb-xvmc0-dev libomxil-bellagio-dev -y

  build_script:
  - sh: ./autogen.sh --enable-dri --with-dri-drivers="nouveau i915 i965 r200 radeon swrast" --enable-osmesa --enable-glx-tls --enable-shared-glapi --enable-texture-float --enable-driglx-direct --enable-dri3 --with-platforms="x11 wayland drm" --enable-xa --enable-llvm ac_cv_path_LLVM_CONFIG=llvm-config-5.0 --enable-vdpau --enable-omx-bellagio --enable-va --enable-xvmc --enable-opencl --enable-opencl-icd --enable-nine --enable-gallium-extra-hud --enable-lmsensors --with-gallium-drivers=" nouveau svga r600 r300 i915 virgl radeonsi swrast" --enable-gles1 --enable-gles2 --enable-gle --with-vulkan-drivers=intel,radeon
  - sh: make -j$(grep -c ^processor /proc/cpuinfo)
  - sh: sudo make install

-
  matrix:
    only:
      - image: Ubuntu
        platform: x86
        configuration: Debug

  install:
  - ls -al
  - sh: sudo sed -i~orig -e 's$# deb-src http://us$deb-src http://us$' /etc/apt/sources.list
  - sh: sudo add-apt-repository ppa:oibaf/graphics-drivers
  - sh: sudo apt-get update
  - sh: sudo DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade
  - sh: sudo apt-get build-dep mesa -y
  - sh: sudo apt-get install libxvmc-dev libxcb-xvmc0-dev libomxil-bellagio-dev -y

  build_script:
  - sh: ./autogen.sh --enable-dri --with-dri-drivers="nouveau i915 i965 r200 radeon swrast" --enable-osmesa --enable-glx-tls --enable-shared-glapi --enable-texture-float --enable-driglx-direct --enable-dri3 --with-platforms="x11 wayland drm" --enable-xa --enable-llvm ac_cv_path_LLVM_CONFIG=llvm-config-5.0 --enable-vdpau --enable-omx-bellagio --enable-va --enable-xvmc --enable-opencl --enable-opencl-icd --enable-nine --enable-gallium-extra-hud --enable-lmsensors --with-gallium-drivers=" nouveau svga r600 r300 i915 virgl radeonsi swrast" --enable-gles1 --enable-gles2 --enable-gle --with-vulkan-drivers=intel,radeon
  - sh: make -j$(grep -c ^processor /proc/cpuinfo)
  - sh: sudo make install

-
  matrix:
    only:
      - image: Ubuntu
        platform: x64
        configuration: Debug

  install:
  - ls -al
  - sh: sudo sed -i~orig -e 's$# deb-src http://us$deb-src http://us$' /etc/apt/sources.list
  - sh: sudo add-apt-repository ppa:oibaf/graphics-drivers
  - sh: sudo apt-get update
  - sh: sudo DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade
  - sh: sudo apt-get build-dep mesa -y
  - sh: sudo apt-get install libxvmc-dev libxcb-xvmc0-dev libomxil-bellagio-dev -y

  build_script:
  - sh: ./autogen.sh --enable-dri --with-dri-drivers="nouveau i915 i965 r200 radeon swrast" --enable-osmesa --enable-glx-tls --enable-shared-glapi --enable-texture-float --enable-driglx-direct --enable-dri3 --with-platforms="x11 wayland drm" --enable-xa --enable-llvm ac_cv_path_LLVM_CONFIG=llvm-config-5.0 --enable-vdpau --enable-omx-bellagio --enable-va --enable-xvmc --enable-opencl --enable-opencl-icd --enable-nine --enable-gallium-extra-hud --enable-lmsensors --with-gallium-drivers=" nouveau svga r600 r300 i915 virgl radeonsi swrast" --enable-gles1 --enable-gles2 --enable-gle --with-vulkan-drivers=intel,radeon
  - sh: make -j$(grep -c ^processor /proc/cpuinfo)
  - sh: sudo make install

-
  matrix:
    only:
      - image: Visual Studio 2015

  cache:
  - win_flex_bison-2.5.9.zip
  - llvm-3.3.1-msvc2015-mtd.7z

  environment:
    WINFLEXBISON_ARCHIVE: win_flex_bison-2.5.9.zip
    LLVM_ARCHIVE: llvm-3.3.1-msvc2015-mtd.7z

  install:
  # Check pip
  - python --version
  - python -m pip --version
  # Install Mako
  - python -m pip install Mako==1.0.6
  # Install pywin32 extensions, needed by SCons
  - python -m pip install pypiwin32
  # Install python wheels, necessary to install SCons via pip
  - python -m pip install wheel
  # Install SCons
  - python -m pip install scons==2.5.1
  - scons --version
  # Install flex/bison
  - if not exist "%WINFLEXBISON_ARCHIVE%" appveyor DownloadFile "https://downloads.sourceforge.net/project/winflexbison/old_versions/%WINFLEXBISON_ARCHIVE%"
  - 7z x -y -owinflexbison\ "%WINFLEXBISON_ARCHIVE%" > nul
  - set Path=%CD%\winflexbison;%Path%
  - win_flex --version
  - win_bison --version
  # Download and extract LLVM
  - if not exist "%LLVM_ARCHIVE%" appveyor DownloadFile "https://people.freedesktop.org/~jrfonseca/llvm/%LLVM_ARCHIVE%"
  - 7z x -y "%LLVM_ARCHIVE%" > nul
  - mkdir llvm\bin
  - set LLVM=%CD%\llvm

  build_script:
  - scons -j%NUMBER_OF_PROCESSORS% MSVC_VERSION=14.0 llvm=1

  after_build:
  - scons -j%NUMBER_OF_PROCESSORS% MSVC_VERSION=14.0 llvm=1 check
