ATTENTION: default value of option allow_glsl_extension_directive_midshader overridden by environment.
VERT
PROPERTY NEXT_SHADER FRAG
DCL IN[0]
DCL IN[1]
DCL IN[2]
DCL IN[3]
DCL IN[4]
DCL IN[5]
DCL IN[6]
DCL OUT[0], POSITION
DCL OUT[1], CLIPVERTEX
DCL OUT[2], GENERIC[0]
DCL OUT[3], GENERIC[1]
DCL OUT[4], GENERIC[2]
DCL OUT[5], GENERIC[3]
DCL CONST[0][0..101]
DCL TEMP[0..165], LOCAL
IMM[0] FLT32 {    0.0000,     1.0000,  -128.0000,   -64.0000}
IMM[1] FLT32 {    0.0159,    -0.0159,    -2.0000,     2.2000}
IMM[2] INT32 {0, 29, 28, 27}
IMM[3] FLT32 {    5.0000,     0.0001,     0.0000,     0.0000}
IMM[4] INT32 {31, 30, 1, 23}
IMM[5] INT32 {21, 25, 0, 0}
  0: MOV TEMP[0], IMM[0].xxxx
  1: MOV TEMP[1], IMM[0].xxxx
  2: MOV TEMP[2], IMM[0].xxxx
  3: MOV TEMP[3].x, |CONST[0][50].xxxx|
  4: FSLT TEMP[4].x, -TEMP[3].xxxx, TEMP[3].xxxx
  5: AND TEMP[5].x, TEMP[4].xxxx, IMM[0].yyyy
  6: MOV TEMP[3].y, TEMP[5].xxxx
  7: ADD TEMP[6].xy, IMM[0].zzzz, IN[1].xyyy
  8: FSLT TEMP[7].xy, TEMP[6].xyyy, CONST[0][0].xxxx
  9: AND TEMP[8].xy, TEMP[7].xyyy, IMM[0].yyyy
 10: MOV TEMP[9].xy, |TEMP[6].xyyy|
 11: ADD TEMP[10].xy, TEMP[9].xyyy, -TEMP[8].xyyy
 12: ADD TEMP[11].xy, TEMP[10].xyyy, IMM[0].wwww
 13: FSLT TEMP[12].xy, TEMP[11].xyyy, CONST[0][0].xxxx
 14: AND TEMP[13].xy, TEMP[12].xyyy, IMM[0].yyyy
 15: MOV TEMP[14].xy, |TEMP[11].xyyy|
 16: ADD TEMP[15].xy, TEMP[14].xyyy, -TEMP[13].xyyy
 17: MUL TEMP[16].xy, TEMP[15].xyyy, IMM[1].xxxx
 18: MAD TEMP[17].x, TEMP[15].xxxx, IMM[1].yyyy, IMM[0].yyyy
 19: MAD TEMP[18].x, TEMP[15].yyyy, IMM[1].yyyy, TEMP[17].xxxx
 20: MOV TEMP[16].z, TEMP[18].xxxx
 21: DP3 TEMP[19].x, TEMP[16].xyzz, TEMP[16].xyzz
 22: RSQ TEMP[20].x, TEMP[19].xxxx
 23: MUL TEMP[21].xyz, TEMP[16].xyzz, TEMP[20].xxxx
 24: MAD TEMP[22].xy, TEMP[13].xyyy, IMM[1].zzzz, IMM[0].yyyy
 25: MOV TEMP[3].w, TEMP[22].yyxy
 26: MUL TEMP[16].xy, TEMP[22].xyyy, TEMP[21].xyyy
 27: MAD TEMP[23].x, TEMP[8].xxxx, IMM[1].zzzz, IMM[0].yyyy
 28: MOV TEMP[3].z, TEMP[23].xxxx
 29: MUL TEMP[24].x, TEMP[23].xxxx, TEMP[21].zzzz
 30: MOV TEMP[16].z, TEMP[24].xxxx
 31: MOV TEMP[8].w, IN[0].wwww
 32: MAD TEMP[8].xyz, IN[5].xyzz, CONST[0][13].xxxx, IN[0].xyzz
 33: MAD TEMP[16].xyz, IN[6].xyzz, CONST[0][13].xxxx, TEMP[16].xyzz
 34: DP4 TEMP[21].x, TEMP[8], CONST[0][97]
 35: DP4 TEMP[25].x, TEMP[8], CONST[0][98]
 36: MOV TEMP[21].y, TEMP[25].xxxx
 37: DP4 TEMP[26].x, TEMP[8], CONST[0][99]
 38: MOV TEMP[21].z, TEMP[26].xxxx
 39: DP3 TEMP[8].x, TEMP[16].xyzz, CONST[0][97].xyzz
 40: DP3 TEMP[27].x, TEMP[16].xyzz, CONST[0][98].xyzz
 41: MOV TEMP[8].y, TEMP[27].xxxx
 42: DP3 TEMP[28].x, TEMP[16].xyzz, CONST[0][99].xyzz
 43: MOV TEMP[8].z, TEMP[28].xxxx
 44: DP3 TEMP[29].x, TEMP[8].xyzz, TEMP[8].xyzz
 45: RSQ TEMP[30].x, TEMP[29].xxxx
 46: MUL TEMP[16].xyz, TEMP[8].xyzz, TEMP[30].xxxx
 47: FSLT TEMP[31].x, -TEMP[3].xxxx, TEMP[3].xxxx
 48: UIF TEMP[31].xxxx
 49:   ADD TEMP[32].xyz, IN[2].xyzz, IN[2].xyzz
 50:   MOV TEMP[3].zw, TEMP[32].xxyz
 51:   LG2 TEMP[8].x, TEMP[32].xxxx
 52:   LG2 TEMP[33].x, TEMP[32].yyyy
 53:   MOV TEMP[8].y, TEMP[33].xxxx
 54:   LG2 TEMP[34].x, TEMP[32].zzzz
 55:   MOV TEMP[8].z, TEMP[34].xxxx
 56:   MUL TEMP[35].xyz, TEMP[8].xyzz, IMM[1].wwww
 57:   MOV TEMP[3].zw, TEMP[35].xxyz
 58:   EX2 TEMP[3].x, TEMP[35].xxxx
 59:   EX2 TEMP[36].x, TEMP[35].yyyy
 60:   MOV TEMP[3].z, TEMP[36].xxxx
 61:   EX2 TEMP[37].x, TEMP[35].zzzz
 62:   MOV TEMP[3].w, TEMP[37].xxxx
 63:   MOV TEMP[8].z, CONST[0][0].yyyy
 64:   MOV TEMP[38].x, CONST[0][0].yyyy
 65:   MOV TEMP[39].xyz, TEMP[3].xzwx
 66:   MOV TEMP[8].x, CONST[0][0].xxxx
 67:   MOV TEMP[40].x, IMM[2].xxxx
 68:   BGNLOOP
 69:     ISGE TEMP[41].x, TEMP[40].xxxx, CONST[0][101].xxxx
 70:     UIF TEMP[41].xxxx
 71:       BRK
 72:     ENDIF
 73:     MUL TEMP[42].x, TEMP[8].xxxx, IMM[3].xxxx
 74:     MOV TEMP[43].x, TEMP[42].xxxx
 75:     F2I TEMP[44].x, TEMP[42].xxxx
 76:     UADD TEMP[45].x, TEMP[44].xxxx, IMM[2].yyyy
 77:     ADD TEMP[46].xyz, -TEMP[21].xyzz, CONST[0][TEMP[45].x].xyzz
 78:     DP3 TEMP[47].x, TEMP[46].xyzz, TEMP[46].xyzz
 79:     RSQ TEMP[48].x, TEMP[47].xxxx
 80:     MOV TEMP[8].y, TEMP[48].xxxx
 81:     MUL TEMP[49].xyz, TEMP[48].xxxx, TEMP[46].xyzz
 82:     F2I TEMP[50].x, TEMP[42].xxxx
 83:     UADD TEMP[51].x, TEMP[50].xxxx, IMM[2].zzzz
 84:     MAD TEMP[46].xyz, TEMP[46].xyzz, -TEMP[48].xxxx, -CONST[0][TEMP[51].x].xyzz
 85:     F2I TEMP[52].x, TEMP[42].xxxx
 86:     UADD TEMP[53].x, TEMP[52].xxxx, IMM[2].wwww
 87:     MAD TEMP[46].xyz, CONST[0][TEMP[53].x].wwww, TEMP[46].xyzz, TEMP[49].xyzz
 88:     DP3 TEMP[54].x, TEMP[16].xyzz, TEMP[46].xyzz
 89:     MAX TEMP[55].x, TEMP[54].xxxx, CONST[0][0].xxxx
 90:     MAD TEMP[56].x, TEMP[55].xxxx, TEMP[55].xxxx, TEMP[55].xxxx
 91:     MUL TEMP[57].x, TEMP[56].xxxx, CONST[0][0].wwww
 92:     F2I TEMP[58].x, TEMP[42].xxxx
 93:     UADD TEMP[59].x, TEMP[58].xxxx, IMM[2].wwww
 94:     MUL TEMP[46].xyz, TEMP[57].xxxx, CONST[0][TEMP[59].x].xyzz
 95:     MUL TEMP[60].xy, TEMP[8].yzzz, TEMP[47].xxxx
 96:     MOV TEMP[38].yz, TEMP[60].yxyy
 97:     F2I TEMP[61].x, TEMP[42].xxxx
 98:     UADD TEMP[62].x, TEMP[61].xxxx, IMM[4].xxxx
 99:     DP3 TEMP[63].x, CONST[0][TEMP[62].x].xyzz, TEMP[38].xyzz
100:     RCP TEMP[64].x, TEMP[63].xxxx
101:     F2I TEMP[65].x, TEMP[42].xxxx
102:     UADD TEMP[66].x, TEMP[65].xxxx, IMM[2].zzzz
103:     DP3 TEMP[67].x, CONST[0][TEMP[66].x].xyzz, -TEMP[49].xyzz
104:     F2I TEMP[68].x, TEMP[42].xxxx
105:     UADD TEMP[69].x, TEMP[68].xxxx, IMM[4].yyyy
106:     ADD TEMP[70].x, TEMP[67].xxxx, -CONST[0][TEMP[69].x].zzzz
107:     F2I TEMP[71].x, TEMP[42].xxxx
108:     UADD TEMP[72].x, TEMP[71].xxxx, IMM[4].yyyy
109:     MUL TEMP[73].x, TEMP[70].xxxx, CONST[0][TEMP[72].x].wwww
110:     MAX TEMP[74].x, TEMP[73].xxxx, IMM[3].yyyy
111:     F2I TEMP[75].x, TEMP[42].xxxx
112:     UADD TEMP[76].x, TEMP[75].xxxx, IMM[4].yyyy
113:     POW TEMP[77].x, TEMP[74].xxxx, CONST[0][TEMP[76].x].xxxx
114:     MOV TEMP[16].w, TEMP[77].xxxx
115:     MIN TEMP[78].x, TEMP[77].xxxx, CONST[0][0].yyyy
116:     MAD TEMP[79].x, TEMP[64].xxxx, TEMP[78].xxxx, -TEMP[64].xxxx
117:     F2I TEMP[80].x, TEMP[42].xxxx
118:     UADD TEMP[81].x, TEMP[80].xxxx, IMM[2].zzzz
119:     MAD TEMP[82].x, CONST[0][TEMP[81].x].wwww, TEMP[79].xxxx, TEMP[64].xxxx
120:     ADD TEMP[83].x, -TEMP[82].xxxx, CONST[0][0].yyyy
121:     MOV TEMP[8].w, TEMP[83].xxxx
122:     F2I TEMP[84].x, TEMP[42].xxxx
123:     UADD TEMP[85].x, TEMP[84].xxxx, IMM[2].wwww
124:     MAD TEMP[86].x, CONST[0][TEMP[85].x].wwww, TEMP[83].xxxx, TEMP[82].xxxx
125:     MOV TEMP[8].y, TEMP[86].xxxx
126:     MAD TEMP[39].xyz, TEMP[46].xyzz, TEMP[86].xxxx, TEMP[39].xyzz
127:     ADD TEMP[8].x, TEMP[8].xxxx, CONST[0][0].yyyy
128:     UADD TEMP[40].x, TEMP[40].xxxx, IMM[4].zzzz
129:   ENDLOOP
130:   MUL TEMP[87].xyz, TEMP[16].xyzz, TEMP[16].xyzz
131:   FSLT TEMP[88].xyz, TEMP[16].xyzz, CONST[0][0].xxxx
132:   AND TEMP[8].xyz, TEMP[88].xyzz, IMM[0].yyyy
133:   MOV TEMP[43].xy, TEMP[8].xyxx
134:   F2I TEMP[89].x, TEMP[8].yyyy
135:   UADD TEMP[90].x, TEMP[89].xxxx, IMM[4].wwww
136:   MUL TEMP[91].xyz, TEMP[87].yyyy, CONST[0][TEMP[90].x].xyzz
137:   F2I TEMP[92].x, TEMP[43].xxxx
138:   UADD TEMP[93].x, TEMP[92].xxxx, IMM[5].xxxx
139:   MAD TEMP[94].xyz, TEMP[87].xxxx, CONST[0][TEMP[93].x].xyzz, TEMP[91].xyzz
140:   MOV TEMP[8].xyw, TEMP[94].xyxz
141:   MOV TEMP[43].x, TEMP[8].zzzz
142:   F2I TEMP[95].x, TEMP[8].zzzz
143:   UADD TEMP[96].x, TEMP[95].xxxx, IMM[5].yyyy
144:   MAD TEMP[97].xyz, TEMP[87].zzzz, CONST[0][TEMP[96].x].xyzz, TEMP[94].xyzz
145:   ADD TEMP[98].xyz, TEMP[97].xyzz, TEMP[39].xyzz
146:   MOV TEMP[3].xzw, TEMP[98].xxyz
147: ELSE
148:   MOV TEMP[8].z, CONST[0][0].yyyy
149:   MOV TEMP[38].x, CONST[0][0].yyyy
150:   MOV TEMP[39].xyz, CONST[0][0].xxxx
151:   MOV TEMP[46].xyz, CONST[0][0].xxxx
152:   MOV TEMP[8].x, CONST[0][0].xxxx
153:   MOV TEMP[99].x, IMM[2].xxxx
154:   BGNLOOP
155:     ISGE TEMP[100].x, TEMP[99].xxxx, CONST[0][101].xxxx
156:     UIF TEMP[100].xxxx
157:       BRK
158:     ENDIF
159:     MUL TEMP[101].x, TEMP[8].xxxx, IMM[3].xxxx
160:     MOV TEMP[43].x, TEMP[101].xxxx
161:     F2I TEMP[102].x, TEMP[101].xxxx
162:     UADD TEMP[103].x, TEMP[102].xxxx, IMM[2].yyyy
163:     ADD TEMP[49].xyz, -TEMP[21].xyzz, CONST[0][TEMP[103].x].xyzz
164:     DP3 TEMP[104].x, TEMP[49].xyzz, TEMP[49].xyzz
165:     RSQ TEMP[105].x, TEMP[104].xxxx
166:     MOV TEMP[8].y, TEMP[105].xxxx
167:     MUL TEMP[106].xyz, TEMP[105].xxxx, TEMP[49].xyzz
168:     F2I TEMP[107].x, TEMP[101].xxxx
169:     UADD TEMP[108].x, TEMP[107].xxxx, IMM[2].zzzz
170:     MAD TEMP[49].xyz, TEMP[49].xyzz, -TEMP[105].xxxx, -CONST[0][TEMP[108].x].xyzz
171:     F2I TEMP[109].x, TEMP[101].xxxx
172:     UADD TEMP[110].x, TEMP[109].xxxx, IMM[2].wwww
173:     MAD TEMP[49].xyz, CONST[0][TEMP[110].x].wwww, TEMP[49].xyzz, TEMP[106].xyzz
174:     DP3 TEMP[111].x, TEMP[16].xyzz, TEMP[49].xyzz
175:     MAX TEMP[112].x, TEMP[111].xxxx, CONST[0][0].xxxx
176:     MAD TEMP[113].x, TEMP[112].xxxx, TEMP[112].xxxx, TEMP[112].xxxx
177:     MUL TEMP[114].x, TEMP[113].xxxx, CONST[0][0].wwww
178:     F2I TEMP[115].x, TEMP[101].xxxx
179:     UADD TEMP[116].x, TEMP[115].xxxx, IMM[2].wwww
180:     MUL TEMP[49].xyz, TEMP[114].xxxx, CONST[0][TEMP[116].x].xyzz
181:     MUL TEMP[117].xy, TEMP[8].yzzz, TEMP[104].xxxx
182:     MOV TEMP[38].yz, TEMP[117].yxyy
183:     F2I TEMP[118].x, TEMP[101].xxxx
184:     UADD TEMP[119].x, TEMP[118].xxxx, IMM[4].xxxx
185:     DP3 TEMP[120].x, CONST[0][TEMP[119].x].xyzz, TEMP[38].xyzz
186:     RCP TEMP[121].x, TEMP[120].xxxx
187:     F2I TEMP[122].x, TEMP[101].xxxx
188:     UADD TEMP[123].x, TEMP[122].xxxx, IMM[2].zzzz
189:     DP3 TEMP[124].x, CONST[0][TEMP[123].x].xyzz, -TEMP[106].xyzz
190:     F2I TEMP[125].x, TEMP[101].xxxx
191:     UADD TEMP[126].x, TEMP[125].xxxx, IMM[4].yyyy
192:     ADD TEMP[127].x, TEMP[124].xxxx, -CONST[0][TEMP[126].x].zzzz
193:     F2I TEMP[128].x, TEMP[101].xxxx
194:     UADD TEMP[129].x, TEMP[128].xxxx, IMM[4].yyyy
195:     MUL TEMP[130].x, TEMP[127].xxxx, CONST[0][TEMP[129].x].wwww
196:     MAX TEMP[131].x, TEMP[130].xxxx, IMM[3].yyyy
197:     F2I TEMP[132].x, TEMP[101].xxxx
198:     UADD TEMP[133].x, TEMP[132].xxxx, IMM[4].yyyy
199:     POW TEMP[134].x, TEMP[131].xxxx, CONST[0][TEMP[133].x].xxxx
200:     MOV TEMP[16].w, TEMP[134].xxxx
201:     MIN TEMP[135].x, TEMP[134].xxxx, CONST[0][0].yyyy
202:     MAD TEMP[136].x, TEMP[121].xxxx, TEMP[135].xxxx, -TEMP[121].xxxx
203:     F2I TEMP[137].x, TEMP[101].xxxx
204:     UADD TEMP[138].x, TEMP[137].xxxx, IMM[2].zzzz
205:     MAD TEMP[139].x, CONST[0][TEMP[138].x].wwww, TEMP[136].xxxx, TEMP[121].xxxx
206:     ADD TEMP[140].x, -TEMP[139].xxxx, CONST[0][0].yyyy
207:     MOV TEMP[8].w, TEMP[140].xxxx
208:     F2I TEMP[141].x, TEMP[101].xxxx
209:     UADD TEMP[142].x, TEMP[141].xxxx, IMM[2].wwww
210:     MAD TEMP[143].x, CONST[0][TEMP[142].x].wwww, TEMP[140].xxxx, TEMP[139].xxxx
211:     MUL TEMP[144].xyz, TEMP[143].xxxx, TEMP[49].xyzz
212:     MOV TEMP[38].yzw, TEMP[144].yxyz
213:     FSGE TEMP[145].x, -TEMP[8].xxxx, TEMP[8].xxxx
214:     AND TEMP[146].x, TEMP[145].xxxx, IMM[0].yyyy
215:     MAD TEMP[39].xyz, TEMP[146].xxxx, TEMP[144].xyzz, TEMP[39].xyzz
216:     FSLT TEMP[147].x, -TEMP[8].xxxx, TEMP[8].xxxx
217:     AND TEMP[148].x, TEMP[147].xxxx, IMM[0].yyyy
218:     MOV TEMP[8].y, TEMP[148].xxxx
219:     MAD TEMP[46].xyz, TEMP[144].xyzz, TEMP[148].xxxx, TEMP[46].xyzz
220:     ADD TEMP[8].x, TEMP[8].xxxx, CONST[0][0].yyyy
221:     UADD TEMP[99].x, TEMP[99].xxxx, IMM[4].zzzz
222:   ENDLOOP
223:   MUL TEMP[8].xyz, TEMP[16].xyzz, TEMP[16].xyzz
224:   FSLT TEMP[149].xyz, TEMP[16].xyzz, CONST[0][0].xxxx
225:   AND TEMP[38].xyz, TEMP[149].xyzz, IMM[0].yyyy
226:   MOV TEMP[43].x, TEMP[38].xyxx
227:   F2I TEMP[150].x, TEMP[38].yyyy
228:   UADD TEMP[151].x, TEMP[150].xxxx, IMM[4].wwww
229:   MUL TEMP[152].xyz, TEMP[8].yyyy, CONST[0][TEMP[151].x].xyzz
230:   F2I TEMP[153].x, TEMP[43].xxxx
231:   UADD TEMP[154].x, TEMP[153].xxxx, IMM[5].xxxx
232:   MAD TEMP[155].xyz, TEMP[8].xxxx, CONST[0][TEMP[154].x].xyzz, TEMP[152].xyzz
233:   F2I TEMP[156].x, TEMP[38].zzzz
234:   UADD TEMP[157].x, TEMP[156].xxxx, IMM[5].yyyy
235:   MAD TEMP[8].xyz, TEMP[8].zzzz, CONST[0][TEMP[157].x].xyzz, TEMP[155].xyzz
236:   ADD TEMP[158].xyz, TEMP[8].xyzz, TEMP[46].xyzz
237:   MOV TEMP[3].xzw, TEMP[158].xxyz
238: ENDIF
239: DP4 TEMP[0].x, IN[3], CONST[0][48]
240: DP4 TEMP[159].x, IN[3], CONST[0][49]
241: MOV TEMP[0].y, TEMP[159].xxxx
242: MOV TEMP[21].w, CONST[0][0].yyyy
243: DP4 TEMP[8].x, TEMP[21], CONST[0][8]
244: DP4 TEMP[160].x, TEMP[21], CONST[0][9]
245: MOV TEMP[8].y, TEMP[160].xxxx
246: DP4 TEMP[161].x, TEMP[21], CONST[0][10]
247: MOV TEMP[8].z, TEMP[161].xxxx
248: DP4 TEMP[162].x, TEMP[21], CONST[0][11]
249: MOV TEMP[8].w, TEMP[162].xxxx
250: MOV TEMP[163].xw, TEMP[8].xxxw
251: MUL TEMP[164].xy, CONST[0][0].xyyy, IN[4].xxxx
252: MOV TEMP[0].zw, TEMP[164].yyxy
253: MOV TEMP[1].xyz, TEMP[21].xyzx
254: MOV TEMP[1].w, CONST[0][0].xxxx
255: MOV TEMP[2].xyz, TEMP[3].xzwx
256: MOV TEMP[2].w, CONST[0][0].xxxx
257: MOV OUT[1], TEMP[8]
258: MAD TEMP[165].x, TEMP[161].xxxx, CONST[0][0].zzzz, -TEMP[162].xxxx
259: MOV TEMP[163].z, TEMP[165].xxxx
260: MOV TEMP[163].y, -TEMP[160].xxxx
261: MAD TEMP[163].xy, CONST[0][100].xyyy, TEMP[162].xxxx, TEMP[163].xyyy
262: MOV OUT[0], TEMP[163]
263: MOV OUT[2], TEMP[0]
264: MOV OUT[3], TEMP[1]
265: MOV OUT[4], TEMP[2]
266: MOV OUT[5], TEMP[8]
267: END
; ModuleID = 'tgsi'
source_filename = "tgsi"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5"
target triple = "amdgcn--"

define amdgpu_vs void @main([0 x <4 x i32>] addrspace(6)* inreg noalias dereferenceable(18446744073709551615), [0 x <8 x i32>] addrspace(6)* inreg noalias dereferenceable(18446744073709551615), [0 x float] addrspace(6)* inreg noalias dereferenceable(18446744073709551615), [0 x <8 x i32>] addrspace(6)* inreg noalias dereferenceable(18446744073709551615), i32 inreg, i32 inreg, i32 inreg, i32 inreg, [0 x <4 x i32>] addrspace(6)* inreg noalias dereferenceable(18446744073709551615), i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) #0 {
main_body:
  %20 = alloca float, addrspace(5)
  %21 = alloca float, addrspace(5)
  %22 = alloca float, addrspace(5)
  %23 = alloca float, addrspace(5)
  %24 = alloca float, addrspace(5)
  %25 = alloca float, addrspace(5)
  %26 = alloca float, addrspace(5)
  %27 = alloca float, addrspace(5)
  %28 = alloca float, addrspace(5)
  %29 = alloca float, addrspace(5)
  %30 = alloca float, addrspace(5)
  %31 = alloca float, addrspace(5)
  %32 = alloca float, addrspace(5)
  %33 = alloca float, addrspace(5)
  %34 = alloca float, addrspace(5)
  %35 = alloca float, addrspace(5)
  %36 = alloca float, addrspace(5)
  %37 = alloca float, addrspace(5)
  %38 = alloca float, addrspace(5)
  %39 = alloca float, addrspace(5)
  %40 = alloca float, addrspace(5)
  %41 = alloca float, addrspace(5)
  %42 = alloca float, addrspace(5)
  %43 = alloca float, addrspace(5)
  %44 = alloca float, addrspace(5)
  %45 = alloca float, addrspace(5)
  %46 = alloca float, addrspace(5)
  %47 = alloca float, addrspace(5)
  %48 = alloca float, addrspace(5)
  %49 = alloca float, addrspace(5)
  %50 = alloca float, addrspace(5)
  %51 = alloca float, addrspace(5)
  %52 = alloca float, addrspace(5)
  %53 = alloca float, addrspace(5)
  %54 = alloca float, addrspace(5)
  %55 = alloca float, addrspace(5)
  %56 = alloca float, addrspace(5)
  %57 = alloca float, addrspace(5)
  %58 = alloca float, addrspace(5)
  %59 = alloca float, addrspace(5)
  %60 = alloca float, addrspace(5)
  %61 = alloca float, addrspace(5)
  %62 = alloca float, addrspace(5)
  %63 = alloca float, addrspace(5)
  %64 = alloca float, addrspace(5)
  %65 = alloca float, addrspace(5)
  %66 = alloca float, addrspace(5)
  %67 = alloca float, addrspace(5)
  %68 = alloca float, addrspace(5)
  %69 = alloca float, addrspace(5)
  %70 = alloca float, addrspace(5)
  %71 = alloca float, addrspace(5)
  %72 = alloca float, addrspace(5)
  %73 = alloca float, addrspace(5)
  %74 = alloca float, addrspace(5)
  %75 = alloca float, addrspace(5)
  %76 = alloca float, addrspace(5)
  %77 = alloca float, addrspace(5)
  %78 = alloca float, addrspace(5)
  %79 = alloca float, addrspace(5)
  %80 = alloca float, addrspace(5)
  %81 = alloca float, addrspace(5)
  %82 = alloca float, addrspace(5)
  %83 = alloca float, addrspace(5)
  %84 = alloca float, addrspace(5)
  %85 = alloca float, addrspace(5)
  %86 = alloca float, addrspace(5)
  %87 = alloca float, addrspace(5)
  %88 = alloca float, addrspace(5)
  %89 = alloca float, addrspace(5)
  %90 = alloca float, addrspace(5)
  %91 = alloca float, addrspace(5)
  %92 = alloca float, addrspace(5)
  %93 = alloca float, addrspace(5)
  %94 = alloca float, addrspace(5)
  %95 = alloca float, addrspace(5)
  %96 = alloca float, addrspace(5)
  %97 = alloca float, addrspace(5)
  %98 = alloca float, addrspace(5)
  %99 = alloca float, addrspace(5)
  %100 = alloca float, addrspace(5)
  %101 = alloca float, addrspace(5)
  %102 = alloca float, addrspace(5)
  %103 = alloca float, addrspace(5)
  %104 = alloca float, addrspace(5)
  %105 = alloca float, addrspace(5)
  %106 = alloca float, addrspace(5)
  %107 = alloca float, addrspace(5)
  %108 = alloca float, addrspace(5)
  %109 = alloca float, addrspace(5)
  %110 = alloca float, addrspace(5)
  %111 = alloca float, addrspace(5)
  %112 = alloca float, addrspace(5)
  %113 = alloca float, addrspace(5)
  %114 = alloca float, addrspace(5)
  %115 = alloca float, addrspace(5)
  %116 = alloca float, addrspace(5)
  %117 = alloca float, addrspace(5)
  %118 = alloca float, addrspace(5)
  %119 = alloca float, addrspace(5)
  %120 = alloca float, addrspace(5)
  %121 = alloca float, addrspace(5)
  %122 = alloca float, addrspace(5)
  %123 = alloca float, addrspace(5)
  %124 = alloca float, addrspace(5)
  %125 = alloca float, addrspace(5)
  %126 = alloca float, addrspace(5)
  %127 = alloca float, addrspace(5)
  %128 = alloca float, addrspace(5)
  %129 = alloca float, addrspace(5)
  %130 = alloca float, addrspace(5)
  %131 = alloca float, addrspace(5)
  %132 = alloca float, addrspace(5)
  %133 = alloca float, addrspace(5)
  %134 = alloca float, addrspace(5)
  %135 = alloca float, addrspace(5)
  %136 = alloca float, addrspace(5)
  %137 = alloca float, addrspace(5)
  %138 = alloca float, addrspace(5)
  %139 = alloca float, addrspace(5)
  %140 = alloca float, addrspace(5)
  %141 = alloca float, addrspace(5)
  %142 = alloca float, addrspace(5)
  %143 = alloca float, addrspace(5)
  %144 = alloca float, addrspace(5)
  %145 = alloca float, addrspace(5)
  %146 = alloca float, addrspace(5)
  %147 = alloca float, addrspace(5)
  %148 = alloca float, addrspace(5)
  %149 = alloca float, addrspace(5)
  %150 = alloca float, addrspace(5)
  %151 = alloca float, addrspace(5)
  %152 = alloca float, addrspace(5)
  %153 = alloca float, addrspace(5)
  %154 = alloca float, addrspace(5)
  %155 = alloca float, addrspace(5)
  %156 = alloca float, addrspace(5)
  %157 = alloca float, addrspace(5)
  %158 = alloca float, addrspace(5)
  %159 = alloca float, addrspace(5)
  %160 = alloca float, addrspace(5)
  %161 = alloca float, addrspace(5)
  %162 = alloca float, addrspace(5)
  %163 = alloca float, addrspace(5)
  %164 = alloca float, addrspace(5)
  %165 = alloca float, addrspace(5)
  %166 = alloca float, addrspace(5)
  %167 = alloca float, addrspace(5)
  %168 = alloca float, addrspace(5)
  %169 = alloca float, addrspace(5)
  %170 = alloca float, addrspace(5)
  %171 = alloca float, addrspace(5)
  %172 = alloca float, addrspace(5)
  %173 = alloca float, addrspace(5)
  %174 = alloca float, addrspace(5)
  %175 = alloca float, addrspace(5)
  %176 = alloca float, addrspace(5)
  %177 = alloca float, addrspace(5)
  %178 = alloca float, addrspace(5)
  %179 = alloca float, addrspace(5)
  %180 = alloca float, addrspace(5)
  %181 = alloca float, addrspace(5)
  %182 = alloca float, addrspace(5)
  %183 = alloca float, addrspace(5)
  %184 = alloca float, addrspace(5)
  %185 = alloca float, addrspace(5)
  %186 = alloca float, addrspace(5)
  %187 = alloca float, addrspace(5)
  %188 = alloca float, addrspace(5)
  %189 = alloca float, addrspace(5)
  %190 = alloca float, addrspace(5)
  %191 = alloca float, addrspace(5)
  %192 = alloca float, addrspace(5)
  %193 = alloca float, addrspace(5)
  %194 = alloca float, addrspace(5)
  %195 = alloca float, addrspace(5)
  %196 = alloca float, addrspace(5)
  %197 = alloca float, addrspace(5)
  %198 = alloca float, addrspace(5)
  %199 = alloca float, addrspace(5)
  %200 = alloca float, addrspace(5)
  %201 = alloca float, addrspace(5)
  %202 = alloca float, addrspace(5)
  %203 = alloca float, addrspace(5)
  %204 = alloca float, addrspace(5)
  %205 = alloca float, addrspace(5)
  %206 = alloca float, addrspace(5)
  %207 = alloca float, addrspace(5)
  %208 = alloca float, addrspace(5)
  %209 = alloca float, addrspace(5)
  %210 = alloca float, addrspace(5)
  %211 = alloca float, addrspace(5)
  %212 = alloca float, addrspace(5)
  %213 = alloca float, addrspace(5)
  %214 = alloca float, addrspace(5)
  %215 = alloca float, addrspace(5)
  %216 = alloca float, addrspace(5)
  %217 = alloca float, addrspace(5)
  %218 = alloca float, addrspace(5)
  %219 = alloca float, addrspace(5)
  %220 = alloca float, addrspace(5)
  %221 = alloca float, addrspace(5)
  %222 = alloca float, addrspace(5)
  %223 = alloca float, addrspace(5)
  %224 = alloca float, addrspace(5)
  %225 = alloca float, addrspace(5)
  %226 = alloca float, addrspace(5)
  %227 = alloca float, addrspace(5)
  %228 = alloca float, addrspace(5)
  %229 = alloca float, addrspace(5)
  %230 = alloca float, addrspace(5)
  %231 = alloca float, addrspace(5)
  %232 = alloca float, addrspace(5)
  %233 = alloca float, addrspace(5)
  %234 = alloca float, addrspace(5)
  %235 = alloca float, addrspace(5)
  %236 = alloca float, addrspace(5)
  %237 = alloca float, addrspace(5)
  %238 = alloca float, addrspace(5)
  %239 = alloca float, addrspace(5)
  %240 = alloca float, addrspace(5)
  %241 = alloca float, addrspace(5)
  %242 = alloca float, addrspace(5)
  %243 = alloca float, addrspace(5)
  %244 = alloca float, addrspace(5)
  %245 = alloca float, addrspace(5)
  %246 = alloca float, addrspace(5)
  %247 = alloca float, addrspace(5)
  %248 = alloca float, addrspace(5)
  %249 = alloca float, addrspace(5)
  %250 = alloca float, addrspace(5)
  %251 = alloca float, addrspace(5)
  %252 = alloca float, addrspace(5)
  %253 = alloca float, addrspace(5)
  %254 = alloca float, addrspace(5)
  %255 = alloca float, addrspace(5)
  %256 = alloca float, addrspace(5)
  %257 = alloca float, addrspace(5)
  %258 = alloca float, addrspace(5)
  %259 = alloca float, addrspace(5)
  %260 = alloca float, addrspace(5)
  %261 = alloca float, addrspace(5)
  %262 = alloca float, addrspace(5)
  %263 = alloca float, addrspace(5)
  %264 = alloca float, addrspace(5)
  %265 = alloca float, addrspace(5)
  %266 = alloca float, addrspace(5)
  %267 = alloca float, addrspace(5)
  %268 = alloca float, addrspace(5)
  %269 = alloca float, addrspace(5)
  %270 = alloca float, addrspace(5)
  %271 = alloca float, addrspace(5)
  %272 = alloca float, addrspace(5)
  %273 = alloca float, addrspace(5)
  %274 = alloca float, addrspace(5)
  %275 = alloca float, addrspace(5)
  %276 = alloca float, addrspace(5)
  %277 = alloca float, addrspace(5)
  %278 = alloca float, addrspace(5)
  %279 = alloca float, addrspace(5)
  %280 = alloca float, addrspace(5)
  %281 = alloca float, addrspace(5)
  %282 = alloca float, addrspace(5)
  %283 = alloca float, addrspace(5)
  %284 = alloca float, addrspace(5)
  %285 = alloca float, addrspace(5)
  %286 = alloca float, addrspace(5)
  %287 = alloca float, addrspace(5)
  %288 = alloca float, addrspace(5)
  %289 = alloca float, addrspace(5)
  %290 = alloca float, addrspace(5)
  %291 = alloca float, addrspace(5)
  %292 = alloca float, addrspace(5)
  %293 = alloca float, addrspace(5)
  %294 = alloca float, addrspace(5)
  %295 = alloca float, addrspace(5)
  %296 = alloca float, addrspace(5)
  %297 = alloca float, addrspace(5)
  %298 = alloca float, addrspace(5)
  %299 = alloca float, addrspace(5)
  %300 = alloca float, addrspace(5)
  %301 = alloca float, addrspace(5)
  %302 = alloca float, addrspace(5)
  %303 = alloca float, addrspace(5)
  %304 = alloca float, addrspace(5)
  %305 = alloca float, addrspace(5)
  %306 = alloca float, addrspace(5)
  %307 = alloca float, addrspace(5)
  %308 = alloca float, addrspace(5)
  %309 = alloca float, addrspace(5)
  %310 = alloca float, addrspace(5)
  %311 = alloca float, addrspace(5)
  %312 = alloca float, addrspace(5)
  %313 = alloca float, addrspace(5)
  %314 = alloca float, addrspace(5)
  %315 = alloca float, addrspace(5)
  %316 = alloca float, addrspace(5)
  %317 = alloca float, addrspace(5)
  %318 = alloca float, addrspace(5)
  %319 = alloca float, addrspace(5)
  %320 = alloca float, addrspace(5)
  %321 = alloca float, addrspace(5)
  %322 = alloca float, addrspace(5)
  %323 = alloca float, addrspace(5)
  %324 = alloca float, addrspace(5)
  %325 = alloca float, addrspace(5)
  %326 = alloca float, addrspace(5)
  %327 = alloca float, addrspace(5)
  %328 = alloca float, addrspace(5)
  %329 = alloca float, addrspace(5)
  %330 = alloca float, addrspace(5)
  %331 = alloca float, addrspace(5)
  %332 = alloca float, addrspace(5)
  %333 = alloca float, addrspace(5)
  %334 = alloca float, addrspace(5)
  %335 = alloca float, addrspace(5)
  %336 = alloca float, addrspace(5)
  %337 = alloca float, addrspace(5)
  %338 = alloca float, addrspace(5)
  %339 = alloca float, addrspace(5)
  %340 = alloca float, addrspace(5)
  %341 = alloca float, addrspace(5)
  %342 = alloca float, addrspace(5)
  %343 = alloca float, addrspace(5)
  %344 = alloca float, addrspace(5)
  %345 = alloca float, addrspace(5)
  %346 = alloca float, addrspace(5)
  %347 = alloca float, addrspace(5)
  %348 = alloca float, addrspace(5)
  %349 = alloca float, addrspace(5)
  %350 = alloca float, addrspace(5)
  %351 = alloca float, addrspace(5)
  %352 = alloca float, addrspace(5)
  %353 = alloca float, addrspace(5)
  %354 = alloca float, addrspace(5)
  %355 = alloca float, addrspace(5)
  %356 = alloca float, addrspace(5)
  %357 = alloca float, addrspace(5)
  %358 = alloca float, addrspace(5)
  %359 = alloca float, addrspace(5)
  %360 = alloca float, addrspace(5)
  %361 = alloca float, addrspace(5)
  %362 = alloca float, addrspace(5)
  %363 = alloca float, addrspace(5)
  %364 = alloca float, addrspace(5)
  %365 = alloca float, addrspace(5)
  %366 = alloca float, addrspace(5)
  %367 = alloca float, addrspace(5)
  %368 = alloca float, addrspace(5)
  %369 = alloca float, addrspace(5)
  %370 = alloca float, addrspace(5)
  %371 = alloca float, addrspace(5)
  %372 = alloca float, addrspace(5)
  %373 = alloca float, addrspace(5)
  %374 = alloca float, addrspace(5)
  %375 = alloca float, addrspace(5)
  %376 = alloca float, addrspace(5)
  %377 = alloca float, addrspace(5)
  %378 = alloca float, addrspace(5)
  %379 = alloca float, addrspace(5)
  %380 = alloca float, addrspace(5)
  %381 = alloca float, addrspace(5)
  %382 = alloca float, addrspace(5)
  %383 = alloca float, addrspace(5)
  %384 = alloca float, addrspace(5)
  %385 = alloca float, addrspace(5)
  %386 = alloca float, addrspace(5)
  %387 = alloca float, addrspace(5)
  %388 = alloca float, addrspace(5)
  %389 = alloca float, addrspace(5)
  %390 = alloca float, addrspace(5)
  %391 = alloca float, addrspace(5)
  %392 = alloca float, addrspace(5)
  %393 = alloca float, addrspace(5)
  %394 = alloca float, addrspace(5)
  %395 = alloca float, addrspace(5)
  %396 = alloca float, addrspace(5)
  %397 = alloca float, addrspace(5)
  %398 = alloca float, addrspace(5)
  %399 = alloca float, addrspace(5)
  %400 = alloca float, addrspace(5)
  %401 = alloca float, addrspace(5)
  %402 = alloca float, addrspace(5)
  %403 = alloca float, addrspace(5)
  %404 = alloca float, addrspace(5)
  %405 = alloca float, addrspace(5)
  %406 = alloca float, addrspace(5)
  %407 = alloca float, addrspace(5)
  %408 = alloca float, addrspace(5)
  %409 = alloca float, addrspace(5)
  %410 = alloca float, addrspace(5)
  %411 = alloca float, addrspace(5)
  %412 = alloca float, addrspace(5)
  %413 = alloca float, addrspace(5)
  %414 = alloca float, addrspace(5)
  %415 = alloca float, addrspace(5)
  %416 = alloca float, addrspace(5)
  %417 = alloca float, addrspace(5)
  %418 = alloca float, addrspace(5)
  %419 = alloca float, addrspace(5)
  %420 = alloca float, addrspace(5)
  %421 = alloca float, addrspace(5)
  %422 = alloca float, addrspace(5)
  %423 = alloca float, addrspace(5)
  %424 = alloca float, addrspace(5)
  %425 = alloca float, addrspace(5)
  %426 = alloca float, addrspace(5)
  %427 = alloca float, addrspace(5)
  %428 = alloca float, addrspace(5)
  %429 = alloca float, addrspace(5)
  %430 = alloca float, addrspace(5)
  %431 = alloca float, addrspace(5)
  %432 = alloca float, addrspace(5)
  %433 = alloca float, addrspace(5)
  %434 = alloca float, addrspace(5)
  %435 = alloca float, addrspace(5)
  %436 = alloca float, addrspace(5)
  %437 = alloca float, addrspace(5)
  %438 = alloca float, addrspace(5)
  %439 = alloca float, addrspace(5)
  %440 = alloca float, addrspace(5)
  %441 = alloca float, addrspace(5)
  %442 = alloca float, addrspace(5)
  %443 = alloca float, addrspace(5)
  %444 = alloca float, addrspace(5)
  %445 = alloca float, addrspace(5)
  %446 = alloca float, addrspace(5)
  %447 = alloca float, addrspace(5)
  %448 = alloca float, addrspace(5)
  %449 = alloca float, addrspace(5)
  %450 = alloca float, addrspace(5)
  %451 = alloca float, addrspace(5)
  %452 = alloca float, addrspace(5)
  %453 = alloca float, addrspace(5)
  %454 = alloca float, addrspace(5)
  %455 = alloca float, addrspace(5)
  %456 = alloca float, addrspace(5)
  %457 = alloca float, addrspace(5)
  %458 = alloca float, addrspace(5)
  %459 = alloca float, addrspace(5)
  %460 = alloca float, addrspace(5)
  %461 = alloca float, addrspace(5)
  %462 = alloca float, addrspace(5)
  %463 = alloca float, addrspace(5)
  %464 = alloca float, addrspace(5)
  %465 = alloca float, addrspace(5)
  %466 = alloca float, addrspace(5)
  %467 = alloca float, addrspace(5)
  %468 = alloca float, addrspace(5)
  %469 = alloca float, addrspace(5)
  %470 = alloca float, addrspace(5)
  %471 = alloca float, addrspace(5)
  %472 = alloca float, addrspace(5)
  %473 = alloca float, addrspace(5)
  %474 = alloca float, addrspace(5)
  %475 = alloca float, addrspace(5)
  %476 = alloca float, addrspace(5)
  %477 = alloca float, addrspace(5)
  %478 = alloca float, addrspace(5)
  %479 = alloca float, addrspace(5)
  %480 = alloca float, addrspace(5)
  %481 = alloca float, addrspace(5)
  %482 = alloca float, addrspace(5)
  %483 = alloca float, addrspace(5)
  %484 = alloca float, addrspace(5)
  %485 = alloca float, addrspace(5)
  %486 = alloca float, addrspace(5)
  %487 = alloca float, addrspace(5)
  %488 = alloca float, addrspace(5)
  %489 = alloca float, addrspace(5)
  %490 = alloca float, addrspace(5)
  %491 = alloca float, addrspace(5)
  %492 = alloca float, addrspace(5)
  %493 = alloca float, addrspace(5)
  %494 = alloca float, addrspace(5)
  %495 = alloca float, addrspace(5)
  %496 = alloca float, addrspace(5)
  %497 = alloca float, addrspace(5)
  %498 = alloca float, addrspace(5)
  %499 = alloca float, addrspace(5)
  %500 = alloca float, addrspace(5)
  %501 = alloca float, addrspace(5)
  %502 = alloca float, addrspace(5)
  %503 = alloca float, addrspace(5)
  %504 = alloca float, addrspace(5)
  %505 = alloca float, addrspace(5)
  %506 = alloca float, addrspace(5)
  %507 = alloca float, addrspace(5)
  %508 = alloca float, addrspace(5)
  %509 = alloca float, addrspace(5)
  %510 = alloca float, addrspace(5)
  %511 = alloca float, addrspace(5)
  %512 = alloca float, addrspace(5)
  %513 = alloca float, addrspace(5)
  %514 = alloca float, addrspace(5)
  %515 = alloca float, addrspace(5)
  %516 = alloca float, addrspace(5)
  %517 = alloca float, addrspace(5)
  %518 = alloca float, addrspace(5)
  %519 = alloca float, addrspace(5)
  %520 = alloca float, addrspace(5)
  %521 = alloca float, addrspace(5)
  %522 = alloca float, addrspace(5)
  %523 = alloca float, addrspace(5)
  %524 = alloca float, addrspace(5)
  %525 = alloca float, addrspace(5)
  %526 = alloca float, addrspace(5)
  %527 = alloca float, addrspace(5)
  %528 = alloca float, addrspace(5)
  %529 = alloca float, addrspace(5)
  %530 = alloca float, addrspace(5)
  %531 = alloca float, addrspace(5)
  %532 = alloca float, addrspace(5)
  %533 = alloca float, addrspace(5)
  %534 = alloca float, addrspace(5)
  %535 = alloca float, addrspace(5)
  %536 = alloca float, addrspace(5)
  %537 = alloca float, addrspace(5)
  %538 = alloca float, addrspace(5)
  %539 = alloca float, addrspace(5)
  %540 = alloca float, addrspace(5)
  %541 = alloca float, addrspace(5)
  %542 = alloca float, addrspace(5)
  %543 = alloca float, addrspace(5)
  %544 = alloca float, addrspace(5)
  %545 = alloca float, addrspace(5)
  %546 = alloca float, addrspace(5)
  %547 = alloca float, addrspace(5)
  %548 = alloca float, addrspace(5)
  %549 = alloca float, addrspace(5)
  %550 = alloca float, addrspace(5)
  %551 = alloca float, addrspace(5)
  %552 = alloca float, addrspace(5)
  %553 = alloca float, addrspace(5)
  %554 = alloca float, addrspace(5)
  %555 = alloca float, addrspace(5)
  %556 = alloca float, addrspace(5)
  %557 = alloca float, addrspace(5)
  %558 = alloca float, addrspace(5)
  %559 = alloca float, addrspace(5)
  %560 = alloca float, addrspace(5)
  %561 = alloca float, addrspace(5)
  %562 = alloca float, addrspace(5)
  %563 = alloca float, addrspace(5)
  %564 = alloca float, addrspace(5)
  %565 = alloca float, addrspace(5)
  %566 = alloca float, addrspace(5)
  %567 = alloca float, addrspace(5)
  %568 = alloca float, addrspace(5)
  %569 = alloca float, addrspace(5)
  %570 = alloca float, addrspace(5)
  %571 = alloca float, addrspace(5)
  %572 = alloca float, addrspace(5)
  %573 = alloca float, addrspace(5)
  %574 = alloca float, addrspace(5)
  %575 = alloca float, addrspace(5)
  %576 = alloca float, addrspace(5)
  %577 = alloca float, addrspace(5)
  %578 = alloca float, addrspace(5)
  %579 = alloca float, addrspace(5)
  %580 = alloca float, addrspace(5)
  %581 = alloca float, addrspace(5)
  %582 = alloca float, addrspace(5)
  %583 = alloca float, addrspace(5)
  %584 = alloca float, addrspace(5)
  %585 = alloca float, addrspace(5)
  %586 = alloca float, addrspace(5)
  %587 = alloca float, addrspace(5)
  %588 = alloca float, addrspace(5)
  %589 = alloca float, addrspace(5)
  %590 = alloca float, addrspace(5)
  %591 = alloca float, addrspace(5)
  %592 = alloca float, addrspace(5)
  %593 = alloca float, addrspace(5)
  %594 = alloca float, addrspace(5)
  %595 = alloca float, addrspace(5)
  %596 = alloca float, addrspace(5)
  %597 = alloca float, addrspace(5)
  %598 = alloca float, addrspace(5)
  %599 = alloca float, addrspace(5)
  %600 = alloca float, addrspace(5)
  %601 = alloca float, addrspace(5)
  %602 = alloca float, addrspace(5)
  %603 = alloca float, addrspace(5)
  %604 = alloca float, addrspace(5)
  %605 = alloca float, addrspace(5)
  %606 = alloca float, addrspace(5)
  %607 = alloca float, addrspace(5)
  %608 = alloca float, addrspace(5)
  %609 = alloca float, addrspace(5)
  %610 = alloca float, addrspace(5)
  %611 = alloca float, addrspace(5)
  %612 = alloca float, addrspace(5)
  %613 = alloca float, addrspace(5)
  %614 = alloca float, addrspace(5)
  %615 = alloca float, addrspace(5)
  %616 = alloca float, addrspace(5)
  %617 = alloca float, addrspace(5)
  %618 = alloca float, addrspace(5)
  %619 = alloca float, addrspace(5)
  %620 = alloca float, addrspace(5)
  %621 = alloca float, addrspace(5)
  %622 = alloca float, addrspace(5)
  %623 = alloca float, addrspace(5)
  %624 = alloca float, addrspace(5)
  %625 = alloca float, addrspace(5)
  %626 = alloca float, addrspace(5)
  %627 = alloca float, addrspace(5)
  %628 = alloca float, addrspace(5)
  %629 = alloca float, addrspace(5)
  %630 = alloca float, addrspace(5)
  %631 = alloca float, addrspace(5)
  %632 = alloca float, addrspace(5)
  %633 = alloca float, addrspace(5)
  %634 = alloca float, addrspace(5)
  %635 = alloca float, addrspace(5)
  %636 = alloca float, addrspace(5)
  %637 = alloca float, addrspace(5)
  %638 = alloca float, addrspace(5)
  %639 = alloca float, addrspace(5)
  %640 = alloca float, addrspace(5)
  %641 = alloca float, addrspace(5)
  %642 = alloca float, addrspace(5)
  %643 = alloca float, addrspace(5)
  %644 = alloca float, addrspace(5)
  %645 = alloca float, addrspace(5)
  %646 = alloca float, addrspace(5)
  %647 = alloca float, addrspace(5)
  %648 = alloca float, addrspace(5)
  %649 = alloca float, addrspace(5)
  %650 = alloca float, addrspace(5)
  %651 = alloca float, addrspace(5)
  %652 = alloca float, addrspace(5)
  %653 = alloca float, addrspace(5)
  %654 = alloca float, addrspace(5)
  %655 = alloca float, addrspace(5)
  %656 = alloca float, addrspace(5)
  %657 = alloca float, addrspace(5)
  %658 = alloca float, addrspace(5)
  %659 = alloca float, addrspace(5)
  %660 = alloca float, addrspace(5)
  %661 = alloca float, addrspace(5)
  %662 = alloca float, addrspace(5)
  %663 = alloca float, addrspace(5)
  %664 = alloca float, addrspace(5)
  %665 = alloca float, addrspace(5)
  %666 = alloca float, addrspace(5)
  %667 = alloca float, addrspace(5)
  %668 = alloca float, addrspace(5)
  %669 = alloca float, addrspace(5)
  %670 = alloca float, addrspace(5)
  %671 = alloca float, addrspace(5)
  %672 = alloca float, addrspace(5)
  %673 = alloca float, addrspace(5)
  %674 = alloca float, addrspace(5)
  %675 = alloca float, addrspace(5)
  %676 = alloca float, addrspace(5)
  %677 = alloca float, addrspace(5)
  %678 = alloca float, addrspace(5)
  %679 = alloca float, addrspace(5)
  %680 = alloca float, addrspace(5)
  %681 = alloca float, addrspace(5)
  %682 = alloca float, addrspace(5)
  %683 = alloca float, addrspace(5)
  %684 = alloca float, addrspace(5)
  %685 = alloca float, addrspace(5)
  %686 = alloca float, addrspace(5)
  %687 = alloca float, addrspace(5)
  %688 = alloca float, addrspace(5)
  %689 = alloca float, addrspace(5)
  %690 = alloca float, addrspace(5)
  %691 = alloca float, addrspace(5)
  %692 = alloca float, addrspace(5)
  %693 = alloca float, addrspace(5)
  %694 = alloca float, addrspace(5)
  %695 = alloca float, addrspace(5)
  %696 = alloca float, addrspace(5)
  %697 = alloca float, addrspace(5)
  %698 = alloca float, addrspace(5)
  %699 = alloca float, addrspace(5)
  %700 = alloca float, addrspace(5)
  %701 = alloca float, addrspace(5)
  %702 = alloca float, addrspace(5)
  %703 = alloca float, addrspace(5)
  %704 = alloca float, addrspace(5)
  %705 = alloca float, addrspace(5)
  %706 = alloca float, addrspace(5)
  %707 = alloca float, addrspace(5)
  %708 = getelementptr [0 x <4 x i32>], [0 x <4 x i32>] addrspace(6)* %8, i32 0, i32 0, !amdgpu.uniform !0
  %709 = load <4 x i32>, <4 x i32> addrspace(6)* %708, !invariant.load !0
  %710 = call nsz <4 x float> @llvm.amdgcn.buffer.load.format.v4f32(<4 x i32> %709, i32 %13, i32 0, i1 false, i1 false) #2
  %711 = extractelement <4 x float> %710, i32 0
  %712 = extractelement <4 x float> %710, i32 1
  %713 = extractelement <4 x float> %710, i32 2
  %714 = extractelement <4 x float> %710, i32 3
  %715 = getelementptr [0 x <4 x i32>], [0 x <4 x i32>] addrspace(6)* %8, i32 0, i32 1, !amdgpu.uniform !0
  %716 = load <4 x i32>, <4 x i32> addrspace(6)* %715, !invariant.load !0
  %717 = call nsz <2 x float> @llvm.amdgcn.buffer.load.format.v2f32(<4 x i32> %716, i32 %14, i32 0, i1 false, i1 false) #2
  %718 = extractelement <2 x float> %717, i32 0
  %719 = extractelement <2 x float> %717, i32 1
  %720 = insertelement <4 x float> undef, float %718, i32 0
  %721 = insertelement <4 x float> %720, float %719, i32 1
  %722 = insertelement <4 x float> %721, float undef, i32 2
  %723 = insertelement <4 x float> %722, float undef, i32 3
  %724 = extractelement <4 x float> %723, i32 0
  %725 = extractelement <4 x float> %723, i32 1
  %726 = extractelement <4 x float> %723, i32 2
  %727 = extractelement <4 x float> %723, i32 3
  %728 = getelementptr [0 x <4 x i32>], [0 x <4 x i32>] addrspace(6)* %8, i32 0, i32 2, !amdgpu.uniform !0
  %729 = load <4 x i32>, <4 x i32> addrspace(6)* %728, !invariant.load !0
  %730 = call nsz <4 x float> @llvm.amdgcn.buffer.load.format.v4f32(<4 x i32> %729, i32 %15, i32 0, i1 false, i1 false) #2
  %731 = extractelement <4 x float> %730, i32 0
  %732 = extractelement <4 x float> %730, i32 1
  %733 = extractelement <4 x float> %730, i32 2
  %734 = insertelement <4 x float> undef, float %731, i32 0
  %735 = insertelement <4 x float> %734, float %732, i32 1
  %736 = insertelement <4 x float> %735, float %733, i32 2
  %737 = insertelement <4 x float> %736, float undef, i32 3
  %738 = extractelement <4 x float> %737, i32 0
  %739 = extractelement <4 x float> %737, i32 1
  %740 = extractelement <4 x float> %737, i32 2
  %741 = extractelement <4 x float> %737, i32 3
  %742 = getelementptr [0 x <4 x i32>], [0 x <4 x i32>] addrspace(6)* %8, i32 0, i32 3, !amdgpu.uniform !0
  %743 = load <4 x i32>, <4 x i32> addrspace(6)* %742, !invariant.load !0
  %744 = call nsz <4 x float> @llvm.amdgcn.buffer.load.format.v4f32(<4 x i32> %743, i32 %16, i32 0, i1 false, i1 false) #2
  %745 = extractelement <4 x float> %744, i32 0
  %746 = extractelement <4 x float> %744, i32 1
  %747 = extractelement <4 x float> %744, i32 2
  %748 = extractelement <4 x float> %744, i32 3
  %749 = getelementptr [0 x <4 x i32>], [0 x <4 x i32>] addrspace(6)* %8, i32 0, i32 4, !amdgpu.uniform !0
  %750 = load <4 x i32>, <4 x i32> addrspace(6)* %749, !invariant.load !0
  %751 = call nsz float @llvm.amdgcn.buffer.load.format.f32(<4 x i32> %750, i32 %17, i32 0, i1 false, i1 false) #2
  %752 = insertelement <4 x float> undef, float %751, i32 0
  %753 = insertelement <4 x float> %752, float undef, i32 1
  %754 = insertelement <4 x float> %753, float undef, i32 2
  %755 = insertelement <4 x float> %754, float undef, i32 3
  %756 = extractelement <4 x float> %755, i32 0
  %757 = extractelement <4 x float> %755, i32 1
  %758 = extractelement <4 x float> %755, i32 2
  %759 = extractelement <4 x float> %755, i32 3
  %760 = getelementptr [0 x <4 x i32>], [0 x <4 x i32>] addrspace(6)* %8, i32 0, i32 5, !amdgpu.uniform !0
  %761 = load <4 x i32>, <4 x i32> addrspace(6)* %760, !invariant.load !0
  %762 = call nsz <4 x float> @llvm.amdgcn.buffer.load.format.v4f32(<4 x i32> %761, i32 %18, i32 0, i1 false, i1 false) #2
  %763 = extractelement <4 x float> %762, i32 0
  %764 = extractelement <4 x float> %762, i32 1
  %765 = extractelement <4 x float> %762, i32 2
  %766 = insertelement <4 x float> undef, float %763, i32 0
  %767 = insertelement <4 x float> %766, float %764, i32 1
  %768 = insertelement <4 x float> %767, float %765, i32 2
  %769 = insertelement <4 x float> %768, float undef, i32 3
  %770 = extractelement <4 x float> %769, i32 0
  %771 = extractelement <4 x float> %769, i32 1
  %772 = extractelement <4 x float> %769, i32 2
  %773 = extractelement <4 x float> %769, i32 3
  %774 = getelementptr [0 x <4 x i32>], [0 x <4 x i32>] addrspace(6)* %8, i32 0, i32 6, !amdgpu.uniform !0
  %775 = load <4 x i32>, <4 x i32> addrspace(6)* %774, !invariant.load !0
  %776 = call nsz <4 x float> @llvm.amdgcn.buffer.load.format.v4f32(<4 x i32> %775, i32 %19, i32 0, i1 false, i1 false) #2
  %777 = extractelement <4 x float> %776, i32 0
  %778 = extractelement <4 x float> %776, i32 1
  %779 = extractelement <4 x float> %776, i32 2
  %780 = insertelement <4 x float> undef, float %777, i32 0
  %781 = insertelement <4 x float> %780, float %778, i32 1
  %782 = insertelement <4 x float> %781, float %779, i32 2
  %783 = insertelement <4 x float> %782, float undef, i32 3
  %784 = extractelement <4 x float> %783, i32 0
  %785 = extractelement <4 x float> %783, i32 1
  %786 = extractelement <4 x float> %783, i32 2
  %787 = extractelement <4 x float> %783, i32 3
  store float 0.000000e+00, float addrspace(5)* %683
  store float 0.000000e+00, float addrspace(5)* %682
  store float 0.000000e+00, float addrspace(5)* %681
  store float 0.000000e+00, float addrspace(5)* %680
  store float 0.000000e+00, float addrspace(5)* %679
  store float 0.000000e+00, float addrspace(5)* %678
  store float 0.000000e+00, float addrspace(5)* %677
  store float 0.000000e+00, float addrspace(5)* %676
  store float 0.000000e+00, float addrspace(5)* %675
  store float 0.000000e+00, float addrspace(5)* %674
  store float 0.000000e+00, float addrspace(5)* %673
  store float 0.000000e+00, float addrspace(5)* %672
  %788 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %789 = insertelement <4 x i32> undef, i32 %788, i32 0
  %790 = insertelement <4 x i32> %789, i32 0, i32 1
  %791 = insertelement <4 x i32> %790, i32 1632, i32 2
  %792 = insertelement <4 x i32> %791, i32 163756, i32 3
  %793 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %792, i32 800)
  %794 = call nsz float @llvm.fabs.f32(float %793) #4
  store float %794, float addrspace(5)* %671
  %795 = load float, float addrspace(5)* %671
  %796 = fsub nsz float -0.000000e+00, %795
  %797 = load float, float addrspace(5)* %671
  %798 = fcmp nsz olt float %796, %797
  %799 = sext i1 %798 to i32
  %800 = bitcast i32 %799 to float
  store float %800, float addrspace(5)* %667
  %801 = load float, float addrspace(5)* %667
  %802 = bitcast float %801 to i32
  %803 = and i32 %802, 1065353216
  %804 = bitcast i32 %803 to float
  store float %804, float addrspace(5)* %663
  %805 = load float, float addrspace(5)* %663
  store float %805, float addrspace(5)* %670
  %806 = fadd nsz float -1.280000e+02, %724
  %807 = fadd nsz float -1.280000e+02, %725
  store float %806, float addrspace(5)* %659
  store float %807, float addrspace(5)* %658
  %808 = load float, float addrspace(5)* %659
  %809 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %810 = insertelement <4 x i32> undef, i32 %809, i32 0
  %811 = insertelement <4 x i32> %810, i32 0, i32 1
  %812 = insertelement <4 x i32> %811, i32 1632, i32 2
  %813 = insertelement <4 x i32> %812, i32 163756, i32 3
  %814 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %813, i32 0)
  %815 = fcmp nsz olt float %808, %814
  %816 = sext i1 %815 to i32
  %817 = load float, float addrspace(5)* %658
  %818 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %819 = insertelement <4 x i32> undef, i32 %818, i32 0
  %820 = insertelement <4 x i32> %819, i32 0, i32 1
  %821 = insertelement <4 x i32> %820, i32 1632, i32 2
  %822 = insertelement <4 x i32> %821, i32 163756, i32 3
  %823 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %822, i32 0)
  %824 = fcmp nsz olt float %817, %823
  %825 = sext i1 %824 to i32
  %826 = bitcast i32 %816 to float
  store float %826, float addrspace(5)* %655
  %827 = bitcast i32 %825 to float
  store float %827, float addrspace(5)* %654
  %828 = load float, float addrspace(5)* %655
  %829 = bitcast float %828 to i32
  %830 = and i32 %829, 1065353216
  %831 = load float, float addrspace(5)* %654
  %832 = bitcast float %831 to i32
  %833 = and i32 %832, 1065353216
  %834 = bitcast i32 %830 to float
  store float %834, float addrspace(5)* %651
  %835 = bitcast i32 %833 to float
  store float %835, float addrspace(5)* %650
  %836 = load float, float addrspace(5)* %659
  %837 = call nsz float @llvm.fabs.f32(float %836) #4
  %838 = load float, float addrspace(5)* %658
  %839 = call nsz float @llvm.fabs.f32(float %838) #4
  store float %837, float addrspace(5)* %647
  store float %839, float addrspace(5)* %646
  %840 = load float, float addrspace(5)* %647
  %841 = load float, float addrspace(5)* %651
  %842 = fsub nsz float -0.000000e+00, %841
  %843 = fadd nsz float %840, %842
  %844 = load float, float addrspace(5)* %646
  %845 = load float, float addrspace(5)* %650
  %846 = fsub nsz float -0.000000e+00, %845
  %847 = fadd nsz float %844, %846
  store float %843, float addrspace(5)* %643
  store float %847, float addrspace(5)* %642
  %848 = load float, float addrspace(5)* %643
  %849 = fadd nsz float %848, -6.400000e+01
  %850 = load float, float addrspace(5)* %642
  %851 = fadd nsz float %850, -6.400000e+01
  store float %849, float addrspace(5)* %639
  store float %851, float addrspace(5)* %638
  %852 = load float, float addrspace(5)* %639
  %853 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %854 = insertelement <4 x i32> undef, i32 %853, i32 0
  %855 = insertelement <4 x i32> %854, i32 0, i32 1
  %856 = insertelement <4 x i32> %855, i32 1632, i32 2
  %857 = insertelement <4 x i32> %856, i32 163756, i32 3
  %858 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %857, i32 0)
  %859 = fcmp nsz olt float %852, %858
  %860 = sext i1 %859 to i32
  %861 = load float, float addrspace(5)* %638
  %862 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %863 = insertelement <4 x i32> undef, i32 %862, i32 0
  %864 = insertelement <4 x i32> %863, i32 0, i32 1
  %865 = insertelement <4 x i32> %864, i32 1632, i32 2
  %866 = insertelement <4 x i32> %865, i32 163756, i32 3
  %867 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %866, i32 0)
  %868 = fcmp nsz olt float %861, %867
  %869 = sext i1 %868 to i32
  %870 = bitcast i32 %860 to float
  store float %870, float addrspace(5)* %635
  %871 = bitcast i32 %869 to float
  store float %871, float addrspace(5)* %634
  %872 = load float, float addrspace(5)* %635
  %873 = bitcast float %872 to i32
  %874 = and i32 %873, 1065353216
  %875 = load float, float addrspace(5)* %634
  %876 = bitcast float %875 to i32
  %877 = and i32 %876, 1065353216
  %878 = bitcast i32 %874 to float
  store float %878, float addrspace(5)* %631
  %879 = bitcast i32 %877 to float
  store float %879, float addrspace(5)* %630
  %880 = load float, float addrspace(5)* %639
  %881 = call nsz float @llvm.fabs.f32(float %880) #4
  %882 = load float, float addrspace(5)* %638
  %883 = call nsz float @llvm.fabs.f32(float %882) #4
  store float %881, float addrspace(5)* %627
  store float %883, float addrspace(5)* %626
  %884 = load float, float addrspace(5)* %627
  %885 = load float, float addrspace(5)* %631
  %886 = fsub nsz float -0.000000e+00, %885
  %887 = fadd nsz float %884, %886
  %888 = load float, float addrspace(5)* %626
  %889 = load float, float addrspace(5)* %630
  %890 = fsub nsz float -0.000000e+00, %889
  %891 = fadd nsz float %888, %890
  store float %887, float addrspace(5)* %623
  store float %891, float addrspace(5)* %622
  %892 = load float, float addrspace(5)* %623
  %893 = fmul nsz float %892, 0x3F90410420000000
  %894 = load float, float addrspace(5)* %622
  %895 = fmul nsz float %894, 0x3F90410420000000
  store float %893, float addrspace(5)* %619
  store float %895, float addrspace(5)* %618
  %896 = load float, float addrspace(5)* %623
  %897 = fmul nsz float %896, 0xBF90410420000000
  %898 = fadd nsz float %897, 1.000000e+00
  store float %898, float addrspace(5)* %615
  %899 = load float, float addrspace(5)* %622
  %900 = load float, float addrspace(5)* %615
  %901 = fmul nsz float %899, 0xBF90410420000000
  %902 = fadd nsz float %901, %900
  store float %902, float addrspace(5)* %611
  %903 = load float, float addrspace(5)* %611
  store float %903, float addrspace(5)* %617
  %904 = load float, float addrspace(5)* %619
  %905 = load float, float addrspace(5)* %618
  %906 = load float, float addrspace(5)* %617
  %907 = load float, float addrspace(5)* %619
  %908 = load float, float addrspace(5)* %618
  %909 = load float, float addrspace(5)* %617
  %910 = fmul nsz float %904, %907
  %911 = fmul nsz float %905, %908
  %912 = fadd nsz float %911, %910
  %913 = fmul nsz float %906, %909
  %914 = fadd nsz float %912, %913
  store float %914, float addrspace(5)* %607
  %915 = load float, float addrspace(5)* %607
  %916 = call nsz float @llvm.sqrt.f32(float %915) #2
  %917 = fdiv nsz float 1.000000e+00, %916, !fpmath !1
  store float %917, float addrspace(5)* %603
  %918 = load float, float addrspace(5)* %619
  %919 = load float, float addrspace(5)* %603
  %920 = fmul nsz float %918, %919
  %921 = load float, float addrspace(5)* %618
  %922 = load float, float addrspace(5)* %603
  %923 = fmul nsz float %921, %922
  %924 = load float, float addrspace(5)* %617
  %925 = load float, float addrspace(5)* %603
  %926 = fmul nsz float %924, %925
  store float %920, float addrspace(5)* %599
  store float %923, float addrspace(5)* %598
  store float %926, float addrspace(5)* %597
  %927 = load float, float addrspace(5)* %631
  %928 = fmul nsz float %927, -2.000000e+00
  %929 = fadd nsz float %928, 1.000000e+00
  %930 = load float, float addrspace(5)* %630
  %931 = fmul nsz float %930, -2.000000e+00
  %932 = fadd nsz float %931, 1.000000e+00
  store float %929, float addrspace(5)* %595
  store float %932, float addrspace(5)* %594
  %933 = load float, float addrspace(5)* %594
  store float %933, float addrspace(5)* %668
  %934 = load float, float addrspace(5)* %595
  %935 = load float, float addrspace(5)* %599
  %936 = fmul nsz float %934, %935
  %937 = load float, float addrspace(5)* %594
  %938 = load float, float addrspace(5)* %598
  %939 = fmul nsz float %937, %938
  store float %936, float addrspace(5)* %619
  store float %939, float addrspace(5)* %618
  %940 = load float, float addrspace(5)* %651
  %941 = fmul nsz float %940, -2.000000e+00
  %942 = fadd nsz float %941, 1.000000e+00
  store float %942, float addrspace(5)* %591
  %943 = load float, float addrspace(5)* %591
  store float %943, float addrspace(5)* %669
  %944 = load float, float addrspace(5)* %591
  %945 = load float, float addrspace(5)* %597
  %946 = fmul nsz float %944, %945
  store float %946, float addrspace(5)* %587
  %947 = load float, float addrspace(5)* %587
  store float %947, float addrspace(5)* %617
  store float %714, float addrspace(5)* %648
  %948 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %949 = insertelement <4 x i32> undef, i32 %948, i32 0
  %950 = insertelement <4 x i32> %949, i32 0, i32 1
  %951 = insertelement <4 x i32> %950, i32 1632, i32 2
  %952 = insertelement <4 x i32> %951, i32 163756, i32 3
  %953 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %952, i32 208)
  %954 = fmul nsz float %770, %953
  %955 = fadd nsz float %954, %711
  %956 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %957 = insertelement <4 x i32> undef, i32 %956, i32 0
  %958 = insertelement <4 x i32> %957, i32 0, i32 1
  %959 = insertelement <4 x i32> %958, i32 1632, i32 2
  %960 = insertelement <4 x i32> %959, i32 163756, i32 3
  %961 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %960, i32 208)
  %962 = fmul nsz float %771, %961
  %963 = fadd nsz float %962, %712
  %964 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %965 = insertelement <4 x i32> undef, i32 %964, i32 0
  %966 = insertelement <4 x i32> %965, i32 0, i32 1
  %967 = insertelement <4 x i32> %966, i32 1632, i32 2
  %968 = insertelement <4 x i32> %967, i32 163756, i32 3
  %969 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %968, i32 208)
  %970 = fmul nsz float %772, %969
  %971 = fadd nsz float %970, %713
  store float %955, float addrspace(5)* %651
  store float %963, float addrspace(5)* %650
  store float %971, float addrspace(5)* %649
  %972 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %973 = insertelement <4 x i32> undef, i32 %972, i32 0
  %974 = insertelement <4 x i32> %973, i32 0, i32 1
  %975 = insertelement <4 x i32> %974, i32 1632, i32 2
  %976 = insertelement <4 x i32> %975, i32 163756, i32 3
  %977 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %976, i32 208)
  %978 = load float, float addrspace(5)* %619
  %979 = fmul nsz float %784, %977
  %980 = fadd nsz float %979, %978
  %981 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %982 = insertelement <4 x i32> undef, i32 %981, i32 0
  %983 = insertelement <4 x i32> %982, i32 0, i32 1
  %984 = insertelement <4 x i32> %983, i32 1632, i32 2
  %985 = insertelement <4 x i32> %984, i32 163756, i32 3
  %986 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %985, i32 208)
  %987 = load float, float addrspace(5)* %618
  %988 = fmul nsz float %785, %986
  %989 = fadd nsz float %988, %987
  %990 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %991 = insertelement <4 x i32> undef, i32 %990, i32 0
  %992 = insertelement <4 x i32> %991, i32 0, i32 1
  %993 = insertelement <4 x i32> %992, i32 1632, i32 2
  %994 = insertelement <4 x i32> %993, i32 163756, i32 3
  %995 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %994, i32 208)
  %996 = load float, float addrspace(5)* %617
  %997 = fmul nsz float %786, %995
  %998 = fadd nsz float %997, %996
  store float %980, float addrspace(5)* %619
  store float %989, float addrspace(5)* %618
  store float %998, float addrspace(5)* %617
  %999 = load float, float addrspace(5)* %651
  %1000 = load float, float addrspace(5)* %650
  %1001 = load float, float addrspace(5)* %649
  %1002 = load float, float addrspace(5)* %648
  %1003 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1004 = insertelement <4 x i32> undef, i32 %1003, i32 0
  %1005 = insertelement <4 x i32> %1004, i32 0, i32 1
  %1006 = insertelement <4 x i32> %1005, i32 1632, i32 2
  %1007 = insertelement <4 x i32> %1006, i32 163756, i32 3
  %1008 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1007, i32 1552)
  %1009 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1010 = insertelement <4 x i32> undef, i32 %1009, i32 0
  %1011 = insertelement <4 x i32> %1010, i32 0, i32 1
  %1012 = insertelement <4 x i32> %1011, i32 1632, i32 2
  %1013 = insertelement <4 x i32> %1012, i32 163756, i32 3
  %1014 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1013, i32 1556)
  %1015 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1016 = insertelement <4 x i32> undef, i32 %1015, i32 0
  %1017 = insertelement <4 x i32> %1016, i32 0, i32 1
  %1018 = insertelement <4 x i32> %1017, i32 1632, i32 2
  %1019 = insertelement <4 x i32> %1018, i32 163756, i32 3
  %1020 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1019, i32 1560)
  %1021 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1022 = insertelement <4 x i32> undef, i32 %1021, i32 0
  %1023 = insertelement <4 x i32> %1022, i32 0, i32 1
  %1024 = insertelement <4 x i32> %1023, i32 1632, i32 2
  %1025 = insertelement <4 x i32> %1024, i32 163756, i32 3
  %1026 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1025, i32 1564)
  %1027 = fmul nsz float %999, %1008
  %1028 = fmul nsz float %1000, %1014
  %1029 = fadd nsz float %1027, %1028
  %1030 = fmul nsz float %1001, %1020
  %1031 = fadd nsz float %1029, %1030
  %1032 = fmul nsz float %1002, %1026
  %1033 = fadd nsz float %1031, %1032
  store float %1033, float addrspace(5)* %599
  %1034 = load float, float addrspace(5)* %651
  %1035 = load float, float addrspace(5)* %650
  %1036 = load float, float addrspace(5)* %649
  %1037 = load float, float addrspace(5)* %648
  %1038 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1039 = insertelement <4 x i32> undef, i32 %1038, i32 0
  %1040 = insertelement <4 x i32> %1039, i32 0, i32 1
  %1041 = insertelement <4 x i32> %1040, i32 1632, i32 2
  %1042 = insertelement <4 x i32> %1041, i32 163756, i32 3
  %1043 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1042, i32 1568)
  %1044 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1045 = insertelement <4 x i32> undef, i32 %1044, i32 0
  %1046 = insertelement <4 x i32> %1045, i32 0, i32 1
  %1047 = insertelement <4 x i32> %1046, i32 1632, i32 2
  %1048 = insertelement <4 x i32> %1047, i32 163756, i32 3
  %1049 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1048, i32 1572)
  %1050 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1051 = insertelement <4 x i32> undef, i32 %1050, i32 0
  %1052 = insertelement <4 x i32> %1051, i32 0, i32 1
  %1053 = insertelement <4 x i32> %1052, i32 1632, i32 2
  %1054 = insertelement <4 x i32> %1053, i32 163756, i32 3
  %1055 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1054, i32 1576)
  %1056 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1057 = insertelement <4 x i32> undef, i32 %1056, i32 0
  %1058 = insertelement <4 x i32> %1057, i32 0, i32 1
  %1059 = insertelement <4 x i32> %1058, i32 1632, i32 2
  %1060 = insertelement <4 x i32> %1059, i32 163756, i32 3
  %1061 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1060, i32 1580)
  %1062 = fmul nsz float %1034, %1043
  %1063 = fmul nsz float %1035, %1049
  %1064 = fadd nsz float %1062, %1063
  %1065 = fmul nsz float %1036, %1055
  %1066 = fadd nsz float %1064, %1065
  %1067 = fmul nsz float %1037, %1061
  %1068 = fadd nsz float %1066, %1067
  store float %1068, float addrspace(5)* %583
  %1069 = load float, float addrspace(5)* %583
  store float %1069, float addrspace(5)* %598
  %1070 = load float, float addrspace(5)* %651
  %1071 = load float, float addrspace(5)* %650
  %1072 = load float, float addrspace(5)* %649
  %1073 = load float, float addrspace(5)* %648
  %1074 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1075 = insertelement <4 x i32> undef, i32 %1074, i32 0
  %1076 = insertelement <4 x i32> %1075, i32 0, i32 1
  %1077 = insertelement <4 x i32> %1076, i32 1632, i32 2
  %1078 = insertelement <4 x i32> %1077, i32 163756, i32 3
  %1079 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1078, i32 1584)
  %1080 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1081 = insertelement <4 x i32> undef, i32 %1080, i32 0
  %1082 = insertelement <4 x i32> %1081, i32 0, i32 1
  %1083 = insertelement <4 x i32> %1082, i32 1632, i32 2
  %1084 = insertelement <4 x i32> %1083, i32 163756, i32 3
  %1085 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1084, i32 1588)
  %1086 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1087 = insertelement <4 x i32> undef, i32 %1086, i32 0
  %1088 = insertelement <4 x i32> %1087, i32 0, i32 1
  %1089 = insertelement <4 x i32> %1088, i32 1632, i32 2
  %1090 = insertelement <4 x i32> %1089, i32 163756, i32 3
  %1091 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1090, i32 1592)
  %1092 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1093 = insertelement <4 x i32> undef, i32 %1092, i32 0
  %1094 = insertelement <4 x i32> %1093, i32 0, i32 1
  %1095 = insertelement <4 x i32> %1094, i32 1632, i32 2
  %1096 = insertelement <4 x i32> %1095, i32 163756, i32 3
  %1097 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1096, i32 1596)
  %1098 = fmul nsz float %1070, %1079
  %1099 = fmul nsz float %1071, %1085
  %1100 = fadd nsz float %1098, %1099
  %1101 = fmul nsz float %1072, %1091
  %1102 = fadd nsz float %1100, %1101
  %1103 = fmul nsz float %1073, %1097
  %1104 = fadd nsz float %1102, %1103
  store float %1104, float addrspace(5)* %579
  %1105 = load float, float addrspace(5)* %579
  store float %1105, float addrspace(5)* %597
  %1106 = load float, float addrspace(5)* %619
  %1107 = load float, float addrspace(5)* %618
  %1108 = load float, float addrspace(5)* %617
  %1109 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1110 = insertelement <4 x i32> undef, i32 %1109, i32 0
  %1111 = insertelement <4 x i32> %1110, i32 0, i32 1
  %1112 = insertelement <4 x i32> %1111, i32 1632, i32 2
  %1113 = insertelement <4 x i32> %1112, i32 163756, i32 3
  %1114 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1113, i32 1552)
  %1115 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1116 = insertelement <4 x i32> undef, i32 %1115, i32 0
  %1117 = insertelement <4 x i32> %1116, i32 0, i32 1
  %1118 = insertelement <4 x i32> %1117, i32 1632, i32 2
  %1119 = insertelement <4 x i32> %1118, i32 163756, i32 3
  %1120 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1119, i32 1556)
  %1121 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1122 = insertelement <4 x i32> undef, i32 %1121, i32 0
  %1123 = insertelement <4 x i32> %1122, i32 0, i32 1
  %1124 = insertelement <4 x i32> %1123, i32 1632, i32 2
  %1125 = insertelement <4 x i32> %1124, i32 163756, i32 3
  %1126 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1125, i32 1560)
  %1127 = fmul nsz float %1106, %1114
  %1128 = fmul nsz float %1107, %1120
  %1129 = fadd nsz float %1128, %1127
  %1130 = fmul nsz float %1108, %1126
  %1131 = fadd nsz float %1129, %1130
  store float %1131, float addrspace(5)* %651
  %1132 = load float, float addrspace(5)* %619
  %1133 = load float, float addrspace(5)* %618
  %1134 = load float, float addrspace(5)* %617
  %1135 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1136 = insertelement <4 x i32> undef, i32 %1135, i32 0
  %1137 = insertelement <4 x i32> %1136, i32 0, i32 1
  %1138 = insertelement <4 x i32> %1137, i32 1632, i32 2
  %1139 = insertelement <4 x i32> %1138, i32 163756, i32 3
  %1140 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1139, i32 1568)
  %1141 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1142 = insertelement <4 x i32> undef, i32 %1141, i32 0
  %1143 = insertelement <4 x i32> %1142, i32 0, i32 1
  %1144 = insertelement <4 x i32> %1143, i32 1632, i32 2
  %1145 = insertelement <4 x i32> %1144, i32 163756, i32 3
  %1146 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1145, i32 1572)
  %1147 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1148 = insertelement <4 x i32> undef, i32 %1147, i32 0
  %1149 = insertelement <4 x i32> %1148, i32 0, i32 1
  %1150 = insertelement <4 x i32> %1149, i32 1632, i32 2
  %1151 = insertelement <4 x i32> %1150, i32 163756, i32 3
  %1152 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1151, i32 1576)
  %1153 = fmul nsz float %1132, %1140
  %1154 = fmul nsz float %1133, %1146
  %1155 = fadd nsz float %1154, %1153
  %1156 = fmul nsz float %1134, %1152
  %1157 = fadd nsz float %1155, %1156
  store float %1157, float addrspace(5)* %575
  %1158 = load float, float addrspace(5)* %575
  store float %1158, float addrspace(5)* %650
  %1159 = load float, float addrspace(5)* %619
  %1160 = load float, float addrspace(5)* %618
  %1161 = load float, float addrspace(5)* %617
  %1162 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1163 = insertelement <4 x i32> undef, i32 %1162, i32 0
  %1164 = insertelement <4 x i32> %1163, i32 0, i32 1
  %1165 = insertelement <4 x i32> %1164, i32 1632, i32 2
  %1166 = insertelement <4 x i32> %1165, i32 163756, i32 3
  %1167 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1166, i32 1584)
  %1168 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1169 = insertelement <4 x i32> undef, i32 %1168, i32 0
  %1170 = insertelement <4 x i32> %1169, i32 0, i32 1
  %1171 = insertelement <4 x i32> %1170, i32 1632, i32 2
  %1172 = insertelement <4 x i32> %1171, i32 163756, i32 3
  %1173 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1172, i32 1588)
  %1174 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1175 = insertelement <4 x i32> undef, i32 %1174, i32 0
  %1176 = insertelement <4 x i32> %1175, i32 0, i32 1
  %1177 = insertelement <4 x i32> %1176, i32 1632, i32 2
  %1178 = insertelement <4 x i32> %1177, i32 163756, i32 3
  %1179 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1178, i32 1592)
  %1180 = fmul nsz float %1159, %1167
  %1181 = fmul nsz float %1160, %1173
  %1182 = fadd nsz float %1181, %1180
  %1183 = fmul nsz float %1161, %1179
  %1184 = fadd nsz float %1182, %1183
  store float %1184, float addrspace(5)* %571
  %1185 = load float, float addrspace(5)* %571
  store float %1185, float addrspace(5)* %649
  %1186 = load float, float addrspace(5)* %651
  %1187 = load float, float addrspace(5)* %650
  %1188 = load float, float addrspace(5)* %649
  %1189 = load float, float addrspace(5)* %651
  %1190 = load float, float addrspace(5)* %650
  %1191 = load float, float addrspace(5)* %649
  %1192 = fmul nsz float %1186, %1189
  %1193 = fmul nsz float %1187, %1190
  %1194 = fadd nsz float %1193, %1192
  %1195 = fmul nsz float %1188, %1191
  %1196 = fadd nsz float %1194, %1195
  store float %1196, float addrspace(5)* %567
  %1197 = load float, float addrspace(5)* %567
  %1198 = call nsz float @llvm.sqrt.f32(float %1197) #2
  %1199 = fdiv nsz float 1.000000e+00, %1198, !fpmath !1
  store float %1199, float addrspace(5)* %563
  %1200 = load float, float addrspace(5)* %651
  %1201 = load float, float addrspace(5)* %563
  %1202 = fmul nsz float %1200, %1201
  %1203 = load float, float addrspace(5)* %650
  %1204 = load float, float addrspace(5)* %563
  %1205 = fmul nsz float %1203, %1204
  %1206 = load float, float addrspace(5)* %649
  %1207 = load float, float addrspace(5)* %563
  %1208 = fmul nsz float %1206, %1207
  store float %1202, float addrspace(5)* %619
  store float %1205, float addrspace(5)* %618
  store float %1208, float addrspace(5)* %617
  %1209 = load float, float addrspace(5)* %671
  %1210 = fsub nsz float -0.000000e+00, %1209
  %1211 = load float, float addrspace(5)* %671
  %1212 = fcmp nsz olt float %1210, %1211
  %1213 = sext i1 %1212 to i32
  %1214 = bitcast i32 %1213 to float
  store float %1214, float addrspace(5)* %559
  %1215 = load float, float addrspace(5)* %559
  %1216 = bitcast float %1215 to i32
  %1217 = icmp ne i32 %1216, 0
  br i1 %1217, label %if48, label %else147

if48:                                             ; preds = %main_body
  %1218 = fadd nsz float %738, %738
  %1219 = fadd nsz float %739, %739
  %1220 = fadd nsz float %740, %740
  store float %1218, float addrspace(5)* %555
  store float %1219, float addrspace(5)* %554
  store float %1220, float addrspace(5)* %553
  %1221 = load float, float addrspace(5)* %554
  %1222 = load float, float addrspace(5)* %553
  store float %1221, float addrspace(5)* %669
  store float %1222, float addrspace(5)* %668
  %1223 = load float, float addrspace(5)* %555
  %1224 = call nsz float @llvm.log2.f32(float %1223) #2
  store float %1224, float addrspace(5)* %651
  %1225 = load float, float addrspace(5)* %554
  %1226 = call nsz float @llvm.log2.f32(float %1225) #2
  store float %1226, float addrspace(5)* %551
  %1227 = load float, float addrspace(5)* %551
  store float %1227, float addrspace(5)* %650
  %1228 = load float, float addrspace(5)* %553
  %1229 = call nsz float @llvm.log2.f32(float %1228) #2
  store float %1229, float addrspace(5)* %547
  %1230 = load float, float addrspace(5)* %547
  store float %1230, float addrspace(5)* %649
  %1231 = load float, float addrspace(5)* %651
  %1232 = fmul nsz float %1231, 0x40019999A0000000
  %1233 = load float, float addrspace(5)* %650
  %1234 = fmul nsz float %1233, 0x40019999A0000000
  %1235 = load float, float addrspace(5)* %649
  %1236 = fmul nsz float %1235, 0x40019999A0000000
  store float %1232, float addrspace(5)* %543
  store float %1234, float addrspace(5)* %542
  store float %1236, float addrspace(5)* %541
  %1237 = load float, float addrspace(5)* %542
  %1238 = load float, float addrspace(5)* %541
  store float %1237, float addrspace(5)* %669
  store float %1238, float addrspace(5)* %668
  %1239 = load float, float addrspace(5)* %543
  %1240 = call nsz float @llvm.exp2.f32(float %1239) #2
  store float %1240, float addrspace(5)* %671
  %1241 = load float, float addrspace(5)* %542
  %1242 = call nsz float @llvm.exp2.f32(float %1241) #2
  store float %1242, float addrspace(5)* %539
  %1243 = load float, float addrspace(5)* %539
  store float %1243, float addrspace(5)* %669
  %1244 = load float, float addrspace(5)* %541
  %1245 = call nsz float @llvm.exp2.f32(float %1244) #2
  store float %1245, float addrspace(5)* %535
  %1246 = load float, float addrspace(5)* %535
  store float %1246, float addrspace(5)* %668
  %1247 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1248 = insertelement <4 x i32> undef, i32 %1247, i32 0
  %1249 = insertelement <4 x i32> %1248, i32 0, i32 1
  %1250 = insertelement <4 x i32> %1249, i32 1632, i32 2
  %1251 = insertelement <4 x i32> %1250, i32 163756, i32 3
  %1252 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1251, i32 4)
  store float %1252, float addrspace(5)* %649
  %1253 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1254 = insertelement <4 x i32> undef, i32 %1253, i32 0
  %1255 = insertelement <4 x i32> %1254, i32 0, i32 1
  %1256 = insertelement <4 x i32> %1255, i32 1632, i32 2
  %1257 = insertelement <4 x i32> %1256, i32 163756, i32 3
  %1258 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1257, i32 4)
  store float %1258, float addrspace(5)* %531
  %1259 = load float, float addrspace(5)* %671
  %1260 = load float, float addrspace(5)* %669
  %1261 = load float, float addrspace(5)* %668
  store float %1259, float addrspace(5)* %527
  store float %1260, float addrspace(5)* %526
  store float %1261, float addrspace(5)* %525
  %1262 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1263 = insertelement <4 x i32> undef, i32 %1262, i32 0
  %1264 = insertelement <4 x i32> %1263, i32 0, i32 1
  %1265 = insertelement <4 x i32> %1264, i32 1632, i32 2
  %1266 = insertelement <4 x i32> %1265, i32 163756, i32 3
  %1267 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1266, i32 0)
  store float %1267, float addrspace(5)* %651
  store float 0.000000e+00, float addrspace(5)* %523
  br label %loop68

loop68:                                           ; preds = %endif72, %if48
  %1268 = load float, float addrspace(5)* %523
  %1269 = bitcast float %1268 to i32
  %1270 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1271 = insertelement <4 x i32> undef, i32 %1270, i32 0
  %1272 = insertelement <4 x i32> %1271, i32 0, i32 1
  %1273 = insertelement <4 x i32> %1272, i32 1632, i32 2
  %1274 = insertelement <4 x i32> %1273, i32 163756, i32 3
  %1275 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1274, i32 1616)
  %1276 = bitcast float %1275 to i32
  %1277 = icmp sge i32 %1269, %1276
  %1278 = sext i1 %1277 to i32
  %1279 = bitcast i32 %1278 to float
  store float %1279, float addrspace(5)* %519
  %1280 = load float, float addrspace(5)* %519
  %1281 = bitcast float %1280 to i32
  %1282 = icmp ne i32 %1281, 0
  br i1 %1282, label %if70, label %endif72

if70:                                             ; preds = %loop68
  br label %endloop129

endif72:                                          ; preds = %loop68
  %1283 = load float, float addrspace(5)* %651
  %1284 = fmul nsz float %1283, 5.000000e+00
  store float %1284, float addrspace(5)* %515
  %1285 = load float, float addrspace(5)* %515
  store float %1285, float addrspace(5)* %511
  %1286 = load float, float addrspace(5)* %515
  %1287 = fptosi float %1286 to i32
  %1288 = bitcast i32 %1287 to float
  store float %1288, float addrspace(5)* %507
  %1289 = load float, float addrspace(5)* %507
  %1290 = bitcast float %1289 to i32
  %1291 = add i32 %1290, 29
  %1292 = bitcast i32 %1291 to float
  store float %1292, float addrspace(5)* %503
  %1293 = load float, float addrspace(5)* %599
  %1294 = fsub nsz float -0.000000e+00, %1293
  %1295 = load float, float addrspace(5)* %503
  %1296 = bitcast float %1295 to i32
  %1297 = mul i32 %1296, 16
  %1298 = add i32 %1297, 0
  %1299 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1300 = insertelement <4 x i32> undef, i32 %1299, i32 0
  %1301 = insertelement <4 x i32> %1300, i32 0, i32 1
  %1302 = insertelement <4 x i32> %1301, i32 1632, i32 2
  %1303 = insertelement <4 x i32> %1302, i32 163756, i32 3
  %1304 = add i32 0, %1298
  %1305 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1303, i32 %1304)
  %1306 = fadd nsz float %1294, %1305
  %1307 = load float, float addrspace(5)* %598
  %1308 = fsub nsz float -0.000000e+00, %1307
  %1309 = load float, float addrspace(5)* %503
  %1310 = bitcast float %1309 to i32
  %1311 = mul i32 %1310, 16
  %1312 = add i32 %1311, 4
  %1313 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1314 = insertelement <4 x i32> undef, i32 %1313, i32 0
  %1315 = insertelement <4 x i32> %1314, i32 0, i32 1
  %1316 = insertelement <4 x i32> %1315, i32 1632, i32 2
  %1317 = insertelement <4 x i32> %1316, i32 163756, i32 3
  %1318 = add i32 0, %1312
  %1319 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1317, i32 %1318)
  %1320 = fadd nsz float %1308, %1319
  %1321 = load float, float addrspace(5)* %597
  %1322 = fsub nsz float -0.000000e+00, %1321
  %1323 = load float, float addrspace(5)* %503
  %1324 = bitcast float %1323 to i32
  %1325 = mul i32 %1324, 16
  %1326 = add i32 %1325, 8
  %1327 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1328 = insertelement <4 x i32> undef, i32 %1327, i32 0
  %1329 = insertelement <4 x i32> %1328, i32 0, i32 1
  %1330 = insertelement <4 x i32> %1329, i32 1632, i32 2
  %1331 = insertelement <4 x i32> %1330, i32 163756, i32 3
  %1332 = add i32 0, %1326
  %1333 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1331, i32 %1332)
  %1334 = fadd nsz float %1322, %1333
  store float %1306, float addrspace(5)* %499
  store float %1320, float addrspace(5)* %498
  store float %1334, float addrspace(5)* %497
  %1335 = load float, float addrspace(5)* %499
  %1336 = load float, float addrspace(5)* %498
  %1337 = load float, float addrspace(5)* %497
  %1338 = load float, float addrspace(5)* %499
  %1339 = load float, float addrspace(5)* %498
  %1340 = load float, float addrspace(5)* %497
  %1341 = fmul nsz float %1335, %1338
  %1342 = fmul nsz float %1336, %1339
  %1343 = fadd nsz float %1342, %1341
  %1344 = fmul nsz float %1337, %1340
  %1345 = fadd nsz float %1343, %1344
  store float %1345, float addrspace(5)* %495
  %1346 = load float, float addrspace(5)* %495
  %1347 = call nsz float @llvm.sqrt.f32(float %1346) #2
  %1348 = fdiv nsz float 1.000000e+00, %1347, !fpmath !1
  store float %1348, float addrspace(5)* %491
  %1349 = load float, float addrspace(5)* %491
  store float %1349, float addrspace(5)* %650
  %1350 = load float, float addrspace(5)* %491
  %1351 = load float, float addrspace(5)* %499
  %1352 = fmul nsz float %1350, %1351
  %1353 = load float, float addrspace(5)* %491
  %1354 = load float, float addrspace(5)* %498
  %1355 = fmul nsz float %1353, %1354
  %1356 = load float, float addrspace(5)* %491
  %1357 = load float, float addrspace(5)* %497
  %1358 = fmul nsz float %1356, %1357
  store float %1352, float addrspace(5)* %487
  store float %1355, float addrspace(5)* %486
  store float %1358, float addrspace(5)* %485
  %1359 = load float, float addrspace(5)* %515
  %1360 = fptosi float %1359 to i32
  %1361 = bitcast i32 %1360 to float
  store float %1361, float addrspace(5)* %483
  %1362 = load float, float addrspace(5)* %483
  %1363 = bitcast float %1362 to i32
  %1364 = add i32 %1363, 28
  %1365 = bitcast i32 %1364 to float
  store float %1365, float addrspace(5)* %479
  %1366 = load float, float addrspace(5)* %499
  %1367 = load float, float addrspace(5)* %491
  %1368 = fsub nsz float -0.000000e+00, %1367
  %1369 = load float, float addrspace(5)* %479
  %1370 = bitcast float %1369 to i32
  %1371 = mul i32 %1370, 16
  %1372 = add i32 %1371, 0
  %1373 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1374 = insertelement <4 x i32> undef, i32 %1373, i32 0
  %1375 = insertelement <4 x i32> %1374, i32 0, i32 1
  %1376 = insertelement <4 x i32> %1375, i32 1632, i32 2
  %1377 = insertelement <4 x i32> %1376, i32 163756, i32 3
  %1378 = add i32 0, %1372
  %1379 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1377, i32 %1378)
  %1380 = fsub nsz float -0.000000e+00, %1379
  %1381 = fmul nsz float %1366, %1368
  %1382 = fadd nsz float %1381, %1380
  %1383 = load float, float addrspace(5)* %498
  %1384 = load float, float addrspace(5)* %491
  %1385 = fsub nsz float -0.000000e+00, %1384
  %1386 = load float, float addrspace(5)* %479
  %1387 = bitcast float %1386 to i32
  %1388 = mul i32 %1387, 16
  %1389 = add i32 %1388, 4
  %1390 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1391 = insertelement <4 x i32> undef, i32 %1390, i32 0
  %1392 = insertelement <4 x i32> %1391, i32 0, i32 1
  %1393 = insertelement <4 x i32> %1392, i32 1632, i32 2
  %1394 = insertelement <4 x i32> %1393, i32 163756, i32 3
  %1395 = add i32 0, %1389
  %1396 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1394, i32 %1395)
  %1397 = fsub nsz float -0.000000e+00, %1396
  %1398 = fmul nsz float %1383, %1385
  %1399 = fadd nsz float %1398, %1397
  %1400 = load float, float addrspace(5)* %497
  %1401 = load float, float addrspace(5)* %491
  %1402 = fsub nsz float -0.000000e+00, %1401
  %1403 = load float, float addrspace(5)* %479
  %1404 = bitcast float %1403 to i32
  %1405 = mul i32 %1404, 16
  %1406 = add i32 %1405, 8
  %1407 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1408 = insertelement <4 x i32> undef, i32 %1407, i32 0
  %1409 = insertelement <4 x i32> %1408, i32 0, i32 1
  %1410 = insertelement <4 x i32> %1409, i32 1632, i32 2
  %1411 = insertelement <4 x i32> %1410, i32 163756, i32 3
  %1412 = add i32 0, %1406
  %1413 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1411, i32 %1412)
  %1414 = fsub nsz float -0.000000e+00, %1413
  %1415 = fmul nsz float %1400, %1402
  %1416 = fadd nsz float %1415, %1414
  store float %1382, float addrspace(5)* %499
  store float %1399, float addrspace(5)* %498
  store float %1416, float addrspace(5)* %497
  %1417 = load float, float addrspace(5)* %515
  %1418 = fptosi float %1417 to i32
  %1419 = bitcast i32 %1418 to float
  store float %1419, float addrspace(5)* %475
  %1420 = load float, float addrspace(5)* %475
  %1421 = bitcast float %1420 to i32
  %1422 = add i32 %1421, 27
  %1423 = bitcast i32 %1422 to float
  store float %1423, float addrspace(5)* %471
  %1424 = load float, float addrspace(5)* %471
  %1425 = bitcast float %1424 to i32
  %1426 = mul i32 %1425, 16
  %1427 = add i32 %1426, 12
  %1428 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1429 = insertelement <4 x i32> undef, i32 %1428, i32 0
  %1430 = insertelement <4 x i32> %1429, i32 0, i32 1
  %1431 = insertelement <4 x i32> %1430, i32 1632, i32 2
  %1432 = insertelement <4 x i32> %1431, i32 163756, i32 3
  %1433 = add i32 0, %1427
  %1434 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1432, i32 %1433)
  %1435 = load float, float addrspace(5)* %499
  %1436 = load float, float addrspace(5)* %487
  %1437 = fmul nsz float %1434, %1435
  %1438 = fadd nsz float %1437, %1436
  %1439 = load float, float addrspace(5)* %471
  %1440 = bitcast float %1439 to i32
  %1441 = mul i32 %1440, 16
  %1442 = add i32 %1441, 12
  %1443 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1444 = insertelement <4 x i32> undef, i32 %1443, i32 0
  %1445 = insertelement <4 x i32> %1444, i32 0, i32 1
  %1446 = insertelement <4 x i32> %1445, i32 1632, i32 2
  %1447 = insertelement <4 x i32> %1446, i32 163756, i32 3
  %1448 = add i32 0, %1442
  %1449 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1447, i32 %1448)
  %1450 = load float, float addrspace(5)* %498
  %1451 = load float, float addrspace(5)* %486
  %1452 = fmul nsz float %1449, %1450
  %1453 = fadd nsz float %1452, %1451
  %1454 = load float, float addrspace(5)* %471
  %1455 = bitcast float %1454 to i32
  %1456 = mul i32 %1455, 16
  %1457 = add i32 %1456, 12
  %1458 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1459 = insertelement <4 x i32> undef, i32 %1458, i32 0
  %1460 = insertelement <4 x i32> %1459, i32 0, i32 1
  %1461 = insertelement <4 x i32> %1460, i32 1632, i32 2
  %1462 = insertelement <4 x i32> %1461, i32 163756, i32 3
  %1463 = add i32 0, %1457
  %1464 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1462, i32 %1463)
  %1465 = load float, float addrspace(5)* %497
  %1466 = load float, float addrspace(5)* %485
  %1467 = fmul nsz float %1464, %1465
  %1468 = fadd nsz float %1467, %1466
  store float %1438, float addrspace(5)* %499
  store float %1453, float addrspace(5)* %498
  store float %1468, float addrspace(5)* %497
  %1469 = load float, float addrspace(5)* %619
  %1470 = load float, float addrspace(5)* %618
  %1471 = load float, float addrspace(5)* %617
  %1472 = load float, float addrspace(5)* %499
  %1473 = load float, float addrspace(5)* %498
  %1474 = load float, float addrspace(5)* %497
  %1475 = fmul nsz float %1469, %1472
  %1476 = fmul nsz float %1470, %1473
  %1477 = fadd nsz float %1476, %1475
  %1478 = fmul nsz float %1471, %1474
  %1479 = fadd nsz float %1477, %1478
  store float %1479, float addrspace(5)* %467
  %1480 = load float, float addrspace(5)* %467
  %1481 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1482 = insertelement <4 x i32> undef, i32 %1481, i32 0
  %1483 = insertelement <4 x i32> %1482, i32 0, i32 1
  %1484 = insertelement <4 x i32> %1483, i32 1632, i32 2
  %1485 = insertelement <4 x i32> %1484, i32 163756, i32 3
  %1486 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1485, i32 0)
  %1487 = call nsz float @llvm.maxnum.f32(float %1480, float %1486) #2
  store float %1487, float addrspace(5)* %463
  %1488 = load float, float addrspace(5)* %463
  %1489 = load float, float addrspace(5)* %463
  %1490 = load float, float addrspace(5)* %463
  %1491 = fmul nsz float %1488, %1489
  %1492 = fadd nsz float %1491, %1490
  store float %1492, float addrspace(5)* %459
  %1493 = load float, float addrspace(5)* %459
  %1494 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1495 = insertelement <4 x i32> undef, i32 %1494, i32 0
  %1496 = insertelement <4 x i32> %1495, i32 0, i32 1
  %1497 = insertelement <4 x i32> %1496, i32 1632, i32 2
  %1498 = insertelement <4 x i32> %1497, i32 163756, i32 3
  %1499 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1498, i32 12)
  %1500 = fmul nsz float %1493, %1499
  store float %1500, float addrspace(5)* %455
  %1501 = load float, float addrspace(5)* %515
  %1502 = fptosi float %1501 to i32
  %1503 = bitcast i32 %1502 to float
  store float %1503, float addrspace(5)* %451
  %1504 = load float, float addrspace(5)* %451
  %1505 = bitcast float %1504 to i32
  %1506 = add i32 %1505, 27
  %1507 = bitcast i32 %1506 to float
  store float %1507, float addrspace(5)* %447
  %1508 = load float, float addrspace(5)* %455
  %1509 = load float, float addrspace(5)* %447
  %1510 = bitcast float %1509 to i32
  %1511 = mul i32 %1510, 16
  %1512 = add i32 %1511, 0
  %1513 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1514 = insertelement <4 x i32> undef, i32 %1513, i32 0
  %1515 = insertelement <4 x i32> %1514, i32 0, i32 1
  %1516 = insertelement <4 x i32> %1515, i32 1632, i32 2
  %1517 = insertelement <4 x i32> %1516, i32 163756, i32 3
  %1518 = add i32 0, %1512
  %1519 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1517, i32 %1518)
  %1520 = fmul nsz float %1508, %1519
  %1521 = load float, float addrspace(5)* %455
  %1522 = load float, float addrspace(5)* %447
  %1523 = bitcast float %1522 to i32
  %1524 = mul i32 %1523, 16
  %1525 = add i32 %1524, 4
  %1526 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1527 = insertelement <4 x i32> undef, i32 %1526, i32 0
  %1528 = insertelement <4 x i32> %1527, i32 0, i32 1
  %1529 = insertelement <4 x i32> %1528, i32 1632, i32 2
  %1530 = insertelement <4 x i32> %1529, i32 163756, i32 3
  %1531 = add i32 0, %1525
  %1532 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1530, i32 %1531)
  %1533 = fmul nsz float %1521, %1532
  %1534 = load float, float addrspace(5)* %455
  %1535 = load float, float addrspace(5)* %447
  %1536 = bitcast float %1535 to i32
  %1537 = mul i32 %1536, 16
  %1538 = add i32 %1537, 8
  %1539 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1540 = insertelement <4 x i32> undef, i32 %1539, i32 0
  %1541 = insertelement <4 x i32> %1540, i32 0, i32 1
  %1542 = insertelement <4 x i32> %1541, i32 1632, i32 2
  %1543 = insertelement <4 x i32> %1542, i32 163756, i32 3
  %1544 = add i32 0, %1538
  %1545 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1543, i32 %1544)
  %1546 = fmul nsz float %1534, %1545
  store float %1520, float addrspace(5)* %499
  store float %1533, float addrspace(5)* %498
  store float %1546, float addrspace(5)* %497
  %1547 = load float, float addrspace(5)* %650
  %1548 = load float, float addrspace(5)* %495
  %1549 = fmul nsz float %1547, %1548
  %1550 = load float, float addrspace(5)* %649
  %1551 = load float, float addrspace(5)* %495
  %1552 = fmul nsz float %1550, %1551
  store float %1549, float addrspace(5)* %443
  store float %1552, float addrspace(5)* %442
  %1553 = load float, float addrspace(5)* %443
  %1554 = load float, float addrspace(5)* %442
  store float %1553, float addrspace(5)* %530
  store float %1554, float addrspace(5)* %529
  %1555 = load float, float addrspace(5)* %515
  %1556 = fptosi float %1555 to i32
  %1557 = bitcast i32 %1556 to float
  store float %1557, float addrspace(5)* %439
  %1558 = load float, float addrspace(5)* %439
  %1559 = bitcast float %1558 to i32
  %1560 = add i32 %1559, 31
  %1561 = bitcast i32 %1560 to float
  store float %1561, float addrspace(5)* %435
  %1562 = load float, float addrspace(5)* %435
  %1563 = bitcast float %1562 to i32
  %1564 = mul i32 %1563, 16
  %1565 = add i32 %1564, 0
  %1566 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1567 = insertelement <4 x i32> undef, i32 %1566, i32 0
  %1568 = insertelement <4 x i32> %1567, i32 0, i32 1
  %1569 = insertelement <4 x i32> %1568, i32 1632, i32 2
  %1570 = insertelement <4 x i32> %1569, i32 163756, i32 3
  %1571 = add i32 0, %1565
  %1572 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1570, i32 %1571)
  %1573 = load float, float addrspace(5)* %435
  %1574 = bitcast float %1573 to i32
  %1575 = mul i32 %1574, 16
  %1576 = add i32 %1575, 4
  %1577 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1578 = insertelement <4 x i32> undef, i32 %1577, i32 0
  %1579 = insertelement <4 x i32> %1578, i32 0, i32 1
  %1580 = insertelement <4 x i32> %1579, i32 1632, i32 2
  %1581 = insertelement <4 x i32> %1580, i32 163756, i32 3
  %1582 = add i32 0, %1576
  %1583 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1581, i32 %1582)
  %1584 = load float, float addrspace(5)* %435
  %1585 = bitcast float %1584 to i32
  %1586 = mul i32 %1585, 16
  %1587 = add i32 %1586, 8
  %1588 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1589 = insertelement <4 x i32> undef, i32 %1588, i32 0
  %1590 = insertelement <4 x i32> %1589, i32 0, i32 1
  %1591 = insertelement <4 x i32> %1590, i32 1632, i32 2
  %1592 = insertelement <4 x i32> %1591, i32 163756, i32 3
  %1593 = add i32 0, %1587
  %1594 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1592, i32 %1593)
  %1595 = load float, float addrspace(5)* %531
  %1596 = load float, float addrspace(5)* %530
  %1597 = load float, float addrspace(5)* %529
  %1598 = fmul nsz float %1572, %1595
  %1599 = fmul nsz float %1583, %1596
  %1600 = fadd nsz float %1599, %1598
  %1601 = fmul nsz float %1594, %1597
  %1602 = fadd nsz float %1600, %1601
  store float %1602, float addrspace(5)* %431
  %1603 = load float, float addrspace(5)* %431
  %1604 = fdiv nsz float 1.000000e+00, %1603, !fpmath !1
  store float %1604, float addrspace(5)* %427
  %1605 = load float, float addrspace(5)* %515
  %1606 = fptosi float %1605 to i32
  %1607 = bitcast i32 %1606 to float
  store float %1607, float addrspace(5)* %423
  %1608 = load float, float addrspace(5)* %423
  %1609 = bitcast float %1608 to i32
  %1610 = add i32 %1609, 28
  %1611 = bitcast i32 %1610 to float
  store float %1611, float addrspace(5)* %419
  %1612 = load float, float addrspace(5)* %419
  %1613 = bitcast float %1612 to i32
  %1614 = mul i32 %1613, 16
  %1615 = add i32 %1614, 0
  %1616 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1617 = insertelement <4 x i32> undef, i32 %1616, i32 0
  %1618 = insertelement <4 x i32> %1617, i32 0, i32 1
  %1619 = insertelement <4 x i32> %1618, i32 1632, i32 2
  %1620 = insertelement <4 x i32> %1619, i32 163756, i32 3
  %1621 = add i32 0, %1615
  %1622 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1620, i32 %1621)
  %1623 = load float, float addrspace(5)* %419
  %1624 = bitcast float %1623 to i32
  %1625 = mul i32 %1624, 16
  %1626 = add i32 %1625, 4
  %1627 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1628 = insertelement <4 x i32> undef, i32 %1627, i32 0
  %1629 = insertelement <4 x i32> %1628, i32 0, i32 1
  %1630 = insertelement <4 x i32> %1629, i32 1632, i32 2
  %1631 = insertelement <4 x i32> %1630, i32 163756, i32 3
  %1632 = add i32 0, %1626
  %1633 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1631, i32 %1632)
  %1634 = load float, float addrspace(5)* %419
  %1635 = bitcast float %1634 to i32
  %1636 = mul i32 %1635, 16
  %1637 = add i32 %1636, 8
  %1638 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1639 = insertelement <4 x i32> undef, i32 %1638, i32 0
  %1640 = insertelement <4 x i32> %1639, i32 0, i32 1
  %1641 = insertelement <4 x i32> %1640, i32 1632, i32 2
  %1642 = insertelement <4 x i32> %1641, i32 163756, i32 3
  %1643 = add i32 0, %1637
  %1644 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1642, i32 %1643)
  %1645 = load float, float addrspace(5)* %487
  %1646 = fsub nsz float -0.000000e+00, %1645
  %1647 = load float, float addrspace(5)* %486
  %1648 = fsub nsz float -0.000000e+00, %1647
  %1649 = load float, float addrspace(5)* %485
  %1650 = fsub nsz float -0.000000e+00, %1649
  %1651 = fmul nsz float %1622, %1646
  %1652 = fmul nsz float %1633, %1648
  %1653 = fadd nsz float %1652, %1651
  %1654 = fmul nsz float %1644, %1650
  %1655 = fadd nsz float %1653, %1654
  store float %1655, float addrspace(5)* %415
  %1656 = load float, float addrspace(5)* %515
  %1657 = fptosi float %1656 to i32
  %1658 = bitcast i32 %1657 to float
  store float %1658, float addrspace(5)* %411
  %1659 = load float, float addrspace(5)* %411
  %1660 = bitcast float %1659 to i32
  %1661 = add i32 %1660, 30
  %1662 = bitcast i32 %1661 to float
  store float %1662, float addrspace(5)* %407
  %1663 = load float, float addrspace(5)* %415
  %1664 = load float, float addrspace(5)* %407
  %1665 = bitcast float %1664 to i32
  %1666 = mul i32 %1665, 16
  %1667 = add i32 %1666, 8
  %1668 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1669 = insertelement <4 x i32> undef, i32 %1668, i32 0
  %1670 = insertelement <4 x i32> %1669, i32 0, i32 1
  %1671 = insertelement <4 x i32> %1670, i32 1632, i32 2
  %1672 = insertelement <4 x i32> %1671, i32 163756, i32 3
  %1673 = add i32 0, %1667
  %1674 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1672, i32 %1673)
  %1675 = fsub nsz float -0.000000e+00, %1674
  %1676 = fadd nsz float %1663, %1675
  store float %1676, float addrspace(5)* %403
  %1677 = load float, float addrspace(5)* %515
  %1678 = fptosi float %1677 to i32
  %1679 = bitcast i32 %1678 to float
  store float %1679, float addrspace(5)* %399
  %1680 = load float, float addrspace(5)* %399
  %1681 = bitcast float %1680 to i32
  %1682 = add i32 %1681, 30
  %1683 = bitcast i32 %1682 to float
  store float %1683, float addrspace(5)* %395
  %1684 = load float, float addrspace(5)* %403
  %1685 = load float, float addrspace(5)* %395
  %1686 = bitcast float %1685 to i32
  %1687 = mul i32 %1686, 16
  %1688 = add i32 %1687, 12
  %1689 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1690 = insertelement <4 x i32> undef, i32 %1689, i32 0
  %1691 = insertelement <4 x i32> %1690, i32 0, i32 1
  %1692 = insertelement <4 x i32> %1691, i32 1632, i32 2
  %1693 = insertelement <4 x i32> %1692, i32 163756, i32 3
  %1694 = add i32 0, %1688
  %1695 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1693, i32 %1694)
  %1696 = fmul nsz float %1684, %1695
  store float %1696, float addrspace(5)* %391
  %1697 = load float, float addrspace(5)* %391
  %1698 = call nsz float @llvm.maxnum.f32(float %1697, float 0x3F1A36E2E0000000) #2
  store float %1698, float addrspace(5)* %387
  %1699 = load float, float addrspace(5)* %515
  %1700 = fptosi float %1699 to i32
  %1701 = bitcast i32 %1700 to float
  store float %1701, float addrspace(5)* %383
  %1702 = load float, float addrspace(5)* %383
  %1703 = bitcast float %1702 to i32
  %1704 = add i32 %1703, 30
  %1705 = bitcast i32 %1704 to float
  store float %1705, float addrspace(5)* %379
  %1706 = load float, float addrspace(5)* %387
  %1707 = load float, float addrspace(5)* %379
  %1708 = bitcast float %1707 to i32
  %1709 = mul i32 %1708, 16
  %1710 = add i32 %1709, 0
  %1711 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1712 = insertelement <4 x i32> undef, i32 %1711, i32 0
  %1713 = insertelement <4 x i32> %1712, i32 0, i32 1
  %1714 = insertelement <4 x i32> %1713, i32 1632, i32 2
  %1715 = insertelement <4 x i32> %1714, i32 163756, i32 3
  %1716 = add i32 0, %1710
  %1717 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1715, i32 %1716)
  %1718 = call nsz float @llvm.pow.f32(float %1706, float %1717) #2
  store float %1718, float addrspace(5)* %375
  %1719 = load float, float addrspace(5)* %375
  store float %1719, float addrspace(5)* %616
  %1720 = load float, float addrspace(5)* %375
  %1721 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1722 = insertelement <4 x i32> undef, i32 %1721, i32 0
  %1723 = insertelement <4 x i32> %1722, i32 0, i32 1
  %1724 = insertelement <4 x i32> %1723, i32 1632, i32 2
  %1725 = insertelement <4 x i32> %1724, i32 163756, i32 3
  %1726 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1725, i32 4)
  %1727 = call nsz float @llvm.minnum.f32(float %1720, float %1726) #2
  store float %1727, float addrspace(5)* %371
  %1728 = load float, float addrspace(5)* %427
  %1729 = load float, float addrspace(5)* %371
  %1730 = load float, float addrspace(5)* %427
  %1731 = fsub nsz float -0.000000e+00, %1730
  %1732 = fmul nsz float %1728, %1729
  %1733 = fadd nsz float %1732, %1731
  store float %1733, float addrspace(5)* %367
  %1734 = load float, float addrspace(5)* %515
  %1735 = fptosi float %1734 to i32
  %1736 = bitcast i32 %1735 to float
  store float %1736, float addrspace(5)* %363
  %1737 = load float, float addrspace(5)* %363
  %1738 = bitcast float %1737 to i32
  %1739 = add i32 %1738, 28
  %1740 = bitcast i32 %1739 to float
  store float %1740, float addrspace(5)* %359
  %1741 = load float, float addrspace(5)* %359
  %1742 = bitcast float %1741 to i32
  %1743 = mul i32 %1742, 16
  %1744 = add i32 %1743, 12
  %1745 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1746 = insertelement <4 x i32> undef, i32 %1745, i32 0
  %1747 = insertelement <4 x i32> %1746, i32 0, i32 1
  %1748 = insertelement <4 x i32> %1747, i32 1632, i32 2
  %1749 = insertelement <4 x i32> %1748, i32 163756, i32 3
  %1750 = add i32 0, %1744
  %1751 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1749, i32 %1750)
  %1752 = load float, float addrspace(5)* %367
  %1753 = load float, float addrspace(5)* %427
  %1754 = fmul nsz float %1751, %1752
  %1755 = fadd nsz float %1754, %1753
  store float %1755, float addrspace(5)* %355
  %1756 = load float, float addrspace(5)* %355
  %1757 = fsub nsz float -0.000000e+00, %1756
  %1758 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1759 = insertelement <4 x i32> undef, i32 %1758, i32 0
  %1760 = insertelement <4 x i32> %1759, i32 0, i32 1
  %1761 = insertelement <4 x i32> %1760, i32 1632, i32 2
  %1762 = insertelement <4 x i32> %1761, i32 163756, i32 3
  %1763 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1762, i32 4)
  %1764 = fadd nsz float %1757, %1763
  store float %1764, float addrspace(5)* %351
  %1765 = load float, float addrspace(5)* %351
  store float %1765, float addrspace(5)* %648
  %1766 = load float, float addrspace(5)* %515
  %1767 = fptosi float %1766 to i32
  %1768 = bitcast i32 %1767 to float
  store float %1768, float addrspace(5)* %347
  %1769 = load float, float addrspace(5)* %347
  %1770 = bitcast float %1769 to i32
  %1771 = add i32 %1770, 27
  %1772 = bitcast i32 %1771 to float
  store float %1772, float addrspace(5)* %343
  %1773 = load float, float addrspace(5)* %343
  %1774 = bitcast float %1773 to i32
  %1775 = mul i32 %1774, 16
  %1776 = add i32 %1775, 12
  %1777 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1778 = insertelement <4 x i32> undef, i32 %1777, i32 0
  %1779 = insertelement <4 x i32> %1778, i32 0, i32 1
  %1780 = insertelement <4 x i32> %1779, i32 1632, i32 2
  %1781 = insertelement <4 x i32> %1780, i32 163756, i32 3
  %1782 = add i32 0, %1776
  %1783 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1781, i32 %1782)
  %1784 = load float, float addrspace(5)* %351
  %1785 = load float, float addrspace(5)* %355
  %1786 = fmul nsz float %1783, %1784
  %1787 = fadd nsz float %1786, %1785
  store float %1787, float addrspace(5)* %339
  %1788 = load float, float addrspace(5)* %339
  store float %1788, float addrspace(5)* %650
  %1789 = load float, float addrspace(5)* %499
  %1790 = load float, float addrspace(5)* %339
  %1791 = load float, float addrspace(5)* %527
  %1792 = fmul nsz float %1789, %1790
  %1793 = fadd nsz float %1792, %1791
  %1794 = load float, float addrspace(5)* %498
  %1795 = load float, float addrspace(5)* %339
  %1796 = load float, float addrspace(5)* %526
  %1797 = fmul nsz float %1794, %1795
  %1798 = fadd nsz float %1797, %1796
  %1799 = load float, float addrspace(5)* %497
  %1800 = load float, float addrspace(5)* %339
  %1801 = load float, float addrspace(5)* %525
  %1802 = fmul nsz float %1799, %1800
  %1803 = fadd nsz float %1802, %1801
  store float %1793, float addrspace(5)* %527
  store float %1798, float addrspace(5)* %526
  store float %1803, float addrspace(5)* %525
  %1804 = load float, float addrspace(5)* %651
  %1805 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1806 = insertelement <4 x i32> undef, i32 %1805, i32 0
  %1807 = insertelement <4 x i32> %1806, i32 0, i32 1
  %1808 = insertelement <4 x i32> %1807, i32 1632, i32 2
  %1809 = insertelement <4 x i32> %1808, i32 163756, i32 3
  %1810 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1809, i32 4)
  %1811 = fadd nsz float %1804, %1810
  store float %1811, float addrspace(5)* %651
  %1812 = load float, float addrspace(5)* %523
  %1813 = bitcast float %1812 to i32
  %1814 = add i32 %1813, 1
  %1815 = bitcast i32 %1814 to float
  store float %1815, float addrspace(5)* %523
  br label %loop68

endloop129:                                       ; preds = %if70
  %1816 = load float, float addrspace(5)* %619
  %1817 = load float, float addrspace(5)* %619
  %1818 = fmul nsz float %1816, %1817
  %1819 = load float, float addrspace(5)* %618
  %1820 = load float, float addrspace(5)* %618
  %1821 = fmul nsz float %1819, %1820
  %1822 = load float, float addrspace(5)* %617
  %1823 = load float, float addrspace(5)* %617
  %1824 = fmul nsz float %1822, %1823
  store float %1818, float addrspace(5)* %335
  store float %1821, float addrspace(5)* %334
  store float %1824, float addrspace(5)* %333
  %1825 = load float, float addrspace(5)* %619
  %1826 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1827 = insertelement <4 x i32> undef, i32 %1826, i32 0
  %1828 = insertelement <4 x i32> %1827, i32 0, i32 1
  %1829 = insertelement <4 x i32> %1828, i32 1632, i32 2
  %1830 = insertelement <4 x i32> %1829, i32 163756, i32 3
  %1831 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1830, i32 0)
  %1832 = fcmp nsz olt float %1825, %1831
  %1833 = sext i1 %1832 to i32
  %1834 = load float, float addrspace(5)* %618
  %1835 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1836 = insertelement <4 x i32> undef, i32 %1835, i32 0
  %1837 = insertelement <4 x i32> %1836, i32 0, i32 1
  %1838 = insertelement <4 x i32> %1837, i32 1632, i32 2
  %1839 = insertelement <4 x i32> %1838, i32 163756, i32 3
  %1840 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1839, i32 0)
  %1841 = fcmp nsz olt float %1834, %1840
  %1842 = sext i1 %1841 to i32
  %1843 = load float, float addrspace(5)* %617
  %1844 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1845 = insertelement <4 x i32> undef, i32 %1844, i32 0
  %1846 = insertelement <4 x i32> %1845, i32 0, i32 1
  %1847 = insertelement <4 x i32> %1846, i32 1632, i32 2
  %1848 = insertelement <4 x i32> %1847, i32 163756, i32 3
  %1849 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1848, i32 0)
  %1850 = fcmp nsz olt float %1843, %1849
  %1851 = sext i1 %1850 to i32
  %1852 = bitcast i32 %1833 to float
  store float %1852, float addrspace(5)* %331
  %1853 = bitcast i32 %1842 to float
  store float %1853, float addrspace(5)* %330
  %1854 = bitcast i32 %1851 to float
  store float %1854, float addrspace(5)* %329
  %1855 = load float, float addrspace(5)* %331
  %1856 = bitcast float %1855 to i32
  %1857 = and i32 %1856, 1065353216
  %1858 = load float, float addrspace(5)* %330
  %1859 = bitcast float %1858 to i32
  %1860 = and i32 %1859, 1065353216
  %1861 = load float, float addrspace(5)* %329
  %1862 = bitcast float %1861 to i32
  %1863 = and i32 %1862, 1065353216
  %1864 = bitcast i32 %1857 to float
  store float %1864, float addrspace(5)* %651
  %1865 = bitcast i32 %1860 to float
  store float %1865, float addrspace(5)* %650
  %1866 = bitcast i32 %1863 to float
  store float %1866, float addrspace(5)* %649
  %1867 = load float, float addrspace(5)* %651
  %1868 = load float, float addrspace(5)* %650
  store float %1867, float addrspace(5)* %511
  store float %1868, float addrspace(5)* %510
  %1869 = load float, float addrspace(5)* %650
  %1870 = fptosi float %1869 to i32
  %1871 = bitcast i32 %1870 to float
  store float %1871, float addrspace(5)* %327
  %1872 = load float, float addrspace(5)* %327
  %1873 = bitcast float %1872 to i32
  %1874 = add i32 %1873, 23
  %1875 = bitcast i32 %1874 to float
  store float %1875, float addrspace(5)* %323
  %1876 = load float, float addrspace(5)* %334
  %1877 = load float, float addrspace(5)* %323
  %1878 = bitcast float %1877 to i32
  %1879 = mul i32 %1878, 16
  %1880 = add i32 %1879, 0
  %1881 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1882 = insertelement <4 x i32> undef, i32 %1881, i32 0
  %1883 = insertelement <4 x i32> %1882, i32 0, i32 1
  %1884 = insertelement <4 x i32> %1883, i32 1632, i32 2
  %1885 = insertelement <4 x i32> %1884, i32 163756, i32 3
  %1886 = add i32 0, %1880
  %1887 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1885, i32 %1886)
  %1888 = fmul nsz float %1876, %1887
  %1889 = load float, float addrspace(5)* %334
  %1890 = load float, float addrspace(5)* %323
  %1891 = bitcast float %1890 to i32
  %1892 = mul i32 %1891, 16
  %1893 = add i32 %1892, 4
  %1894 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1895 = insertelement <4 x i32> undef, i32 %1894, i32 0
  %1896 = insertelement <4 x i32> %1895, i32 0, i32 1
  %1897 = insertelement <4 x i32> %1896, i32 1632, i32 2
  %1898 = insertelement <4 x i32> %1897, i32 163756, i32 3
  %1899 = add i32 0, %1893
  %1900 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1898, i32 %1899)
  %1901 = fmul nsz float %1889, %1900
  %1902 = load float, float addrspace(5)* %334
  %1903 = load float, float addrspace(5)* %323
  %1904 = bitcast float %1903 to i32
  %1905 = mul i32 %1904, 16
  %1906 = add i32 %1905, 8
  %1907 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1908 = insertelement <4 x i32> undef, i32 %1907, i32 0
  %1909 = insertelement <4 x i32> %1908, i32 0, i32 1
  %1910 = insertelement <4 x i32> %1909, i32 1632, i32 2
  %1911 = insertelement <4 x i32> %1910, i32 163756, i32 3
  %1912 = add i32 0, %1906
  %1913 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1911, i32 %1912)
  %1914 = fmul nsz float %1902, %1913
  store float %1888, float addrspace(5)* %319
  store float %1901, float addrspace(5)* %318
  store float %1914, float addrspace(5)* %317
  %1915 = load float, float addrspace(5)* %511
  %1916 = fptosi float %1915 to i32
  %1917 = bitcast i32 %1916 to float
  store float %1917, float addrspace(5)* %315
  %1918 = load float, float addrspace(5)* %315
  %1919 = bitcast float %1918 to i32
  %1920 = add i32 %1919, 21
  %1921 = bitcast i32 %1920 to float
  store float %1921, float addrspace(5)* %311
  %1922 = load float, float addrspace(5)* %335
  %1923 = load float, float addrspace(5)* %311
  %1924 = bitcast float %1923 to i32
  %1925 = mul i32 %1924, 16
  %1926 = add i32 %1925, 0
  %1927 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1928 = insertelement <4 x i32> undef, i32 %1927, i32 0
  %1929 = insertelement <4 x i32> %1928, i32 0, i32 1
  %1930 = insertelement <4 x i32> %1929, i32 1632, i32 2
  %1931 = insertelement <4 x i32> %1930, i32 163756, i32 3
  %1932 = add i32 0, %1926
  %1933 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1931, i32 %1932)
  %1934 = load float, float addrspace(5)* %319
  %1935 = fmul nsz float %1922, %1933
  %1936 = fadd nsz float %1935, %1934
  %1937 = load float, float addrspace(5)* %335
  %1938 = load float, float addrspace(5)* %311
  %1939 = bitcast float %1938 to i32
  %1940 = mul i32 %1939, 16
  %1941 = add i32 %1940, 4
  %1942 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1943 = insertelement <4 x i32> undef, i32 %1942, i32 0
  %1944 = insertelement <4 x i32> %1943, i32 0, i32 1
  %1945 = insertelement <4 x i32> %1944, i32 1632, i32 2
  %1946 = insertelement <4 x i32> %1945, i32 163756, i32 3
  %1947 = add i32 0, %1941
  %1948 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1946, i32 %1947)
  %1949 = load float, float addrspace(5)* %318
  %1950 = fmul nsz float %1937, %1948
  %1951 = fadd nsz float %1950, %1949
  %1952 = load float, float addrspace(5)* %335
  %1953 = load float, float addrspace(5)* %311
  %1954 = bitcast float %1953 to i32
  %1955 = mul i32 %1954, 16
  %1956 = add i32 %1955, 8
  %1957 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1958 = insertelement <4 x i32> undef, i32 %1957, i32 0
  %1959 = insertelement <4 x i32> %1958, i32 0, i32 1
  %1960 = insertelement <4 x i32> %1959, i32 1632, i32 2
  %1961 = insertelement <4 x i32> %1960, i32 163756, i32 3
  %1962 = add i32 0, %1956
  %1963 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1961, i32 %1962)
  %1964 = load float, float addrspace(5)* %317
  %1965 = fmul nsz float %1952, %1963
  %1966 = fadd nsz float %1965, %1964
  store float %1936, float addrspace(5)* %307
  store float %1951, float addrspace(5)* %306
  store float %1966, float addrspace(5)* %305
  %1967 = load float, float addrspace(5)* %307
  %1968 = load float, float addrspace(5)* %306
  %1969 = load float, float addrspace(5)* %305
  store float %1967, float addrspace(5)* %651
  store float %1968, float addrspace(5)* %650
  store float %1969, float addrspace(5)* %648
  %1970 = load float, float addrspace(5)* %649
  store float %1970, float addrspace(5)* %511
  %1971 = load float, float addrspace(5)* %649
  %1972 = fptosi float %1971 to i32
  %1973 = bitcast i32 %1972 to float
  store float %1973, float addrspace(5)* %303
  %1974 = load float, float addrspace(5)* %303
  %1975 = bitcast float %1974 to i32
  %1976 = add i32 %1975, 25
  %1977 = bitcast i32 %1976 to float
  store float %1977, float addrspace(5)* %299
  %1978 = load float, float addrspace(5)* %333
  %1979 = load float, float addrspace(5)* %299
  %1980 = bitcast float %1979 to i32
  %1981 = mul i32 %1980, 16
  %1982 = add i32 %1981, 0
  %1983 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1984 = insertelement <4 x i32> undef, i32 %1983, i32 0
  %1985 = insertelement <4 x i32> %1984, i32 0, i32 1
  %1986 = insertelement <4 x i32> %1985, i32 1632, i32 2
  %1987 = insertelement <4 x i32> %1986, i32 163756, i32 3
  %1988 = add i32 0, %1982
  %1989 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %1987, i32 %1988)
  %1990 = load float, float addrspace(5)* %307
  %1991 = fmul nsz float %1978, %1989
  %1992 = fadd nsz float %1991, %1990
  %1993 = load float, float addrspace(5)* %333
  %1994 = load float, float addrspace(5)* %299
  %1995 = bitcast float %1994 to i32
  %1996 = mul i32 %1995, 16
  %1997 = add i32 %1996, 4
  %1998 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %1999 = insertelement <4 x i32> undef, i32 %1998, i32 0
  %2000 = insertelement <4 x i32> %1999, i32 0, i32 1
  %2001 = insertelement <4 x i32> %2000, i32 1632, i32 2
  %2002 = insertelement <4 x i32> %2001, i32 163756, i32 3
  %2003 = add i32 0, %1997
  %2004 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2002, i32 %2003)
  %2005 = load float, float addrspace(5)* %306
  %2006 = fmul nsz float %1993, %2004
  %2007 = fadd nsz float %2006, %2005
  %2008 = load float, float addrspace(5)* %333
  %2009 = load float, float addrspace(5)* %299
  %2010 = bitcast float %2009 to i32
  %2011 = mul i32 %2010, 16
  %2012 = add i32 %2011, 8
  %2013 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2014 = insertelement <4 x i32> undef, i32 %2013, i32 0
  %2015 = insertelement <4 x i32> %2014, i32 0, i32 1
  %2016 = insertelement <4 x i32> %2015, i32 1632, i32 2
  %2017 = insertelement <4 x i32> %2016, i32 163756, i32 3
  %2018 = add i32 0, %2012
  %2019 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2017, i32 %2018)
  %2020 = load float, float addrspace(5)* %305
  %2021 = fmul nsz float %2008, %2019
  %2022 = fadd nsz float %2021, %2020
  store float %1992, float addrspace(5)* %295
  store float %2007, float addrspace(5)* %294
  store float %2022, float addrspace(5)* %293
  %2023 = load float, float addrspace(5)* %295
  %2024 = load float, float addrspace(5)* %527
  %2025 = fadd nsz float %2023, %2024
  %2026 = load float, float addrspace(5)* %294
  %2027 = load float, float addrspace(5)* %526
  %2028 = fadd nsz float %2026, %2027
  %2029 = load float, float addrspace(5)* %293
  %2030 = load float, float addrspace(5)* %525
  %2031 = fadd nsz float %2029, %2030
  store float %2025, float addrspace(5)* %291
  store float %2028, float addrspace(5)* %290
  store float %2031, float addrspace(5)* %289
  %2032 = load float, float addrspace(5)* %291
  %2033 = load float, float addrspace(5)* %290
  %2034 = load float, float addrspace(5)* %289
  store float %2032, float addrspace(5)* %671
  store float %2033, float addrspace(5)* %669
  store float %2034, float addrspace(5)* %668
  br label %endif238

else147:                                          ; preds = %main_body
  %2035 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2036 = insertelement <4 x i32> undef, i32 %2035, i32 0
  %2037 = insertelement <4 x i32> %2036, i32 0, i32 1
  %2038 = insertelement <4 x i32> %2037, i32 1632, i32 2
  %2039 = insertelement <4 x i32> %2038, i32 163756, i32 3
  %2040 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2039, i32 4)
  store float %2040, float addrspace(5)* %649
  %2041 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2042 = insertelement <4 x i32> undef, i32 %2041, i32 0
  %2043 = insertelement <4 x i32> %2042, i32 0, i32 1
  %2044 = insertelement <4 x i32> %2043, i32 1632, i32 2
  %2045 = insertelement <4 x i32> %2044, i32 163756, i32 3
  %2046 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2045, i32 4)
  store float %2046, float addrspace(5)* %531
  %2047 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2048 = insertelement <4 x i32> undef, i32 %2047, i32 0
  %2049 = insertelement <4 x i32> %2048, i32 0, i32 1
  %2050 = insertelement <4 x i32> %2049, i32 1632, i32 2
  %2051 = insertelement <4 x i32> %2050, i32 163756, i32 3
  %2052 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2051, i32 0)
  %2053 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2054 = insertelement <4 x i32> undef, i32 %2053, i32 0
  %2055 = insertelement <4 x i32> %2054, i32 0, i32 1
  %2056 = insertelement <4 x i32> %2055, i32 1632, i32 2
  %2057 = insertelement <4 x i32> %2056, i32 163756, i32 3
  %2058 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2057, i32 0)
  %2059 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2060 = insertelement <4 x i32> undef, i32 %2059, i32 0
  %2061 = insertelement <4 x i32> %2060, i32 0, i32 1
  %2062 = insertelement <4 x i32> %2061, i32 1632, i32 2
  %2063 = insertelement <4 x i32> %2062, i32 163756, i32 3
  %2064 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2063, i32 0)
  store float %2052, float addrspace(5)* %527
  store float %2058, float addrspace(5)* %526
  store float %2064, float addrspace(5)* %525
  %2065 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2066 = insertelement <4 x i32> undef, i32 %2065, i32 0
  %2067 = insertelement <4 x i32> %2066, i32 0, i32 1
  %2068 = insertelement <4 x i32> %2067, i32 1632, i32 2
  %2069 = insertelement <4 x i32> %2068, i32 163756, i32 3
  %2070 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2069, i32 0)
  %2071 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2072 = insertelement <4 x i32> undef, i32 %2071, i32 0
  %2073 = insertelement <4 x i32> %2072, i32 0, i32 1
  %2074 = insertelement <4 x i32> %2073, i32 1632, i32 2
  %2075 = insertelement <4 x i32> %2074, i32 163756, i32 3
  %2076 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2075, i32 0)
  %2077 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2078 = insertelement <4 x i32> undef, i32 %2077, i32 0
  %2079 = insertelement <4 x i32> %2078, i32 0, i32 1
  %2080 = insertelement <4 x i32> %2079, i32 1632, i32 2
  %2081 = insertelement <4 x i32> %2080, i32 163756, i32 3
  %2082 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2081, i32 0)
  store float %2070, float addrspace(5)* %499
  store float %2076, float addrspace(5)* %498
  store float %2082, float addrspace(5)* %497
  %2083 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2084 = insertelement <4 x i32> undef, i32 %2083, i32 0
  %2085 = insertelement <4 x i32> %2084, i32 0, i32 1
  %2086 = insertelement <4 x i32> %2085, i32 1632, i32 2
  %2087 = insertelement <4 x i32> %2086, i32 163756, i32 3
  %2088 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2087, i32 0)
  store float %2088, float addrspace(5)* %651
  store float 0.000000e+00, float addrspace(5)* %287
  br label %loop154

loop154:                                          ; preds = %endif158, %else147
  %2089 = load float, float addrspace(5)* %287
  %2090 = bitcast float %2089 to i32
  %2091 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2092 = insertelement <4 x i32> undef, i32 %2091, i32 0
  %2093 = insertelement <4 x i32> %2092, i32 0, i32 1
  %2094 = insertelement <4 x i32> %2093, i32 1632, i32 2
  %2095 = insertelement <4 x i32> %2094, i32 163756, i32 3
  %2096 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2095, i32 1616)
  %2097 = bitcast float %2096 to i32
  %2098 = icmp sge i32 %2090, %2097
  %2099 = sext i1 %2098 to i32
  %2100 = bitcast i32 %2099 to float
  store float %2100, float addrspace(5)* %283
  %2101 = load float, float addrspace(5)* %283
  %2102 = bitcast float %2101 to i32
  %2103 = icmp ne i32 %2102, 0
  br i1 %2103, label %if156, label %endif158

if156:                                            ; preds = %loop154
  br label %endloop222

endif158:                                         ; preds = %loop154
  %2104 = load float, float addrspace(5)* %651
  %2105 = fmul nsz float %2104, 5.000000e+00
  store float %2105, float addrspace(5)* %279
  %2106 = load float, float addrspace(5)* %279
  store float %2106, float addrspace(5)* %511
  %2107 = load float, float addrspace(5)* %279
  %2108 = fptosi float %2107 to i32
  %2109 = bitcast i32 %2108 to float
  store float %2109, float addrspace(5)* %275
  %2110 = load float, float addrspace(5)* %275
  %2111 = bitcast float %2110 to i32
  %2112 = add i32 %2111, 29
  %2113 = bitcast i32 %2112 to float
  store float %2113, float addrspace(5)* %271
  %2114 = load float, float addrspace(5)* %599
  %2115 = fsub nsz float -0.000000e+00, %2114
  %2116 = load float, float addrspace(5)* %271
  %2117 = bitcast float %2116 to i32
  %2118 = mul i32 %2117, 16
  %2119 = add i32 %2118, 0
  %2120 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2121 = insertelement <4 x i32> undef, i32 %2120, i32 0
  %2122 = insertelement <4 x i32> %2121, i32 0, i32 1
  %2123 = insertelement <4 x i32> %2122, i32 1632, i32 2
  %2124 = insertelement <4 x i32> %2123, i32 163756, i32 3
  %2125 = add i32 0, %2119
  %2126 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2124, i32 %2125)
  %2127 = fadd nsz float %2115, %2126
  %2128 = load float, float addrspace(5)* %598
  %2129 = fsub nsz float -0.000000e+00, %2128
  %2130 = load float, float addrspace(5)* %271
  %2131 = bitcast float %2130 to i32
  %2132 = mul i32 %2131, 16
  %2133 = add i32 %2132, 4
  %2134 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2135 = insertelement <4 x i32> undef, i32 %2134, i32 0
  %2136 = insertelement <4 x i32> %2135, i32 0, i32 1
  %2137 = insertelement <4 x i32> %2136, i32 1632, i32 2
  %2138 = insertelement <4 x i32> %2137, i32 163756, i32 3
  %2139 = add i32 0, %2133
  %2140 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2138, i32 %2139)
  %2141 = fadd nsz float %2129, %2140
  %2142 = load float, float addrspace(5)* %597
  %2143 = fsub nsz float -0.000000e+00, %2142
  %2144 = load float, float addrspace(5)* %271
  %2145 = bitcast float %2144 to i32
  %2146 = mul i32 %2145, 16
  %2147 = add i32 %2146, 8
  %2148 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2149 = insertelement <4 x i32> undef, i32 %2148, i32 0
  %2150 = insertelement <4 x i32> %2149, i32 0, i32 1
  %2151 = insertelement <4 x i32> %2150, i32 1632, i32 2
  %2152 = insertelement <4 x i32> %2151, i32 163756, i32 3
  %2153 = add i32 0, %2147
  %2154 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2152, i32 %2153)
  %2155 = fadd nsz float %2143, %2154
  store float %2127, float addrspace(5)* %487
  store float %2141, float addrspace(5)* %486
  store float %2155, float addrspace(5)* %485
  %2156 = load float, float addrspace(5)* %487
  %2157 = load float, float addrspace(5)* %486
  %2158 = load float, float addrspace(5)* %485
  %2159 = load float, float addrspace(5)* %487
  %2160 = load float, float addrspace(5)* %486
  %2161 = load float, float addrspace(5)* %485
  %2162 = fmul nsz float %2156, %2159
  %2163 = fmul nsz float %2157, %2160
  %2164 = fadd nsz float %2163, %2162
  %2165 = fmul nsz float %2158, %2161
  %2166 = fadd nsz float %2164, %2165
  store float %2166, float addrspace(5)* %267
  %2167 = load float, float addrspace(5)* %267
  %2168 = call nsz float @llvm.sqrt.f32(float %2167) #2
  %2169 = fdiv nsz float 1.000000e+00, %2168, !fpmath !1
  store float %2169, float addrspace(5)* %263
  %2170 = load float, float addrspace(5)* %263
  store float %2170, float addrspace(5)* %650
  %2171 = load float, float addrspace(5)* %263
  %2172 = load float, float addrspace(5)* %487
  %2173 = fmul nsz float %2171, %2172
  %2174 = load float, float addrspace(5)* %263
  %2175 = load float, float addrspace(5)* %486
  %2176 = fmul nsz float %2174, %2175
  %2177 = load float, float addrspace(5)* %263
  %2178 = load float, float addrspace(5)* %485
  %2179 = fmul nsz float %2177, %2178
  store float %2173, float addrspace(5)* %259
  store float %2176, float addrspace(5)* %258
  store float %2179, float addrspace(5)* %257
  %2180 = load float, float addrspace(5)* %279
  %2181 = fptosi float %2180 to i32
  %2182 = bitcast i32 %2181 to float
  store float %2182, float addrspace(5)* %255
  %2183 = load float, float addrspace(5)* %255
  %2184 = bitcast float %2183 to i32
  %2185 = add i32 %2184, 28
  %2186 = bitcast i32 %2185 to float
  store float %2186, float addrspace(5)* %251
  %2187 = load float, float addrspace(5)* %487
  %2188 = load float, float addrspace(5)* %263
  %2189 = fsub nsz float -0.000000e+00, %2188
  %2190 = load float, float addrspace(5)* %251
  %2191 = bitcast float %2190 to i32
  %2192 = mul i32 %2191, 16
  %2193 = add i32 %2192, 0
  %2194 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2195 = insertelement <4 x i32> undef, i32 %2194, i32 0
  %2196 = insertelement <4 x i32> %2195, i32 0, i32 1
  %2197 = insertelement <4 x i32> %2196, i32 1632, i32 2
  %2198 = insertelement <4 x i32> %2197, i32 163756, i32 3
  %2199 = add i32 0, %2193
  %2200 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2198, i32 %2199)
  %2201 = fsub nsz float -0.000000e+00, %2200
  %2202 = fmul nsz float %2187, %2189
  %2203 = fadd nsz float %2202, %2201
  %2204 = load float, float addrspace(5)* %486
  %2205 = load float, float addrspace(5)* %263
  %2206 = fsub nsz float -0.000000e+00, %2205
  %2207 = load float, float addrspace(5)* %251
  %2208 = bitcast float %2207 to i32
  %2209 = mul i32 %2208, 16
  %2210 = add i32 %2209, 4
  %2211 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2212 = insertelement <4 x i32> undef, i32 %2211, i32 0
  %2213 = insertelement <4 x i32> %2212, i32 0, i32 1
  %2214 = insertelement <4 x i32> %2213, i32 1632, i32 2
  %2215 = insertelement <4 x i32> %2214, i32 163756, i32 3
  %2216 = add i32 0, %2210
  %2217 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2215, i32 %2216)
  %2218 = fsub nsz float -0.000000e+00, %2217
  %2219 = fmul nsz float %2204, %2206
  %2220 = fadd nsz float %2219, %2218
  %2221 = load float, float addrspace(5)* %485
  %2222 = load float, float addrspace(5)* %263
  %2223 = fsub nsz float -0.000000e+00, %2222
  %2224 = load float, float addrspace(5)* %251
  %2225 = bitcast float %2224 to i32
  %2226 = mul i32 %2225, 16
  %2227 = add i32 %2226, 8
  %2228 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2229 = insertelement <4 x i32> undef, i32 %2228, i32 0
  %2230 = insertelement <4 x i32> %2229, i32 0, i32 1
  %2231 = insertelement <4 x i32> %2230, i32 1632, i32 2
  %2232 = insertelement <4 x i32> %2231, i32 163756, i32 3
  %2233 = add i32 0, %2227
  %2234 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2232, i32 %2233)
  %2235 = fsub nsz float -0.000000e+00, %2234
  %2236 = fmul nsz float %2221, %2223
  %2237 = fadd nsz float %2236, %2235
  store float %2203, float addrspace(5)* %487
  store float %2220, float addrspace(5)* %486
  store float %2237, float addrspace(5)* %485
  %2238 = load float, float addrspace(5)* %279
  %2239 = fptosi float %2238 to i32
  %2240 = bitcast i32 %2239 to float
  store float %2240, float addrspace(5)* %247
  %2241 = load float, float addrspace(5)* %247
  %2242 = bitcast float %2241 to i32
  %2243 = add i32 %2242, 27
  %2244 = bitcast i32 %2243 to float
  store float %2244, float addrspace(5)* %243
  %2245 = load float, float addrspace(5)* %243
  %2246 = bitcast float %2245 to i32
  %2247 = mul i32 %2246, 16
  %2248 = add i32 %2247, 12
  %2249 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2250 = insertelement <4 x i32> undef, i32 %2249, i32 0
  %2251 = insertelement <4 x i32> %2250, i32 0, i32 1
  %2252 = insertelement <4 x i32> %2251, i32 1632, i32 2
  %2253 = insertelement <4 x i32> %2252, i32 163756, i32 3
  %2254 = add i32 0, %2248
  %2255 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2253, i32 %2254)
  %2256 = load float, float addrspace(5)* %487
  %2257 = load float, float addrspace(5)* %259
  %2258 = fmul nsz float %2255, %2256
  %2259 = fadd nsz float %2258, %2257
  %2260 = load float, float addrspace(5)* %243
  %2261 = bitcast float %2260 to i32
  %2262 = mul i32 %2261, 16
  %2263 = add i32 %2262, 12
  %2264 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2265 = insertelement <4 x i32> undef, i32 %2264, i32 0
  %2266 = insertelement <4 x i32> %2265, i32 0, i32 1
  %2267 = insertelement <4 x i32> %2266, i32 1632, i32 2
  %2268 = insertelement <4 x i32> %2267, i32 163756, i32 3
  %2269 = add i32 0, %2263
  %2270 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2268, i32 %2269)
  %2271 = load float, float addrspace(5)* %486
  %2272 = load float, float addrspace(5)* %258
  %2273 = fmul nsz float %2270, %2271
  %2274 = fadd nsz float %2273, %2272
  %2275 = load float, float addrspace(5)* %243
  %2276 = bitcast float %2275 to i32
  %2277 = mul i32 %2276, 16
  %2278 = add i32 %2277, 12
  %2279 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2280 = insertelement <4 x i32> undef, i32 %2279, i32 0
  %2281 = insertelement <4 x i32> %2280, i32 0, i32 1
  %2282 = insertelement <4 x i32> %2281, i32 1632, i32 2
  %2283 = insertelement <4 x i32> %2282, i32 163756, i32 3
  %2284 = add i32 0, %2278
  %2285 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2283, i32 %2284)
  %2286 = load float, float addrspace(5)* %485
  %2287 = load float, float addrspace(5)* %257
  %2288 = fmul nsz float %2285, %2286
  %2289 = fadd nsz float %2288, %2287
  store float %2259, float addrspace(5)* %487
  store float %2274, float addrspace(5)* %486
  store float %2289, float addrspace(5)* %485
  %2290 = load float, float addrspace(5)* %619
  %2291 = load float, float addrspace(5)* %618
  %2292 = load float, float addrspace(5)* %617
  %2293 = load float, float addrspace(5)* %487
  %2294 = load float, float addrspace(5)* %486
  %2295 = load float, float addrspace(5)* %485
  %2296 = fmul nsz float %2290, %2293
  %2297 = fmul nsz float %2291, %2294
  %2298 = fadd nsz float %2297, %2296
  %2299 = fmul nsz float %2292, %2295
  %2300 = fadd nsz float %2298, %2299
  store float %2300, float addrspace(5)* %239
  %2301 = load float, float addrspace(5)* %239
  %2302 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2303 = insertelement <4 x i32> undef, i32 %2302, i32 0
  %2304 = insertelement <4 x i32> %2303, i32 0, i32 1
  %2305 = insertelement <4 x i32> %2304, i32 1632, i32 2
  %2306 = insertelement <4 x i32> %2305, i32 163756, i32 3
  %2307 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2306, i32 0)
  %2308 = call nsz float @llvm.maxnum.f32(float %2301, float %2307) #2
  store float %2308, float addrspace(5)* %235
  %2309 = load float, float addrspace(5)* %235
  %2310 = load float, float addrspace(5)* %235
  %2311 = load float, float addrspace(5)* %235
  %2312 = fmul nsz float %2309, %2310
  %2313 = fadd nsz float %2312, %2311
  store float %2313, float addrspace(5)* %231
  %2314 = load float, float addrspace(5)* %231
  %2315 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2316 = insertelement <4 x i32> undef, i32 %2315, i32 0
  %2317 = insertelement <4 x i32> %2316, i32 0, i32 1
  %2318 = insertelement <4 x i32> %2317, i32 1632, i32 2
  %2319 = insertelement <4 x i32> %2318, i32 163756, i32 3
  %2320 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2319, i32 12)
  %2321 = fmul nsz float %2314, %2320
  store float %2321, float addrspace(5)* %227
  %2322 = load float, float addrspace(5)* %279
  %2323 = fptosi float %2322 to i32
  %2324 = bitcast i32 %2323 to float
  store float %2324, float addrspace(5)* %223
  %2325 = load float, float addrspace(5)* %223
  %2326 = bitcast float %2325 to i32
  %2327 = add i32 %2326, 27
  %2328 = bitcast i32 %2327 to float
  store float %2328, float addrspace(5)* %219
  %2329 = load float, float addrspace(5)* %227
  %2330 = load float, float addrspace(5)* %219
  %2331 = bitcast float %2330 to i32
  %2332 = mul i32 %2331, 16
  %2333 = add i32 %2332, 0
  %2334 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2335 = insertelement <4 x i32> undef, i32 %2334, i32 0
  %2336 = insertelement <4 x i32> %2335, i32 0, i32 1
  %2337 = insertelement <4 x i32> %2336, i32 1632, i32 2
  %2338 = insertelement <4 x i32> %2337, i32 163756, i32 3
  %2339 = add i32 0, %2333
  %2340 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2338, i32 %2339)
  %2341 = fmul nsz float %2329, %2340
  %2342 = load float, float addrspace(5)* %227
  %2343 = load float, float addrspace(5)* %219
  %2344 = bitcast float %2343 to i32
  %2345 = mul i32 %2344, 16
  %2346 = add i32 %2345, 4
  %2347 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2348 = insertelement <4 x i32> undef, i32 %2347, i32 0
  %2349 = insertelement <4 x i32> %2348, i32 0, i32 1
  %2350 = insertelement <4 x i32> %2349, i32 1632, i32 2
  %2351 = insertelement <4 x i32> %2350, i32 163756, i32 3
  %2352 = add i32 0, %2346
  %2353 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2351, i32 %2352)
  %2354 = fmul nsz float %2342, %2353
  %2355 = load float, float addrspace(5)* %227
  %2356 = load float, float addrspace(5)* %219
  %2357 = bitcast float %2356 to i32
  %2358 = mul i32 %2357, 16
  %2359 = add i32 %2358, 8
  %2360 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2361 = insertelement <4 x i32> undef, i32 %2360, i32 0
  %2362 = insertelement <4 x i32> %2361, i32 0, i32 1
  %2363 = insertelement <4 x i32> %2362, i32 1632, i32 2
  %2364 = insertelement <4 x i32> %2363, i32 163756, i32 3
  %2365 = add i32 0, %2359
  %2366 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2364, i32 %2365)
  %2367 = fmul nsz float %2355, %2366
  store float %2341, float addrspace(5)* %487
  store float %2354, float addrspace(5)* %486
  store float %2367, float addrspace(5)* %485
  %2368 = load float, float addrspace(5)* %650
  %2369 = load float, float addrspace(5)* %267
  %2370 = fmul nsz float %2368, %2369
  %2371 = load float, float addrspace(5)* %649
  %2372 = load float, float addrspace(5)* %267
  %2373 = fmul nsz float %2371, %2372
  store float %2370, float addrspace(5)* %215
  store float %2373, float addrspace(5)* %214
  %2374 = load float, float addrspace(5)* %215
  %2375 = load float, float addrspace(5)* %214
  store float %2374, float addrspace(5)* %530
  store float %2375, float addrspace(5)* %529
  %2376 = load float, float addrspace(5)* %279
  %2377 = fptosi float %2376 to i32
  %2378 = bitcast i32 %2377 to float
  store float %2378, float addrspace(5)* %211
  %2379 = load float, float addrspace(5)* %211
  %2380 = bitcast float %2379 to i32
  %2381 = add i32 %2380, 31
  %2382 = bitcast i32 %2381 to float
  store float %2382, float addrspace(5)* %207
  %2383 = load float, float addrspace(5)* %207
  %2384 = bitcast float %2383 to i32
  %2385 = mul i32 %2384, 16
  %2386 = add i32 %2385, 0
  %2387 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2388 = insertelement <4 x i32> undef, i32 %2387, i32 0
  %2389 = insertelement <4 x i32> %2388, i32 0, i32 1
  %2390 = insertelement <4 x i32> %2389, i32 1632, i32 2
  %2391 = insertelement <4 x i32> %2390, i32 163756, i32 3
  %2392 = add i32 0, %2386
  %2393 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2391, i32 %2392)
  %2394 = load float, float addrspace(5)* %207
  %2395 = bitcast float %2394 to i32
  %2396 = mul i32 %2395, 16
  %2397 = add i32 %2396, 4
  %2398 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2399 = insertelement <4 x i32> undef, i32 %2398, i32 0
  %2400 = insertelement <4 x i32> %2399, i32 0, i32 1
  %2401 = insertelement <4 x i32> %2400, i32 1632, i32 2
  %2402 = insertelement <4 x i32> %2401, i32 163756, i32 3
  %2403 = add i32 0, %2397
  %2404 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2402, i32 %2403)
  %2405 = load float, float addrspace(5)* %207
  %2406 = bitcast float %2405 to i32
  %2407 = mul i32 %2406, 16
  %2408 = add i32 %2407, 8
  %2409 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2410 = insertelement <4 x i32> undef, i32 %2409, i32 0
  %2411 = insertelement <4 x i32> %2410, i32 0, i32 1
  %2412 = insertelement <4 x i32> %2411, i32 1632, i32 2
  %2413 = insertelement <4 x i32> %2412, i32 163756, i32 3
  %2414 = add i32 0, %2408
  %2415 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2413, i32 %2414)
  %2416 = load float, float addrspace(5)* %531
  %2417 = load float, float addrspace(5)* %530
  %2418 = load float, float addrspace(5)* %529
  %2419 = fmul nsz float %2393, %2416
  %2420 = fmul nsz float %2404, %2417
  %2421 = fadd nsz float %2420, %2419
  %2422 = fmul nsz float %2415, %2418
  %2423 = fadd nsz float %2421, %2422
  store float %2423, float addrspace(5)* %203
  %2424 = load float, float addrspace(5)* %203
  %2425 = fdiv nsz float 1.000000e+00, %2424, !fpmath !1
  store float %2425, float addrspace(5)* %199
  %2426 = load float, float addrspace(5)* %279
  %2427 = fptosi float %2426 to i32
  %2428 = bitcast i32 %2427 to float
  store float %2428, float addrspace(5)* %195
  %2429 = load float, float addrspace(5)* %195
  %2430 = bitcast float %2429 to i32
  %2431 = add i32 %2430, 28
  %2432 = bitcast i32 %2431 to float
  store float %2432, float addrspace(5)* %191
  %2433 = load float, float addrspace(5)* %191
  %2434 = bitcast float %2433 to i32
  %2435 = mul i32 %2434, 16
  %2436 = add i32 %2435, 0
  %2437 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2438 = insertelement <4 x i32> undef, i32 %2437, i32 0
  %2439 = insertelement <4 x i32> %2438, i32 0, i32 1
  %2440 = insertelement <4 x i32> %2439, i32 1632, i32 2
  %2441 = insertelement <4 x i32> %2440, i32 163756, i32 3
  %2442 = add i32 0, %2436
  %2443 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2441, i32 %2442)
  %2444 = load float, float addrspace(5)* %191
  %2445 = bitcast float %2444 to i32
  %2446 = mul i32 %2445, 16
  %2447 = add i32 %2446, 4
  %2448 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2449 = insertelement <4 x i32> undef, i32 %2448, i32 0
  %2450 = insertelement <4 x i32> %2449, i32 0, i32 1
  %2451 = insertelement <4 x i32> %2450, i32 1632, i32 2
  %2452 = insertelement <4 x i32> %2451, i32 163756, i32 3
  %2453 = add i32 0, %2447
  %2454 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2452, i32 %2453)
  %2455 = load float, float addrspace(5)* %191
  %2456 = bitcast float %2455 to i32
  %2457 = mul i32 %2456, 16
  %2458 = add i32 %2457, 8
  %2459 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2460 = insertelement <4 x i32> undef, i32 %2459, i32 0
  %2461 = insertelement <4 x i32> %2460, i32 0, i32 1
  %2462 = insertelement <4 x i32> %2461, i32 1632, i32 2
  %2463 = insertelement <4 x i32> %2462, i32 163756, i32 3
  %2464 = add i32 0, %2458
  %2465 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2463, i32 %2464)
  %2466 = load float, float addrspace(5)* %259
  %2467 = fsub nsz float -0.000000e+00, %2466
  %2468 = load float, float addrspace(5)* %258
  %2469 = fsub nsz float -0.000000e+00, %2468
  %2470 = load float, float addrspace(5)* %257
  %2471 = fsub nsz float -0.000000e+00, %2470
  %2472 = fmul nsz float %2443, %2467
  %2473 = fmul nsz float %2454, %2469
  %2474 = fadd nsz float %2473, %2472
  %2475 = fmul nsz float %2465, %2471
  %2476 = fadd nsz float %2474, %2475
  store float %2476, float addrspace(5)* %187
  %2477 = load float, float addrspace(5)* %279
  %2478 = fptosi float %2477 to i32
  %2479 = bitcast i32 %2478 to float
  store float %2479, float addrspace(5)* %183
  %2480 = load float, float addrspace(5)* %183
  %2481 = bitcast float %2480 to i32
  %2482 = add i32 %2481, 30
  %2483 = bitcast i32 %2482 to float
  store float %2483, float addrspace(5)* %179
  %2484 = load float, float addrspace(5)* %187
  %2485 = load float, float addrspace(5)* %179
  %2486 = bitcast float %2485 to i32
  %2487 = mul i32 %2486, 16
  %2488 = add i32 %2487, 8
  %2489 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2490 = insertelement <4 x i32> undef, i32 %2489, i32 0
  %2491 = insertelement <4 x i32> %2490, i32 0, i32 1
  %2492 = insertelement <4 x i32> %2491, i32 1632, i32 2
  %2493 = insertelement <4 x i32> %2492, i32 163756, i32 3
  %2494 = add i32 0, %2488
  %2495 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2493, i32 %2494)
  %2496 = fsub nsz float -0.000000e+00, %2495
  %2497 = fadd nsz float %2484, %2496
  store float %2497, float addrspace(5)* %175
  %2498 = load float, float addrspace(5)* %279
  %2499 = fptosi float %2498 to i32
  %2500 = bitcast i32 %2499 to float
  store float %2500, float addrspace(5)* %171
  %2501 = load float, float addrspace(5)* %171
  %2502 = bitcast float %2501 to i32
  %2503 = add i32 %2502, 30
  %2504 = bitcast i32 %2503 to float
  store float %2504, float addrspace(5)* %167
  %2505 = load float, float addrspace(5)* %175
  %2506 = load float, float addrspace(5)* %167
  %2507 = bitcast float %2506 to i32
  %2508 = mul i32 %2507, 16
  %2509 = add i32 %2508, 12
  %2510 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2511 = insertelement <4 x i32> undef, i32 %2510, i32 0
  %2512 = insertelement <4 x i32> %2511, i32 0, i32 1
  %2513 = insertelement <4 x i32> %2512, i32 1632, i32 2
  %2514 = insertelement <4 x i32> %2513, i32 163756, i32 3
  %2515 = add i32 0, %2509
  %2516 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2514, i32 %2515)
  %2517 = fmul nsz float %2505, %2516
  store float %2517, float addrspace(5)* %163
  %2518 = load float, float addrspace(5)* %163
  %2519 = call nsz float @llvm.maxnum.f32(float %2518, float 0x3F1A36E2E0000000) #2
  store float %2519, float addrspace(5)* %159
  %2520 = load float, float addrspace(5)* %279
  %2521 = fptosi float %2520 to i32
  %2522 = bitcast i32 %2521 to float
  store float %2522, float addrspace(5)* %155
  %2523 = load float, float addrspace(5)* %155
  %2524 = bitcast float %2523 to i32
  %2525 = add i32 %2524, 30
  %2526 = bitcast i32 %2525 to float
  store float %2526, float addrspace(5)* %151
  %2527 = load float, float addrspace(5)* %159
  %2528 = load float, float addrspace(5)* %151
  %2529 = bitcast float %2528 to i32
  %2530 = mul i32 %2529, 16
  %2531 = add i32 %2530, 0
  %2532 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2533 = insertelement <4 x i32> undef, i32 %2532, i32 0
  %2534 = insertelement <4 x i32> %2533, i32 0, i32 1
  %2535 = insertelement <4 x i32> %2534, i32 1632, i32 2
  %2536 = insertelement <4 x i32> %2535, i32 163756, i32 3
  %2537 = add i32 0, %2531
  %2538 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2536, i32 %2537)
  %2539 = call nsz float @llvm.pow.f32(float %2527, float %2538) #2
  store float %2539, float addrspace(5)* %147
  %2540 = load float, float addrspace(5)* %147
  store float %2540, float addrspace(5)* %616
  %2541 = load float, float addrspace(5)* %147
  %2542 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2543 = insertelement <4 x i32> undef, i32 %2542, i32 0
  %2544 = insertelement <4 x i32> %2543, i32 0, i32 1
  %2545 = insertelement <4 x i32> %2544, i32 1632, i32 2
  %2546 = insertelement <4 x i32> %2545, i32 163756, i32 3
  %2547 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2546, i32 4)
  %2548 = call nsz float @llvm.minnum.f32(float %2541, float %2547) #2
  store float %2548, float addrspace(5)* %143
  %2549 = load float, float addrspace(5)* %199
  %2550 = load float, float addrspace(5)* %143
  %2551 = load float, float addrspace(5)* %199
  %2552 = fsub nsz float -0.000000e+00, %2551
  %2553 = fmul nsz float %2549, %2550
  %2554 = fadd nsz float %2553, %2552
  store float %2554, float addrspace(5)* %139
  %2555 = load float, float addrspace(5)* %279
  %2556 = fptosi float %2555 to i32
  %2557 = bitcast i32 %2556 to float
  store float %2557, float addrspace(5)* %135
  %2558 = load float, float addrspace(5)* %135
  %2559 = bitcast float %2558 to i32
  %2560 = add i32 %2559, 28
  %2561 = bitcast i32 %2560 to float
  store float %2561, float addrspace(5)* %131
  %2562 = load float, float addrspace(5)* %131
  %2563 = bitcast float %2562 to i32
  %2564 = mul i32 %2563, 16
  %2565 = add i32 %2564, 12
  %2566 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2567 = insertelement <4 x i32> undef, i32 %2566, i32 0
  %2568 = insertelement <4 x i32> %2567, i32 0, i32 1
  %2569 = insertelement <4 x i32> %2568, i32 1632, i32 2
  %2570 = insertelement <4 x i32> %2569, i32 163756, i32 3
  %2571 = add i32 0, %2565
  %2572 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2570, i32 %2571)
  %2573 = load float, float addrspace(5)* %139
  %2574 = load float, float addrspace(5)* %199
  %2575 = fmul nsz float %2572, %2573
  %2576 = fadd nsz float %2575, %2574
  store float %2576, float addrspace(5)* %127
  %2577 = load float, float addrspace(5)* %127
  %2578 = fsub nsz float -0.000000e+00, %2577
  %2579 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2580 = insertelement <4 x i32> undef, i32 %2579, i32 0
  %2581 = insertelement <4 x i32> %2580, i32 0, i32 1
  %2582 = insertelement <4 x i32> %2581, i32 1632, i32 2
  %2583 = insertelement <4 x i32> %2582, i32 163756, i32 3
  %2584 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2583, i32 4)
  %2585 = fadd nsz float %2578, %2584
  store float %2585, float addrspace(5)* %123
  %2586 = load float, float addrspace(5)* %123
  store float %2586, float addrspace(5)* %648
  %2587 = load float, float addrspace(5)* %279
  %2588 = fptosi float %2587 to i32
  %2589 = bitcast i32 %2588 to float
  store float %2589, float addrspace(5)* %119
  %2590 = load float, float addrspace(5)* %119
  %2591 = bitcast float %2590 to i32
  %2592 = add i32 %2591, 27
  %2593 = bitcast i32 %2592 to float
  store float %2593, float addrspace(5)* %115
  %2594 = load float, float addrspace(5)* %115
  %2595 = bitcast float %2594 to i32
  %2596 = mul i32 %2595, 16
  %2597 = add i32 %2596, 12
  %2598 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2599 = insertelement <4 x i32> undef, i32 %2598, i32 0
  %2600 = insertelement <4 x i32> %2599, i32 0, i32 1
  %2601 = insertelement <4 x i32> %2600, i32 1632, i32 2
  %2602 = insertelement <4 x i32> %2601, i32 163756, i32 3
  %2603 = add i32 0, %2597
  %2604 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2602, i32 %2603)
  %2605 = load float, float addrspace(5)* %123
  %2606 = load float, float addrspace(5)* %127
  %2607 = fmul nsz float %2604, %2605
  %2608 = fadd nsz float %2607, %2606
  store float %2608, float addrspace(5)* %111
  %2609 = load float, float addrspace(5)* %111
  %2610 = load float, float addrspace(5)* %487
  %2611 = fmul nsz float %2609, %2610
  %2612 = load float, float addrspace(5)* %111
  %2613 = load float, float addrspace(5)* %486
  %2614 = fmul nsz float %2612, %2613
  %2615 = load float, float addrspace(5)* %111
  %2616 = load float, float addrspace(5)* %485
  %2617 = fmul nsz float %2615, %2616
  store float %2611, float addrspace(5)* %107
  store float %2614, float addrspace(5)* %106
  store float %2617, float addrspace(5)* %105
  %2618 = load float, float addrspace(5)* %107
  %2619 = load float, float addrspace(5)* %106
  %2620 = load float, float addrspace(5)* %105
  store float %2618, float addrspace(5)* %530
  store float %2619, float addrspace(5)* %529
  store float %2620, float addrspace(5)* %528
  %2621 = load float, float addrspace(5)* %651
  %2622 = fsub nsz float -0.000000e+00, %2621
  %2623 = load float, float addrspace(5)* %651
  %2624 = fcmp nsz oge float %2622, %2623
  %2625 = sext i1 %2624 to i32
  %2626 = bitcast i32 %2625 to float
  store float %2626, float addrspace(5)* %103
  %2627 = load float, float addrspace(5)* %103
  %2628 = bitcast float %2627 to i32
  %2629 = and i32 %2628, 1065353216
  %2630 = bitcast i32 %2629 to float
  store float %2630, float addrspace(5)* %99
  %2631 = load float, float addrspace(5)* %99
  %2632 = load float, float addrspace(5)* %107
  %2633 = load float, float addrspace(5)* %527
  %2634 = fmul nsz float %2631, %2632
  %2635 = fadd nsz float %2634, %2633
  %2636 = load float, float addrspace(5)* %99
  %2637 = load float, float addrspace(5)* %106
  %2638 = load float, float addrspace(5)* %526
  %2639 = fmul nsz float %2636, %2637
  %2640 = fadd nsz float %2639, %2638
  %2641 = load float, float addrspace(5)* %99
  %2642 = load float, float addrspace(5)* %105
  %2643 = load float, float addrspace(5)* %525
  %2644 = fmul nsz float %2641, %2642
  %2645 = fadd nsz float %2644, %2643
  store float %2635, float addrspace(5)* %527
  store float %2640, float addrspace(5)* %526
  store float %2645, float addrspace(5)* %525
  %2646 = load float, float addrspace(5)* %651
  %2647 = fsub nsz float -0.000000e+00, %2646
  %2648 = load float, float addrspace(5)* %651
  %2649 = fcmp nsz olt float %2647, %2648
  %2650 = sext i1 %2649 to i32
  %2651 = bitcast i32 %2650 to float
  store float %2651, float addrspace(5)* %95
  %2652 = load float, float addrspace(5)* %95
  %2653 = bitcast float %2652 to i32
  %2654 = and i32 %2653, 1065353216
  %2655 = bitcast i32 %2654 to float
  store float %2655, float addrspace(5)* %91
  %2656 = load float, float addrspace(5)* %91
  store float %2656, float addrspace(5)* %650
  %2657 = load float, float addrspace(5)* %107
  %2658 = load float, float addrspace(5)* %91
  %2659 = load float, float addrspace(5)* %499
  %2660 = fmul nsz float %2657, %2658
  %2661 = fadd nsz float %2660, %2659
  %2662 = load float, float addrspace(5)* %106
  %2663 = load float, float addrspace(5)* %91
  %2664 = load float, float addrspace(5)* %498
  %2665 = fmul nsz float %2662, %2663
  %2666 = fadd nsz float %2665, %2664
  %2667 = load float, float addrspace(5)* %105
  %2668 = load float, float addrspace(5)* %91
  %2669 = load float, float addrspace(5)* %497
  %2670 = fmul nsz float %2667, %2668
  %2671 = fadd nsz float %2670, %2669
  store float %2661, float addrspace(5)* %499
  store float %2666, float addrspace(5)* %498
  store float %2671, float addrspace(5)* %497
  %2672 = load float, float addrspace(5)* %651
  %2673 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2674 = insertelement <4 x i32> undef, i32 %2673, i32 0
  %2675 = insertelement <4 x i32> %2674, i32 0, i32 1
  %2676 = insertelement <4 x i32> %2675, i32 1632, i32 2
  %2677 = insertelement <4 x i32> %2676, i32 163756, i32 3
  %2678 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2677, i32 4)
  %2679 = fadd nsz float %2672, %2678
  store float %2679, float addrspace(5)* %651
  %2680 = load float, float addrspace(5)* %287
  %2681 = bitcast float %2680 to i32
  %2682 = add i32 %2681, 1
  %2683 = bitcast i32 %2682 to float
  store float %2683, float addrspace(5)* %287
  br label %loop154

endloop222:                                       ; preds = %if156
  %2684 = load float, float addrspace(5)* %619
  %2685 = load float, float addrspace(5)* %619
  %2686 = fmul nsz float %2684, %2685
  %2687 = load float, float addrspace(5)* %618
  %2688 = load float, float addrspace(5)* %618
  %2689 = fmul nsz float %2687, %2688
  %2690 = load float, float addrspace(5)* %617
  %2691 = load float, float addrspace(5)* %617
  %2692 = fmul nsz float %2690, %2691
  store float %2686, float addrspace(5)* %651
  store float %2689, float addrspace(5)* %650
  store float %2692, float addrspace(5)* %649
  %2693 = load float, float addrspace(5)* %619
  %2694 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2695 = insertelement <4 x i32> undef, i32 %2694, i32 0
  %2696 = insertelement <4 x i32> %2695, i32 0, i32 1
  %2697 = insertelement <4 x i32> %2696, i32 1632, i32 2
  %2698 = insertelement <4 x i32> %2697, i32 163756, i32 3
  %2699 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2698, i32 0)
  %2700 = fcmp nsz olt float %2693, %2699
  %2701 = sext i1 %2700 to i32
  %2702 = load float, float addrspace(5)* %618
  %2703 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2704 = insertelement <4 x i32> undef, i32 %2703, i32 0
  %2705 = insertelement <4 x i32> %2704, i32 0, i32 1
  %2706 = insertelement <4 x i32> %2705, i32 1632, i32 2
  %2707 = insertelement <4 x i32> %2706, i32 163756, i32 3
  %2708 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2707, i32 0)
  %2709 = fcmp nsz olt float %2702, %2708
  %2710 = sext i1 %2709 to i32
  %2711 = load float, float addrspace(5)* %617
  %2712 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2713 = insertelement <4 x i32> undef, i32 %2712, i32 0
  %2714 = insertelement <4 x i32> %2713, i32 0, i32 1
  %2715 = insertelement <4 x i32> %2714, i32 1632, i32 2
  %2716 = insertelement <4 x i32> %2715, i32 163756, i32 3
  %2717 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2716, i32 0)
  %2718 = fcmp nsz olt float %2711, %2717
  %2719 = sext i1 %2718 to i32
  %2720 = bitcast i32 %2701 to float
  store float %2720, float addrspace(5)* %87
  %2721 = bitcast i32 %2710 to float
  store float %2721, float addrspace(5)* %86
  %2722 = bitcast i32 %2719 to float
  store float %2722, float addrspace(5)* %85
  %2723 = load float, float addrspace(5)* %87
  %2724 = bitcast float %2723 to i32
  %2725 = and i32 %2724, 1065353216
  %2726 = load float, float addrspace(5)* %86
  %2727 = bitcast float %2726 to i32
  %2728 = and i32 %2727, 1065353216
  %2729 = load float, float addrspace(5)* %85
  %2730 = bitcast float %2729 to i32
  %2731 = and i32 %2730, 1065353216
  %2732 = bitcast i32 %2725 to float
  store float %2732, float addrspace(5)* %531
  %2733 = bitcast i32 %2728 to float
  store float %2733, float addrspace(5)* %530
  %2734 = bitcast i32 %2731 to float
  store float %2734, float addrspace(5)* %529
  %2735 = load float, float addrspace(5)* %531
  store float %2735, float addrspace(5)* %511
  %2736 = load float, float addrspace(5)* %530
  %2737 = fptosi float %2736 to i32
  %2738 = bitcast i32 %2737 to float
  store float %2738, float addrspace(5)* %83
  %2739 = load float, float addrspace(5)* %83
  %2740 = bitcast float %2739 to i32
  %2741 = add i32 %2740, 23
  %2742 = bitcast i32 %2741 to float
  store float %2742, float addrspace(5)* %79
  %2743 = load float, float addrspace(5)* %650
  %2744 = load float, float addrspace(5)* %79
  %2745 = bitcast float %2744 to i32
  %2746 = mul i32 %2745, 16
  %2747 = add i32 %2746, 0
  %2748 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2749 = insertelement <4 x i32> undef, i32 %2748, i32 0
  %2750 = insertelement <4 x i32> %2749, i32 0, i32 1
  %2751 = insertelement <4 x i32> %2750, i32 1632, i32 2
  %2752 = insertelement <4 x i32> %2751, i32 163756, i32 3
  %2753 = add i32 0, %2747
  %2754 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2752, i32 %2753)
  %2755 = fmul nsz float %2743, %2754
  %2756 = load float, float addrspace(5)* %650
  %2757 = load float, float addrspace(5)* %79
  %2758 = bitcast float %2757 to i32
  %2759 = mul i32 %2758, 16
  %2760 = add i32 %2759, 4
  %2761 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2762 = insertelement <4 x i32> undef, i32 %2761, i32 0
  %2763 = insertelement <4 x i32> %2762, i32 0, i32 1
  %2764 = insertelement <4 x i32> %2763, i32 1632, i32 2
  %2765 = insertelement <4 x i32> %2764, i32 163756, i32 3
  %2766 = add i32 0, %2760
  %2767 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2765, i32 %2766)
  %2768 = fmul nsz float %2756, %2767
  %2769 = load float, float addrspace(5)* %650
  %2770 = load float, float addrspace(5)* %79
  %2771 = bitcast float %2770 to i32
  %2772 = mul i32 %2771, 16
  %2773 = add i32 %2772, 8
  %2774 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2775 = insertelement <4 x i32> undef, i32 %2774, i32 0
  %2776 = insertelement <4 x i32> %2775, i32 0, i32 1
  %2777 = insertelement <4 x i32> %2776, i32 1632, i32 2
  %2778 = insertelement <4 x i32> %2777, i32 163756, i32 3
  %2779 = add i32 0, %2773
  %2780 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2778, i32 %2779)
  %2781 = fmul nsz float %2769, %2780
  store float %2755, float addrspace(5)* %75
  store float %2768, float addrspace(5)* %74
  store float %2781, float addrspace(5)* %73
  %2782 = load float, float addrspace(5)* %511
  %2783 = fptosi float %2782 to i32
  %2784 = bitcast i32 %2783 to float
  store float %2784, float addrspace(5)* %71
  %2785 = load float, float addrspace(5)* %71
  %2786 = bitcast float %2785 to i32
  %2787 = add i32 %2786, 21
  %2788 = bitcast i32 %2787 to float
  store float %2788, float addrspace(5)* %67
  %2789 = load float, float addrspace(5)* %651
  %2790 = load float, float addrspace(5)* %67
  %2791 = bitcast float %2790 to i32
  %2792 = mul i32 %2791, 16
  %2793 = add i32 %2792, 0
  %2794 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2795 = insertelement <4 x i32> undef, i32 %2794, i32 0
  %2796 = insertelement <4 x i32> %2795, i32 0, i32 1
  %2797 = insertelement <4 x i32> %2796, i32 1632, i32 2
  %2798 = insertelement <4 x i32> %2797, i32 163756, i32 3
  %2799 = add i32 0, %2793
  %2800 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2798, i32 %2799)
  %2801 = load float, float addrspace(5)* %75
  %2802 = fmul nsz float %2789, %2800
  %2803 = fadd nsz float %2802, %2801
  %2804 = load float, float addrspace(5)* %651
  %2805 = load float, float addrspace(5)* %67
  %2806 = bitcast float %2805 to i32
  %2807 = mul i32 %2806, 16
  %2808 = add i32 %2807, 4
  %2809 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2810 = insertelement <4 x i32> undef, i32 %2809, i32 0
  %2811 = insertelement <4 x i32> %2810, i32 0, i32 1
  %2812 = insertelement <4 x i32> %2811, i32 1632, i32 2
  %2813 = insertelement <4 x i32> %2812, i32 163756, i32 3
  %2814 = add i32 0, %2808
  %2815 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2813, i32 %2814)
  %2816 = load float, float addrspace(5)* %74
  %2817 = fmul nsz float %2804, %2815
  %2818 = fadd nsz float %2817, %2816
  %2819 = load float, float addrspace(5)* %651
  %2820 = load float, float addrspace(5)* %67
  %2821 = bitcast float %2820 to i32
  %2822 = mul i32 %2821, 16
  %2823 = add i32 %2822, 8
  %2824 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2825 = insertelement <4 x i32> undef, i32 %2824, i32 0
  %2826 = insertelement <4 x i32> %2825, i32 0, i32 1
  %2827 = insertelement <4 x i32> %2826, i32 1632, i32 2
  %2828 = insertelement <4 x i32> %2827, i32 163756, i32 3
  %2829 = add i32 0, %2823
  %2830 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2828, i32 %2829)
  %2831 = load float, float addrspace(5)* %73
  %2832 = fmul nsz float %2819, %2830
  %2833 = fadd nsz float %2832, %2831
  store float %2803, float addrspace(5)* %63
  store float %2818, float addrspace(5)* %62
  store float %2833, float addrspace(5)* %61
  %2834 = load float, float addrspace(5)* %529
  %2835 = fptosi float %2834 to i32
  %2836 = bitcast i32 %2835 to float
  store float %2836, float addrspace(5)* %59
  %2837 = load float, float addrspace(5)* %59
  %2838 = bitcast float %2837 to i32
  %2839 = add i32 %2838, 25
  %2840 = bitcast i32 %2839 to float
  store float %2840, float addrspace(5)* %55
  %2841 = load float, float addrspace(5)* %649
  %2842 = load float, float addrspace(5)* %55
  %2843 = bitcast float %2842 to i32
  %2844 = mul i32 %2843, 16
  %2845 = add i32 %2844, 0
  %2846 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2847 = insertelement <4 x i32> undef, i32 %2846, i32 0
  %2848 = insertelement <4 x i32> %2847, i32 0, i32 1
  %2849 = insertelement <4 x i32> %2848, i32 1632, i32 2
  %2850 = insertelement <4 x i32> %2849, i32 163756, i32 3
  %2851 = add i32 0, %2845
  %2852 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2850, i32 %2851)
  %2853 = load float, float addrspace(5)* %63
  %2854 = fmul nsz float %2841, %2852
  %2855 = fadd nsz float %2854, %2853
  %2856 = load float, float addrspace(5)* %649
  %2857 = load float, float addrspace(5)* %55
  %2858 = bitcast float %2857 to i32
  %2859 = mul i32 %2858, 16
  %2860 = add i32 %2859, 4
  %2861 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2862 = insertelement <4 x i32> undef, i32 %2861, i32 0
  %2863 = insertelement <4 x i32> %2862, i32 0, i32 1
  %2864 = insertelement <4 x i32> %2863, i32 1632, i32 2
  %2865 = insertelement <4 x i32> %2864, i32 163756, i32 3
  %2866 = add i32 0, %2860
  %2867 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2865, i32 %2866)
  %2868 = load float, float addrspace(5)* %62
  %2869 = fmul nsz float %2856, %2867
  %2870 = fadd nsz float %2869, %2868
  %2871 = load float, float addrspace(5)* %649
  %2872 = load float, float addrspace(5)* %55
  %2873 = bitcast float %2872 to i32
  %2874 = mul i32 %2873, 16
  %2875 = add i32 %2874, 8
  %2876 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2877 = insertelement <4 x i32> undef, i32 %2876, i32 0
  %2878 = insertelement <4 x i32> %2877, i32 0, i32 1
  %2879 = insertelement <4 x i32> %2878, i32 1632, i32 2
  %2880 = insertelement <4 x i32> %2879, i32 163756, i32 3
  %2881 = add i32 0, %2875
  %2882 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2880, i32 %2881)
  %2883 = load float, float addrspace(5)* %61
  %2884 = fmul nsz float %2871, %2882
  %2885 = fadd nsz float %2884, %2883
  store float %2855, float addrspace(5)* %651
  store float %2870, float addrspace(5)* %650
  store float %2885, float addrspace(5)* %649
  %2886 = load float, float addrspace(5)* %651
  %2887 = load float, float addrspace(5)* %499
  %2888 = fadd nsz float %2886, %2887
  %2889 = load float, float addrspace(5)* %650
  %2890 = load float, float addrspace(5)* %498
  %2891 = fadd nsz float %2889, %2890
  %2892 = load float, float addrspace(5)* %649
  %2893 = load float, float addrspace(5)* %497
  %2894 = fadd nsz float %2892, %2893
  store float %2888, float addrspace(5)* %51
  store float %2891, float addrspace(5)* %50
  store float %2894, float addrspace(5)* %49
  %2895 = load float, float addrspace(5)* %51
  %2896 = load float, float addrspace(5)* %50
  %2897 = load float, float addrspace(5)* %49
  store float %2895, float addrspace(5)* %671
  store float %2896, float addrspace(5)* %669
  store float %2897, float addrspace(5)* %668
  br label %endif238

endif238:                                         ; preds = %endloop222, %endloop129
  %2898 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2899 = insertelement <4 x i32> undef, i32 %2898, i32 0
  %2900 = insertelement <4 x i32> %2899, i32 0, i32 1
  %2901 = insertelement <4 x i32> %2900, i32 1632, i32 2
  %2902 = insertelement <4 x i32> %2901, i32 163756, i32 3
  %2903 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2902, i32 768)
  %2904 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2905 = insertelement <4 x i32> undef, i32 %2904, i32 0
  %2906 = insertelement <4 x i32> %2905, i32 0, i32 1
  %2907 = insertelement <4 x i32> %2906, i32 1632, i32 2
  %2908 = insertelement <4 x i32> %2907, i32 163756, i32 3
  %2909 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2908, i32 772)
  %2910 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2911 = insertelement <4 x i32> undef, i32 %2910, i32 0
  %2912 = insertelement <4 x i32> %2911, i32 0, i32 1
  %2913 = insertelement <4 x i32> %2912, i32 1632, i32 2
  %2914 = insertelement <4 x i32> %2913, i32 163756, i32 3
  %2915 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2914, i32 776)
  %2916 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2917 = insertelement <4 x i32> undef, i32 %2916, i32 0
  %2918 = insertelement <4 x i32> %2917, i32 0, i32 1
  %2919 = insertelement <4 x i32> %2918, i32 1632, i32 2
  %2920 = insertelement <4 x i32> %2919, i32 163756, i32 3
  %2921 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2920, i32 780)
  %2922 = fmul nsz float %745, %2903
  %2923 = fmul nsz float %746, %2909
  %2924 = fadd nsz float %2922, %2923
  %2925 = fmul nsz float %747, %2915
  %2926 = fadd nsz float %2924, %2925
  %2927 = fmul nsz float %748, %2921
  %2928 = fadd nsz float %2926, %2927
  store float %2928, float addrspace(5)* %683
  %2929 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2930 = insertelement <4 x i32> undef, i32 %2929, i32 0
  %2931 = insertelement <4 x i32> %2930, i32 0, i32 1
  %2932 = insertelement <4 x i32> %2931, i32 1632, i32 2
  %2933 = insertelement <4 x i32> %2932, i32 163756, i32 3
  %2934 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2933, i32 784)
  %2935 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2936 = insertelement <4 x i32> undef, i32 %2935, i32 0
  %2937 = insertelement <4 x i32> %2936, i32 0, i32 1
  %2938 = insertelement <4 x i32> %2937, i32 1632, i32 2
  %2939 = insertelement <4 x i32> %2938, i32 163756, i32 3
  %2940 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2939, i32 788)
  %2941 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2942 = insertelement <4 x i32> undef, i32 %2941, i32 0
  %2943 = insertelement <4 x i32> %2942, i32 0, i32 1
  %2944 = insertelement <4 x i32> %2943, i32 1632, i32 2
  %2945 = insertelement <4 x i32> %2944, i32 163756, i32 3
  %2946 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2945, i32 792)
  %2947 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2948 = insertelement <4 x i32> undef, i32 %2947, i32 0
  %2949 = insertelement <4 x i32> %2948, i32 0, i32 1
  %2950 = insertelement <4 x i32> %2949, i32 1632, i32 2
  %2951 = insertelement <4 x i32> %2950, i32 163756, i32 3
  %2952 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2951, i32 796)
  %2953 = fmul nsz float %745, %2934
  %2954 = fmul nsz float %746, %2940
  %2955 = fadd nsz float %2953, %2954
  %2956 = fmul nsz float %747, %2946
  %2957 = fadd nsz float %2955, %2956
  %2958 = fmul nsz float %748, %2952
  %2959 = fadd nsz float %2957, %2958
  store float %2959, float addrspace(5)* %47
  %2960 = load float, float addrspace(5)* %47
  store float %2960, float addrspace(5)* %682
  %2961 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2962 = insertelement <4 x i32> undef, i32 %2961, i32 0
  %2963 = insertelement <4 x i32> %2962, i32 0, i32 1
  %2964 = insertelement <4 x i32> %2963, i32 1632, i32 2
  %2965 = insertelement <4 x i32> %2964, i32 163756, i32 3
  %2966 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2965, i32 4)
  store float %2966, float addrspace(5)* %596
  %2967 = load float, float addrspace(5)* %599
  %2968 = load float, float addrspace(5)* %598
  %2969 = load float, float addrspace(5)* %597
  %2970 = load float, float addrspace(5)* %596
  %2971 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2972 = insertelement <4 x i32> undef, i32 %2971, i32 0
  %2973 = insertelement <4 x i32> %2972, i32 0, i32 1
  %2974 = insertelement <4 x i32> %2973, i32 1632, i32 2
  %2975 = insertelement <4 x i32> %2974, i32 163756, i32 3
  %2976 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2975, i32 128)
  %2977 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2978 = insertelement <4 x i32> undef, i32 %2977, i32 0
  %2979 = insertelement <4 x i32> %2978, i32 0, i32 1
  %2980 = insertelement <4 x i32> %2979, i32 1632, i32 2
  %2981 = insertelement <4 x i32> %2980, i32 163756, i32 3
  %2982 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2981, i32 132)
  %2983 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2984 = insertelement <4 x i32> undef, i32 %2983, i32 0
  %2985 = insertelement <4 x i32> %2984, i32 0, i32 1
  %2986 = insertelement <4 x i32> %2985, i32 1632, i32 2
  %2987 = insertelement <4 x i32> %2986, i32 163756, i32 3
  %2988 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2987, i32 136)
  %2989 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %2990 = insertelement <4 x i32> undef, i32 %2989, i32 0
  %2991 = insertelement <4 x i32> %2990, i32 0, i32 1
  %2992 = insertelement <4 x i32> %2991, i32 1632, i32 2
  %2993 = insertelement <4 x i32> %2992, i32 163756, i32 3
  %2994 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %2993, i32 140)
  %2995 = fmul nsz float %2967, %2976
  %2996 = fmul nsz float %2968, %2982
  %2997 = fadd nsz float %2995, %2996
  %2998 = fmul nsz float %2969, %2988
  %2999 = fadd nsz float %2997, %2998
  %3000 = fmul nsz float %2970, %2994
  %3001 = fadd nsz float %2999, %3000
  store float %3001, float addrspace(5)* %651
  %3002 = load float, float addrspace(5)* %599
  %3003 = load float, float addrspace(5)* %598
  %3004 = load float, float addrspace(5)* %597
  %3005 = load float, float addrspace(5)* %596
  %3006 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %3007 = insertelement <4 x i32> undef, i32 %3006, i32 0
  %3008 = insertelement <4 x i32> %3007, i32 0, i32 1
  %3009 = insertelement <4 x i32> %3008, i32 1632, i32 2
  %3010 = insertelement <4 x i32> %3009, i32 163756, i32 3
  %3011 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3010, i32 144)
  %3012 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %3013 = insertelement <4 x i32> undef, i32 %3012, i32 0
  %3014 = insertelement <4 x i32> %3013, i32 0, i32 1
  %3015 = insertelement <4 x i32> %3014, i32 1632, i32 2
  %3016 = insertelement <4 x i32> %3015, i32 163756, i32 3
  %3017 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3016, i32 148)
  %3018 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %3019 = insertelement <4 x i32> undef, i32 %3018, i32 0
  %3020 = insertelement <4 x i32> %3019, i32 0, i32 1
  %3021 = insertelement <4 x i32> %3020, i32 1632, i32 2
  %3022 = insertelement <4 x i32> %3021, i32 163756, i32 3
  %3023 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3022, i32 152)
  %3024 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %3025 = insertelement <4 x i32> undef, i32 %3024, i32 0
  %3026 = insertelement <4 x i32> %3025, i32 0, i32 1
  %3027 = insertelement <4 x i32> %3026, i32 1632, i32 2
  %3028 = insertelement <4 x i32> %3027, i32 163756, i32 3
  %3029 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3028, i32 156)
  %3030 = fmul nsz float %3002, %3011
  %3031 = fmul nsz float %3003, %3017
  %3032 = fadd nsz float %3030, %3031
  %3033 = fmul nsz float %3004, %3023
  %3034 = fadd nsz float %3032, %3033
  %3035 = fmul nsz float %3005, %3029
  %3036 = fadd nsz float %3034, %3035
  store float %3036, float addrspace(5)* %43
  %3037 = load float, float addrspace(5)* %43
  store float %3037, float addrspace(5)* %650
  %3038 = load float, float addrspace(5)* %599
  %3039 = load float, float addrspace(5)* %598
  %3040 = load float, float addrspace(5)* %597
  %3041 = load float, float addrspace(5)* %596
  %3042 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %3043 = insertelement <4 x i32> undef, i32 %3042, i32 0
  %3044 = insertelement <4 x i32> %3043, i32 0, i32 1
  %3045 = insertelement <4 x i32> %3044, i32 1632, i32 2
  %3046 = insertelement <4 x i32> %3045, i32 163756, i32 3
  %3047 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3046, i32 160)
  %3048 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %3049 = insertelement <4 x i32> undef, i32 %3048, i32 0
  %3050 = insertelement <4 x i32> %3049, i32 0, i32 1
  %3051 = insertelement <4 x i32> %3050, i32 1632, i32 2
  %3052 = insertelement <4 x i32> %3051, i32 163756, i32 3
  %3053 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3052, i32 164)
  %3054 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %3055 = insertelement <4 x i32> undef, i32 %3054, i32 0
  %3056 = insertelement <4 x i32> %3055, i32 0, i32 1
  %3057 = insertelement <4 x i32> %3056, i32 1632, i32 2
  %3058 = insertelement <4 x i32> %3057, i32 163756, i32 3
  %3059 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3058, i32 168)
  %3060 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %3061 = insertelement <4 x i32> undef, i32 %3060, i32 0
  %3062 = insertelement <4 x i32> %3061, i32 0, i32 1
  %3063 = insertelement <4 x i32> %3062, i32 1632, i32 2
  %3064 = insertelement <4 x i32> %3063, i32 163756, i32 3
  %3065 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3064, i32 172)
  %3066 = fmul nsz float %3038, %3047
  %3067 = fmul nsz float %3039, %3053
  %3068 = fadd nsz float %3066, %3067
  %3069 = fmul nsz float %3040, %3059
  %3070 = fadd nsz float %3068, %3069
  %3071 = fmul nsz float %3041, %3065
  %3072 = fadd nsz float %3070, %3071
  store float %3072, float addrspace(5)* %39
  %3073 = load float, float addrspace(5)* %39
  store float %3073, float addrspace(5)* %649
  %3074 = load float, float addrspace(5)* %599
  %3075 = load float, float addrspace(5)* %598
  %3076 = load float, float addrspace(5)* %597
  %3077 = load float, float addrspace(5)* %596
  %3078 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %3079 = insertelement <4 x i32> undef, i32 %3078, i32 0
  %3080 = insertelement <4 x i32> %3079, i32 0, i32 1
  %3081 = insertelement <4 x i32> %3080, i32 1632, i32 2
  %3082 = insertelement <4 x i32> %3081, i32 163756, i32 3
  %3083 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3082, i32 176)
  %3084 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %3085 = insertelement <4 x i32> undef, i32 %3084, i32 0
  %3086 = insertelement <4 x i32> %3085, i32 0, i32 1
  %3087 = insertelement <4 x i32> %3086, i32 1632, i32 2
  %3088 = insertelement <4 x i32> %3087, i32 163756, i32 3
  %3089 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3088, i32 180)
  %3090 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %3091 = insertelement <4 x i32> undef, i32 %3090, i32 0
  %3092 = insertelement <4 x i32> %3091, i32 0, i32 1
  %3093 = insertelement <4 x i32> %3092, i32 1632, i32 2
  %3094 = insertelement <4 x i32> %3093, i32 163756, i32 3
  %3095 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3094, i32 184)
  %3096 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %3097 = insertelement <4 x i32> undef, i32 %3096, i32 0
  %3098 = insertelement <4 x i32> %3097, i32 0, i32 1
  %3099 = insertelement <4 x i32> %3098, i32 1632, i32 2
  %3100 = insertelement <4 x i32> %3099, i32 163756, i32 3
  %3101 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3100, i32 188)
  %3102 = fmul nsz float %3074, %3083
  %3103 = fmul nsz float %3075, %3089
  %3104 = fadd nsz float %3102, %3103
  %3105 = fmul nsz float %3076, %3095
  %3106 = fadd nsz float %3104, %3105
  %3107 = fmul nsz float %3077, %3101
  %3108 = fadd nsz float %3106, %3107
  store float %3108, float addrspace(5)* %35
  %3109 = load float, float addrspace(5)* %35
  store float %3109, float addrspace(5)* %648
  %3110 = load float, float addrspace(5)* %651
  %3111 = load float, float addrspace(5)* %648
  store float %3110, float addrspace(5)* %31
  store float %3111, float addrspace(5)* %28
  %3112 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %3113 = insertelement <4 x i32> undef, i32 %3112, i32 0
  %3114 = insertelement <4 x i32> %3113, i32 0, i32 1
  %3115 = insertelement <4 x i32> %3114, i32 1632, i32 2
  %3116 = insertelement <4 x i32> %3115, i32 163756, i32 3
  %3117 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3116, i32 0)
  %3118 = fmul nsz float %3117, %756
  %3119 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %3120 = insertelement <4 x i32> undef, i32 %3119, i32 0
  %3121 = insertelement <4 x i32> %3120, i32 0, i32 1
  %3122 = insertelement <4 x i32> %3121, i32 1632, i32 2
  %3123 = insertelement <4 x i32> %3122, i32 163756, i32 3
  %3124 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3123, i32 4)
  %3125 = fmul nsz float %3124, %756
  store float %3118, float addrspace(5)* %27
  store float %3125, float addrspace(5)* %26
  %3126 = load float, float addrspace(5)* %27
  %3127 = load float, float addrspace(5)* %26
  store float %3126, float addrspace(5)* %681
  store float %3127, float addrspace(5)* %680
  %3128 = load float, float addrspace(5)* %599
  %3129 = load float, float addrspace(5)* %598
  %3130 = load float, float addrspace(5)* %597
  store float %3128, float addrspace(5)* %679
  store float %3129, float addrspace(5)* %678
  store float %3130, float addrspace(5)* %677
  %3131 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %3132 = insertelement <4 x i32> undef, i32 %3131, i32 0
  %3133 = insertelement <4 x i32> %3132, i32 0, i32 1
  %3134 = insertelement <4 x i32> %3133, i32 1632, i32 2
  %3135 = insertelement <4 x i32> %3134, i32 163756, i32 3
  %3136 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3135, i32 0)
  store float %3136, float addrspace(5)* %676
  %3137 = load float, float addrspace(5)* %671
  %3138 = load float, float addrspace(5)* %669
  %3139 = load float, float addrspace(5)* %668
  store float %3137, float addrspace(5)* %675
  store float %3138, float addrspace(5)* %674
  store float %3139, float addrspace(5)* %673
  %3140 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %3141 = insertelement <4 x i32> undef, i32 %3140, i32 0
  %3142 = insertelement <4 x i32> %3141, i32 0, i32 1
  %3143 = insertelement <4 x i32> %3142, i32 1632, i32 2
  %3144 = insertelement <4 x i32> %3143, i32 163756, i32 3
  %3145 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3144, i32 0)
  store float %3145, float addrspace(5)* %672
  %3146 = load float, float addrspace(5)* %651
  %3147 = load float, float addrspace(5)* %650
  %3148 = load float, float addrspace(5)* %649
  %3149 = load float, float addrspace(5)* %648
  store float %3146, float addrspace(5)* %703
  store float %3147, float addrspace(5)* %702
  store float %3148, float addrspace(5)* %701
  store float %3149, float addrspace(5)* %700
  %3150 = load float, float addrspace(5)* %39
  %3151 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %3152 = insertelement <4 x i32> undef, i32 %3151, i32 0
  %3153 = insertelement <4 x i32> %3152, i32 0, i32 1
  %3154 = insertelement <4 x i32> %3153, i32 1632, i32 2
  %3155 = insertelement <4 x i32> %3154, i32 163756, i32 3
  %3156 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3155, i32 8)
  %3157 = load float, float addrspace(5)* %35
  %3158 = fsub nsz float -0.000000e+00, %3157
  %3159 = fmul nsz float %3150, %3156
  %3160 = fadd nsz float %3159, %3158
  store float %3160, float addrspace(5)* %23
  %3161 = load float, float addrspace(5)* %23
  store float %3161, float addrspace(5)* %29
  %3162 = load float, float addrspace(5)* %43
  %3163 = fsub nsz float -0.000000e+00, %3162
  store float %3163, float addrspace(5)* %30
  %3164 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %3165 = insertelement <4 x i32> undef, i32 %3164, i32 0
  %3166 = insertelement <4 x i32> %3165, i32 0, i32 1
  %3167 = insertelement <4 x i32> %3166, i32 1632, i32 2
  %3168 = insertelement <4 x i32> %3167, i32 163756, i32 3
  %3169 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3168, i32 1600)
  %3170 = load float, float addrspace(5)* %35
  %3171 = load float, float addrspace(5)* %31
  %3172 = fmul nsz float %3169, %3170
  %3173 = fadd nsz float %3172, %3171
  %3174 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %3175 = insertelement <4 x i32> undef, i32 %3174, i32 0
  %3176 = insertelement <4 x i32> %3175, i32 0, i32 1
  %3177 = insertelement <4 x i32> %3176, i32 1632, i32 2
  %3178 = insertelement <4 x i32> %3177, i32 163756, i32 3
  %3179 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3178, i32 1604)
  %3180 = load float, float addrspace(5)* %35
  %3181 = load float, float addrspace(5)* %30
  %3182 = fmul nsz float %3179, %3180
  %3183 = fadd nsz float %3182, %3181
  store float %3173, float addrspace(5)* %31
  store float %3183, float addrspace(5)* %30
  %3184 = load float, float addrspace(5)* %31
  %3185 = load float, float addrspace(5)* %30
  %3186 = load float, float addrspace(5)* %29
  %3187 = load float, float addrspace(5)* %28
  store float %3184, float addrspace(5)* %707
  store float %3185, float addrspace(5)* %706
  store float %3186, float addrspace(5)* %705
  store float %3187, float addrspace(5)* %704
  %3188 = load float, float addrspace(5)* %683
  %3189 = load float, float addrspace(5)* %682
  %3190 = load float, float addrspace(5)* %681
  %3191 = load float, float addrspace(5)* %680
  store float %3188, float addrspace(5)* %699
  store float %3189, float addrspace(5)* %698
  store float %3190, float addrspace(5)* %697
  store float %3191, float addrspace(5)* %696
  %3192 = load float, float addrspace(5)* %679
  %3193 = load float, float addrspace(5)* %678
  %3194 = load float, float addrspace(5)* %677
  %3195 = load float, float addrspace(5)* %676
  store float %3192, float addrspace(5)* %695
  store float %3193, float addrspace(5)* %694
  store float %3194, float addrspace(5)* %693
  store float %3195, float addrspace(5)* %692
  %3196 = load float, float addrspace(5)* %675
  %3197 = load float, float addrspace(5)* %674
  %3198 = load float, float addrspace(5)* %673
  %3199 = load float, float addrspace(5)* %672
  store float %3196, float addrspace(5)* %691
  store float %3197, float addrspace(5)* %690
  store float %3198, float addrspace(5)* %689
  store float %3199, float addrspace(5)* %688
  %3200 = load float, float addrspace(5)* %651
  %3201 = load float, float addrspace(5)* %650
  %3202 = load float, float addrspace(5)* %649
  %3203 = load float, float addrspace(5)* %648
  store float %3200, float addrspace(5)* %687
  store float %3201, float addrspace(5)* %686
  store float %3202, float addrspace(5)* %685
  store float %3203, float addrspace(5)* %684
  %3204 = load float, float addrspace(5)* %707
  %3205 = load float, float addrspace(5)* %706
  %3206 = load float, float addrspace(5)* %705
  %3207 = load float, float addrspace(5)* %704
  %3208 = load float, float addrspace(5)* %703
  %3209 = load float, float addrspace(5)* %702
  %3210 = load float, float addrspace(5)* %701
  %3211 = load float, float addrspace(5)* %700
  %3212 = load float, float addrspace(5)* %699
  %3213 = load float, float addrspace(5)* %698
  %3214 = load float, float addrspace(5)* %697
  %3215 = load float, float addrspace(5)* %696
  %3216 = load float, float addrspace(5)* %695
  %3217 = load float, float addrspace(5)* %694
  %3218 = load float, float addrspace(5)* %693
  %3219 = load float, float addrspace(5)* %692
  %3220 = load float, float addrspace(5)* %691
  %3221 = load float, float addrspace(5)* %690
  %3222 = load float, float addrspace(5)* %689
  %3223 = load float, float addrspace(5)* %688
  %3224 = load float, float addrspace(5)* %687
  %3225 = load float, float addrspace(5)* %686
  %3226 = load float, float addrspace(5)* %685
  %3227 = load float, float addrspace(5)* %684
  %3228 = getelementptr [0 x <4 x i32>], [0 x <4 x i32>] addrspace(6)* %0, i32 0, i32 9, !amdgpu.uniform !0
  %3229 = load <4 x i32>, <4 x i32> addrspace(6)* %3228, !invariant.load !0
  %3230 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 0)
  %3231 = fmul nsz float %3230, %3208
  %3232 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 4)
  %3233 = fmul nsz float %3232, %3209
  %3234 = fadd nsz float %3231, %3233
  %3235 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 8)
  %3236 = fmul nsz float %3235, %3210
  %3237 = fadd nsz float %3234, %3236
  %3238 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 12)
  %3239 = fmul nsz float %3238, %3211
  %3240 = fadd nsz float %3237, %3239
  %3241 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 16)
  %3242 = fmul nsz float %3241, %3208
  %3243 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 20)
  %3244 = fmul nsz float %3243, %3209
  %3245 = fadd nsz float %3242, %3244
  %3246 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 24)
  %3247 = fmul nsz float %3246, %3210
  %3248 = fadd nsz float %3245, %3247
  %3249 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 28)
  %3250 = fmul nsz float %3249, %3211
  %3251 = fadd nsz float %3248, %3250
  %3252 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 32)
  %3253 = fmul nsz float %3252, %3208
  %3254 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 36)
  %3255 = fmul nsz float %3254, %3209
  %3256 = fadd nsz float %3253, %3255
  %3257 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 40)
  %3258 = fmul nsz float %3257, %3210
  %3259 = fadd nsz float %3256, %3258
  %3260 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 44)
  %3261 = fmul nsz float %3260, %3211
  %3262 = fadd nsz float %3259, %3261
  %3263 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 48)
  %3264 = fmul nsz float %3263, %3208
  %3265 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 52)
  %3266 = fmul nsz float %3265, %3209
  %3267 = fadd nsz float %3264, %3266
  %3268 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 56)
  %3269 = fmul nsz float %3268, %3210
  %3270 = fadd nsz float %3267, %3269
  %3271 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 60)
  %3272 = fmul nsz float %3271, %3211
  %3273 = fadd nsz float %3270, %3272
  %3274 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 64)
  %3275 = fmul nsz float %3274, %3208
  %3276 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 68)
  %3277 = fmul nsz float %3276, %3209
  %3278 = fadd nsz float %3275, %3277
  %3279 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 72)
  %3280 = fmul nsz float %3279, %3210
  %3281 = fadd nsz float %3278, %3280
  %3282 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 76)
  %3283 = fmul nsz float %3282, %3211
  %3284 = fadd nsz float %3281, %3283
  %3285 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 80)
  %3286 = fmul nsz float %3285, %3208
  %3287 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 84)
  %3288 = fmul nsz float %3287, %3209
  %3289 = fadd nsz float %3286, %3288
  %3290 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 88)
  %3291 = fmul nsz float %3290, %3210
  %3292 = fadd nsz float %3289, %3291
  %3293 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 92)
  %3294 = fmul nsz float %3293, %3211
  %3295 = fadd nsz float %3292, %3294
  %3296 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 96)
  %3297 = fmul nsz float %3296, %3208
  %3298 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 100)
  %3299 = fmul nsz float %3298, %3209
  %3300 = fadd nsz float %3297, %3299
  %3301 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 104)
  %3302 = fmul nsz float %3301, %3210
  %3303 = fadd nsz float %3300, %3302
  %3304 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 108)
  %3305 = fmul nsz float %3304, %3211
  %3306 = fadd nsz float %3303, %3305
  %3307 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 112)
  %3308 = fmul nsz float %3307, %3208
  %3309 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 116)
  %3310 = fmul nsz float %3309, %3209
  %3311 = fadd nsz float %3308, %3310
  %3312 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 120)
  %3313 = fmul nsz float %3312, %3210
  %3314 = fadd nsz float %3311, %3313
  %3315 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %3229, i32 124)
  %3316 = fmul nsz float %3315, %3211
  %3317 = fadd nsz float %3314, %3316
  call void @llvm.amdgcn.exp.f32(i32 12, i32 15, float %3204, float %3205, float %3206, float %3207, i1 false, i1 false) #4
  call void @llvm.amdgcn.exp.f32(i32 13, i32 15, float %3240, float %3251, float %3262, float %3273, i1 false, i1 false) #4
  call void @llvm.amdgcn.exp.f32(i32 14, i32 15, float %3284, float %3295, float %3306, float %3317, i1 true, i1 false) #4
  call void @llvm.amdgcn.exp.f32(i32 32, i32 15, float %3212, float %3213, float %3214, float %3215, i1 false, i1 false) #4
  call void @llvm.amdgcn.exp.f32(i32 33, i32 15, float %3216, float %3217, float %3218, float %3219, i1 false, i1 false) #4
  call void @llvm.amdgcn.exp.f32(i32 34, i32 15, float %3220, float %3221, float %3222, float %3223, i1 false, i1 false) #4
  call void @llvm.amdgcn.exp.f32(i32 35, i32 15, float %3224, float %3225, float %3226, float %3227, i1 false, i1 false) #4
  ret void
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.buffer.load.format.v4f32(<4 x i32>, i32, i32, i1, i1) #1

; Function Attrs: nounwind readonly
declare <2 x float> @llvm.amdgcn.buffer.load.format.v2f32(<4 x i32>, i32, i32, i1, i1) #1

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.buffer.load.format.f32(<4 x i32>, i32, i32, i1, i1) #1

; Function Attrs: nounwind readnone
declare float @llvm.SI.load.const.v4i32(<4 x i32>, i32) #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.sqrt.f32(float) #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.log2.f32(float) #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.exp2.f32(float) #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.maxnum.f32(float, float) #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.pow.f32(float, float) #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.minnum.f32(float, float) #3

; Function Attrs: nounwind
declare void @llvm.amdgcn.exp.f32(i32, i32, float, float, float, float, i1, i1) #4

attributes #0 = { "no-signed-zeros-fp-math"="true" }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!0 = !{}
!1 = !{float 2.500000e+00}
radeonsi: Compiling shader 1
FRAG
DCL IN[0], GENERIC[0], PERSPECTIVE
DCL IN[1], GENERIC[1], PERSPECTIVE
DCL IN[2], GENERIC[2], PERSPECTIVE
DCL IN[3], GENERIC[3], PERSPECTIVE
DCL OUT[0], COLOR
DCL SAMP[0]
DCL SVIEW[0], 2D, FLOAT
DCL CONST[0][0..30]
DCL TEMP[0..19], LOCAL
IMM[0] FLT32 {   -1.0000,     1.0000,     0.0000,     0.0000}
  0: MOV TEMP[0].xy, IN[0].xyyy
  1: TEX TEMP[1], TEMP[0], SAMP[0], 2D
  2: ADD TEMP[2].x, TEMP[1].wwww, IMM[0].xxxx
  3: MAD TEMP[2].x, CONST[0][20].wwww, TEMP[2].xxxx, IMM[0].yyyy
  4: MUL TEMP[2].x, TEMP[2].xxxx, CONST[0][1].wwww
  5: MAD TEMP[3].x, TEMP[2].xxxx, IN[2].wwww, -TEMP[2].xxxx
  6: MAD TEMP[2].x, CONST[0][12].wwww, TEMP[3].xxxx, TEMP[2].xxxx
  7: MOV TEMP[4].x, |CONST[0][12].yyyy|
  8: MUL TEMP[5].x, CONST[0][29].wwww, IN[3].zzzz
  9: FSGE TEMP[6].x, -TEMP[4].xxxx, IMM[0].zzzz
 10: UCMP TEMP[7].x, TEMP[6].xxxx, TEMP[2].xxxx, TEMP[7]
 11: NOT TEMP[8].x, TEMP[6].xxxx
 12: UCMP TEMP[7].x, TEMP[8].xxxx, TEMP[5].xxxx, TEMP[7]
 13: MOV OUT[0].w, TEMP[7].xxxx
 14: ADD TEMP[9].x, TEMP[1].wwww, CONST[0][12].xxxx
 15: MOV_SAT TEMP[10].x, TEMP[9].xxxx
 16: ADD TEMP[2].xyz, IMM[0].xxxx, CONST[0][1].xyzz
 17: MAD TEMP[2].xyz, TEMP[10].xxxx, TEMP[2].xyzz, IMM[0].yyyy
 18: MUL TEMP[11].xyz, TEMP[1].xyzz, TEMP[2].xyzz
 19: MUL TEMP[2].xyz, TEMP[11].xyzz, CONST[0][30].xxxx
 20: MAD TEMP[11].xyz, TEMP[11].xyzz, -CONST[0][30].xxxx, CONST[0][29].xyzz
 21: ADD TEMP[12].xyz, CONST[0][20].xyzz, -IN[1].xyzz
 22: DP3 TEMP[13].x, TEMP[12].xyzz, TEMP[12].xyzz
 23: RSQ TEMP[14].x, TEMP[13].xxxx
 24: RCP TEMP[15].x, TEMP[14].xxxx
 25: MAD TEMP[16].x, TEMP[15].xxxx, CONST[0][21].wwww, CONST[0][21].xxxx
 26: MOV_SAT TEMP[17].x, TEMP[16].xxxx
 27: MIN TEMP[18].x, TEMP[17].xxxx, CONST[0][21].zzzz
 28: MUL TEMP[19].x, TEMP[18].xxxx, TEMP[18].xxxx
 29: MAD OUT[0].xyz, TEMP[19].xxxx, TEMP[11].xyzz, TEMP[2].xyzz
 30: END
; ModuleID = 'tgsi'
source_filename = "tgsi"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5"
target triple = "amdgcn--"

define amdgpu_ps <{ i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }> @main([0 x <4 x i32>] addrspace(6)* inreg noalias dereferenceable(18446744073709551615), [0 x <8 x i32>] addrspace(6)* inreg noalias dereferenceable(18446744073709551615), [0 x float] addrspace(6)* inreg noalias dereferenceable(18446744073709551615), [0 x <8 x i32>] addrspace(6)* inreg noalias dereferenceable(18446744073709551615), float inreg, i32 inreg, <2 x i32>, <2 x i32>, <2 x i32>, <3 x i32>, <2 x i32>, <2 x i32>, <2 x i32>, float, float, float, float, float, i32, i32, float, i32) #0 {
main_body:
  %22 = alloca float, addrspace(5)
  %23 = alloca float, addrspace(5)
  %24 = alloca float, addrspace(5)
  %25 = alloca float, addrspace(5)
  %26 = alloca float, addrspace(5)
  %27 = alloca float, addrspace(5)
  %28 = alloca float, addrspace(5)
  %29 = alloca float, addrspace(5)
  %30 = alloca float, addrspace(5)
  %31 = alloca float, addrspace(5)
  %32 = alloca float, addrspace(5)
  %33 = alloca float, addrspace(5)
  %34 = alloca float, addrspace(5)
  %35 = alloca float, addrspace(5)
  %36 = alloca float, addrspace(5)
  %37 = alloca float, addrspace(5)
  %38 = alloca float, addrspace(5)
  %39 = alloca float, addrspace(5)
  %40 = alloca float, addrspace(5)
  %41 = alloca float, addrspace(5)
  %42 = alloca float, addrspace(5)
  %43 = alloca float, addrspace(5)
  %44 = alloca float, addrspace(5)
  %45 = alloca float, addrspace(5)
  %46 = alloca float, addrspace(5)
  %47 = alloca float, addrspace(5)
  %48 = alloca float, addrspace(5)
  %49 = alloca float, addrspace(5)
  %50 = alloca float, addrspace(5)
  %51 = alloca float, addrspace(5)
  %52 = alloca float, addrspace(5)
  %53 = alloca float, addrspace(5)
  %54 = alloca float, addrspace(5)
  %55 = alloca float, addrspace(5)
  %56 = alloca float, addrspace(5)
  %57 = alloca float, addrspace(5)
  %58 = alloca float, addrspace(5)
  %59 = alloca float, addrspace(5)
  %60 = alloca float, addrspace(5)
  %61 = alloca float, addrspace(5)
  %62 = alloca float, addrspace(5)
  %63 = alloca float, addrspace(5)
  %64 = alloca float, addrspace(5)
  %65 = alloca float, addrspace(5)
  %66 = alloca float, addrspace(5)
  %67 = alloca float, addrspace(5)
  %68 = alloca float, addrspace(5)
  %69 = alloca float, addrspace(5)
  %70 = alloca float, addrspace(5)
  %71 = alloca float, addrspace(5)
  %72 = alloca float, addrspace(5)
  %73 = alloca float, addrspace(5)
  %74 = alloca float, addrspace(5)
  %75 = alloca float, addrspace(5)
  %76 = alloca float, addrspace(5)
  %77 = alloca float, addrspace(5)
  %78 = alloca float, addrspace(5)
  %79 = alloca float, addrspace(5)
  %80 = alloca float, addrspace(5)
  %81 = alloca float, addrspace(5)
  %82 = alloca float, addrspace(5)
  %83 = alloca float, addrspace(5)
  %84 = alloca float, addrspace(5)
  %85 = alloca float, addrspace(5)
  %86 = alloca float, addrspace(5)
  %87 = alloca float, addrspace(5)
  %88 = alloca float, addrspace(5)
  %89 = alloca float, addrspace(5)
  %90 = alloca float, addrspace(5)
  %91 = alloca float, addrspace(5)
  %92 = alloca float, addrspace(5)
  %93 = alloca float, addrspace(5)
  %94 = alloca float, addrspace(5)
  %95 = alloca float, addrspace(5)
  %96 = alloca float, addrspace(5)
  %97 = alloca float, addrspace(5)
  %98 = alloca float, addrspace(5)
  %99 = alloca float, addrspace(5)
  %100 = alloca float, addrspace(5)
  %101 = alloca float, addrspace(5)
  %102 = alloca float, addrspace(5)
  %103 = alloca float, addrspace(5)
  %104 = alloca float, addrspace(5)
  %105 = alloca float, addrspace(5)
  %106 = bitcast <2 x i32> %7 to <2 x float>
  %107 = extractelement <2 x float> %106, i32 0
  %108 = extractelement <2 x float> %106, i32 1
  %109 = call nsz float @llvm.amdgcn.interp.p1(float %107, i32 0, i32 0, i32 %5) #3
  %110 = call nsz float @llvm.amdgcn.interp.p2(float %109, float %108, i32 0, i32 0, i32 %5) #3
  %111 = call nsz float @llvm.amdgcn.interp.p1(float %107, i32 1, i32 0, i32 %5) #3
  %112 = call nsz float @llvm.amdgcn.interp.p2(float %111, float %108, i32 1, i32 0, i32 %5) #3
  %113 = call nsz float @llvm.amdgcn.interp.p1(float %107, i32 2, i32 0, i32 %5) #3
  %114 = call nsz float @llvm.amdgcn.interp.p2(float %113, float %108, i32 2, i32 0, i32 %5) #3
  %115 = call nsz float @llvm.amdgcn.interp.p1(float %107, i32 3, i32 0, i32 %5) #3
  %116 = call nsz float @llvm.amdgcn.interp.p2(float %115, float %108, i32 3, i32 0, i32 %5) #3
  %117 = bitcast <2 x i32> %7 to <2 x float>
  %118 = extractelement <2 x float> %117, i32 0
  %119 = extractelement <2 x float> %117, i32 1
  %120 = call nsz float @llvm.amdgcn.interp.p1(float %118, i32 0, i32 0, i32 %5) #3
  %121 = call nsz float @llvm.amdgcn.interp.p2(float %120, float %119, i32 0, i32 0, i32 %5) #3
  %122 = call nsz float @llvm.amdgcn.interp.p1(float %118, i32 1, i32 0, i32 %5) #3
  %123 = call nsz float @llvm.amdgcn.interp.p2(float %122, float %119, i32 1, i32 0, i32 %5) #3
  %124 = call nsz float @llvm.amdgcn.interp.p1(float %118, i32 2, i32 0, i32 %5) #3
  %125 = call nsz float @llvm.amdgcn.interp.p2(float %124, float %119, i32 2, i32 0, i32 %5) #3
  %126 = call nsz float @llvm.amdgcn.interp.p1(float %118, i32 3, i32 0, i32 %5) #3
  %127 = call nsz float @llvm.amdgcn.interp.p2(float %126, float %119, i32 3, i32 0, i32 %5) #3
  store float %110, float addrspace(5)* %101
  store float %123, float addrspace(5)* %100
  %128 = getelementptr [0 x <8 x i32>], [0 x <8 x i32>] addrspace(6)* %3, i32 0, i32 16, !amdgpu.uniform !0
  %129 = load <8 x i32>, <8 x i32> addrspace(6)* %128, !invariant.load !0
  %130 = bitcast [0 x <8 x i32>] addrspace(6)* %3 to [0 x <4 x i32>] addrspace(6)*
  %131 = getelementptr [0 x <4 x i32>], [0 x <4 x i32>] addrspace(6)* %130, i32 0, i32 35, !amdgpu.uniform !0
  %132 = load <4 x i32>, <4 x i32> addrspace(6)* %131, !invariant.load !0
  %133 = load float, float addrspace(5)* %98
  %134 = load float, float addrspace(5)* %101
  %135 = load float, float addrspace(5)* %100
  %136 = load float, float addrspace(5)* %99
  %137 = bitcast float %134 to i32
  %138 = bitcast float %135 to i32
  %139 = insertelement <2 x i32> undef, i32 %137, i32 0
  %140 = insertelement <2 x i32> %139, i32 %138, i32 1
  %141 = bitcast <2 x i32> %140 to <2 x float>
  %142 = call nsz <4 x float> @llvm.amdgcn.image.sample.v4f32.v2f32.v8i32(<2 x float> %141, <8 x i32> %129, <4 x i32> %132, i32 15, i1 false, i1 false, i1 false, i1 false, i1 false) #3
  %143 = extractelement <4 x float> %142, i32 0
  %144 = extractelement <4 x float> %142, i32 1
  %145 = extractelement <4 x float> %142, i32 2
  %146 = extractelement <4 x float> %142, i32 3
  store float %143, float addrspace(5)* %97
  store float %144, float addrspace(5)* %96
  store float %145, float addrspace(5)* %95
  store float %146, float addrspace(5)* %94
  %147 = load float, float addrspace(5)* %94
  %148 = fadd nsz float %147, -1.000000e+00
  store float %148, float addrspace(5)* %93
  %149 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %150 = insertelement <4 x i32> undef, i32 %149, i32 0
  %151 = insertelement <4 x i32> %150, i32 0, i32 1
  %152 = insertelement <4 x i32> %151, i32 496, i32 2
  %153 = insertelement <4 x i32> %152, i32 163756, i32 3
  %154 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %153, i32 332)
  %155 = load float, float addrspace(5)* %93
  %156 = fmul nsz float %154, %155
  %157 = fadd nsz float %156, 1.000000e+00
  store float %157, float addrspace(5)* %93
  %158 = load float, float addrspace(5)* %93
  %159 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %160 = insertelement <4 x i32> undef, i32 %159, i32 0
  %161 = insertelement <4 x i32> %160, i32 0, i32 1
  %162 = insertelement <4 x i32> %161, i32 496, i32 2
  %163 = insertelement <4 x i32> %162, i32 163756, i32 3
  %164 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %163, i32 28)
  %165 = fmul nsz float %158, %164
  store float %165, float addrspace(5)* %93
  %166 = load float, float addrspace(5)* %93
  %167 = bitcast <2 x i32> %7 to <2 x float>
  %168 = extractelement <2 x float> %167, i32 0
  %169 = extractelement <2 x float> %167, i32 1
  %170 = call nsz float @llvm.amdgcn.interp.p1(float %168, i32 0, i32 2, i32 %5) #3
  %171 = call nsz float @llvm.amdgcn.interp.p2(float %170, float %169, i32 0, i32 2, i32 %5) #3
  %172 = call nsz float @llvm.amdgcn.interp.p1(float %168, i32 1, i32 2, i32 %5) #3
  %173 = call nsz float @llvm.amdgcn.interp.p2(float %172, float %169, i32 1, i32 2, i32 %5) #3
  %174 = call nsz float @llvm.amdgcn.interp.p1(float %168, i32 2, i32 2, i32 %5) #3
  %175 = call nsz float @llvm.amdgcn.interp.p2(float %174, float %169, i32 2, i32 2, i32 %5) #3
  %176 = call nsz float @llvm.amdgcn.interp.p1(float %168, i32 3, i32 2, i32 %5) #3
  %177 = call nsz float @llvm.amdgcn.interp.p2(float %176, float %169, i32 3, i32 2, i32 %5) #3
  %178 = load float, float addrspace(5)* %93
  %179 = fsub nsz float -0.000000e+00, %178
  %180 = fmul nsz float %166, %177
  %181 = fadd nsz float %180, %179
  store float %181, float addrspace(5)* %89
  %182 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %183 = insertelement <4 x i32> undef, i32 %182, i32 0
  %184 = insertelement <4 x i32> %183, i32 0, i32 1
  %185 = insertelement <4 x i32> %184, i32 496, i32 2
  %186 = insertelement <4 x i32> %185, i32 163756, i32 3
  %187 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %186, i32 204)
  %188 = load float, float addrspace(5)* %89
  %189 = load float, float addrspace(5)* %93
  %190 = fmul nsz float %187, %188
  %191 = fadd nsz float %190, %189
  store float %191, float addrspace(5)* %93
  %192 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %193 = insertelement <4 x i32> undef, i32 %192, i32 0
  %194 = insertelement <4 x i32> %193, i32 0, i32 1
  %195 = insertelement <4 x i32> %194, i32 496, i32 2
  %196 = insertelement <4 x i32> %195, i32 163756, i32 3
  %197 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %196, i32 196)
  %198 = call nsz float @llvm.fabs.f32(float %197) #4
  store float %198, float addrspace(5)* %85
  %199 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %200 = insertelement <4 x i32> undef, i32 %199, i32 0
  %201 = insertelement <4 x i32> %200, i32 0, i32 1
  %202 = insertelement <4 x i32> %201, i32 496, i32 2
  %203 = insertelement <4 x i32> %202, i32 163756, i32 3
  %204 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %203, i32 476)
  %205 = bitcast <2 x i32> %7 to <2 x float>
  %206 = extractelement <2 x float> %205, i32 0
  %207 = extractelement <2 x float> %205, i32 1
  %208 = call nsz float @llvm.amdgcn.interp.p1(float %206, i32 0, i32 3, i32 %5) #3
  %209 = call nsz float @llvm.amdgcn.interp.p2(float %208, float %207, i32 0, i32 3, i32 %5) #3
  %210 = call nsz float @llvm.amdgcn.interp.p1(float %206, i32 1, i32 3, i32 %5) #3
  %211 = call nsz float @llvm.amdgcn.interp.p2(float %210, float %207, i32 1, i32 3, i32 %5) #3
  %212 = call nsz float @llvm.amdgcn.interp.p1(float %206, i32 2, i32 3, i32 %5) #3
  %213 = call nsz float @llvm.amdgcn.interp.p2(float %212, float %207, i32 2, i32 3, i32 %5) #3
  %214 = call nsz float @llvm.amdgcn.interp.p1(float %206, i32 3, i32 3, i32 %5) #3
  %215 = call nsz float @llvm.amdgcn.interp.p2(float %214, float %207, i32 3, i32 3, i32 %5) #3
  %216 = fmul nsz float %204, %213
  store float %216, float addrspace(5)* %81
  %217 = load float, float addrspace(5)* %85
  %218 = fsub nsz float -0.000000e+00, %217
  %219 = fcmp nsz oge float %218, 0.000000e+00
  %220 = sext i1 %219 to i32
  %221 = bitcast i32 %220 to float
  store float %221, float addrspace(5)* %77
  %222 = load float, float addrspace(5)* %77
  %223 = load float, float addrspace(5)* %93
  %224 = load float, float addrspace(5)* %73
  %225 = bitcast float %222 to i32
  %226 = icmp ne i32 %225, 0
  %227 = select i1 %226, float %223, float %224
  store float %227, float addrspace(5)* %73
  %228 = load float, float addrspace(5)* %77
  %229 = bitcast float %228 to i32
  %230 = xor i32 %229, -1
  %231 = bitcast i32 %230 to float
  store float %231, float addrspace(5)* %69
  %232 = load float, float addrspace(5)* %69
  %233 = load float, float addrspace(5)* %81
  %234 = load float, float addrspace(5)* %73
  %235 = bitcast float %232 to i32
  %236 = icmp ne i32 %235, 0
  %237 = select i1 %236, float %233, float %234
  store float %237, float addrspace(5)* %73
  %238 = load float, float addrspace(5)* %73
  store float %238, float addrspace(5)* %102
  %239 = load float, float addrspace(5)* %94
  %240 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %241 = insertelement <4 x i32> undef, i32 %240, i32 0
  %242 = insertelement <4 x i32> %241, i32 0, i32 1
  %243 = insertelement <4 x i32> %242, i32 496, i32 2
  %244 = insertelement <4 x i32> %243, i32 163756, i32 3
  %245 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %244, i32 192)
  %246 = fadd nsz float %239, %245
  store float %246, float addrspace(5)* %65
  %247 = load float, float addrspace(5)* %65
  %248 = call nsz float @llvm.maxnum.f32(float %247, float 0.000000e+00) #3
  %249 = call nsz float @llvm.minnum.f32(float %248, float 1.000000e+00) #3
  store float %249, float addrspace(5)* %61
  %250 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %251 = insertelement <4 x i32> undef, i32 %250, i32 0
  %252 = insertelement <4 x i32> %251, i32 0, i32 1
  %253 = insertelement <4 x i32> %252, i32 496, i32 2
  %254 = insertelement <4 x i32> %253, i32 163756, i32 3
  %255 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %254, i32 16)
  %256 = fadd nsz float -1.000000e+00, %255
  %257 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %258 = insertelement <4 x i32> undef, i32 %257, i32 0
  %259 = insertelement <4 x i32> %258, i32 0, i32 1
  %260 = insertelement <4 x i32> %259, i32 496, i32 2
  %261 = insertelement <4 x i32> %260, i32 163756, i32 3
  %262 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %261, i32 20)
  %263 = fadd nsz float -1.000000e+00, %262
  %264 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %265 = insertelement <4 x i32> undef, i32 %264, i32 0
  %266 = insertelement <4 x i32> %265, i32 0, i32 1
  %267 = insertelement <4 x i32> %266, i32 496, i32 2
  %268 = insertelement <4 x i32> %267, i32 163756, i32 3
  %269 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %268, i32 24)
  %270 = fadd nsz float -1.000000e+00, %269
  store float %256, float addrspace(5)* %93
  store float %263, float addrspace(5)* %92
  store float %270, float addrspace(5)* %91
  %271 = load float, float addrspace(5)* %61
  %272 = load float, float addrspace(5)* %93
  %273 = fmul nsz float %271, %272
  %274 = fadd nsz float %273, 1.000000e+00
  %275 = load float, float addrspace(5)* %61
  %276 = load float, float addrspace(5)* %92
  %277 = fmul nsz float %275, %276
  %278 = fadd nsz float %277, 1.000000e+00
  %279 = load float, float addrspace(5)* %61
  %280 = load float, float addrspace(5)* %91
  %281 = fmul nsz float %279, %280
  %282 = fadd nsz float %281, 1.000000e+00
  store float %274, float addrspace(5)* %93
  store float %278, float addrspace(5)* %92
  store float %282, float addrspace(5)* %91
  %283 = load float, float addrspace(5)* %97
  %284 = load float, float addrspace(5)* %93
  %285 = fmul nsz float %283, %284
  %286 = load float, float addrspace(5)* %96
  %287 = load float, float addrspace(5)* %92
  %288 = fmul nsz float %286, %287
  %289 = load float, float addrspace(5)* %95
  %290 = load float, float addrspace(5)* %91
  %291 = fmul nsz float %289, %290
  store float %285, float addrspace(5)* %57
  store float %288, float addrspace(5)* %56
  store float %291, float addrspace(5)* %55
  %292 = load float, float addrspace(5)* %57
  %293 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %294 = insertelement <4 x i32> undef, i32 %293, i32 0
  %295 = insertelement <4 x i32> %294, i32 0, i32 1
  %296 = insertelement <4 x i32> %295, i32 496, i32 2
  %297 = insertelement <4 x i32> %296, i32 163756, i32 3
  %298 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %297, i32 480)
  %299 = fmul nsz float %292, %298
  %300 = load float, float addrspace(5)* %56
  %301 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %302 = insertelement <4 x i32> undef, i32 %301, i32 0
  %303 = insertelement <4 x i32> %302, i32 0, i32 1
  %304 = insertelement <4 x i32> %303, i32 496, i32 2
  %305 = insertelement <4 x i32> %304, i32 163756, i32 3
  %306 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %305, i32 480)
  %307 = fmul nsz float %300, %306
  %308 = load float, float addrspace(5)* %55
  %309 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %310 = insertelement <4 x i32> undef, i32 %309, i32 0
  %311 = insertelement <4 x i32> %310, i32 0, i32 1
  %312 = insertelement <4 x i32> %311, i32 496, i32 2
  %313 = insertelement <4 x i32> %312, i32 163756, i32 3
  %314 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %313, i32 480)
  %315 = fmul nsz float %308, %314
  store float %299, float addrspace(5)* %93
  store float %307, float addrspace(5)* %92
  store float %315, float addrspace(5)* %91
  %316 = load float, float addrspace(5)* %57
  %317 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %318 = insertelement <4 x i32> undef, i32 %317, i32 0
  %319 = insertelement <4 x i32> %318, i32 0, i32 1
  %320 = insertelement <4 x i32> %319, i32 496, i32 2
  %321 = insertelement <4 x i32> %320, i32 163756, i32 3
  %322 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %321, i32 480)
  %323 = fsub nsz float -0.000000e+00, %322
  %324 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %325 = insertelement <4 x i32> undef, i32 %324, i32 0
  %326 = insertelement <4 x i32> %325, i32 0, i32 1
  %327 = insertelement <4 x i32> %326, i32 496, i32 2
  %328 = insertelement <4 x i32> %327, i32 163756, i32 3
  %329 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %328, i32 464)
  %330 = fmul nsz float %316, %323
  %331 = fadd nsz float %330, %329
  %332 = load float, float addrspace(5)* %56
  %333 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %334 = insertelement <4 x i32> undef, i32 %333, i32 0
  %335 = insertelement <4 x i32> %334, i32 0, i32 1
  %336 = insertelement <4 x i32> %335, i32 496, i32 2
  %337 = insertelement <4 x i32> %336, i32 163756, i32 3
  %338 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %337, i32 480)
  %339 = fsub nsz float -0.000000e+00, %338
  %340 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %341 = insertelement <4 x i32> undef, i32 %340, i32 0
  %342 = insertelement <4 x i32> %341, i32 0, i32 1
  %343 = insertelement <4 x i32> %342, i32 496, i32 2
  %344 = insertelement <4 x i32> %343, i32 163756, i32 3
  %345 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %344, i32 468)
  %346 = fmul nsz float %332, %339
  %347 = fadd nsz float %346, %345
  %348 = load float, float addrspace(5)* %55
  %349 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %350 = insertelement <4 x i32> undef, i32 %349, i32 0
  %351 = insertelement <4 x i32> %350, i32 0, i32 1
  %352 = insertelement <4 x i32> %351, i32 496, i32 2
  %353 = insertelement <4 x i32> %352, i32 163756, i32 3
  %354 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %353, i32 480)
  %355 = fsub nsz float -0.000000e+00, %354
  %356 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %357 = insertelement <4 x i32> undef, i32 %356, i32 0
  %358 = insertelement <4 x i32> %357, i32 0, i32 1
  %359 = insertelement <4 x i32> %358, i32 496, i32 2
  %360 = insertelement <4 x i32> %359, i32 163756, i32 3
  %361 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %360, i32 472)
  %362 = fmul nsz float %348, %355
  %363 = fadd nsz float %362, %361
  store float %331, float addrspace(5)* %57
  store float %347, float addrspace(5)* %56
  store float %363, float addrspace(5)* %55
  %364 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %365 = insertelement <4 x i32> undef, i32 %364, i32 0
  %366 = insertelement <4 x i32> %365, i32 0, i32 1
  %367 = insertelement <4 x i32> %366, i32 496, i32 2
  %368 = insertelement <4 x i32> %367, i32 163756, i32 3
  %369 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %368, i32 320)
  %370 = bitcast <2 x i32> %7 to <2 x float>
  %371 = extractelement <2 x float> %370, i32 0
  %372 = extractelement <2 x float> %370, i32 1
  %373 = call nsz float @llvm.amdgcn.interp.p1(float %371, i32 0, i32 1, i32 %5) #3
  %374 = call nsz float @llvm.amdgcn.interp.p2(float %373, float %372, i32 0, i32 1, i32 %5) #3
  %375 = call nsz float @llvm.amdgcn.interp.p1(float %371, i32 1, i32 1, i32 %5) #3
  %376 = call nsz float @llvm.amdgcn.interp.p2(float %375, float %372, i32 1, i32 1, i32 %5) #3
  %377 = call nsz float @llvm.amdgcn.interp.p1(float %371, i32 2, i32 1, i32 %5) #3
  %378 = call nsz float @llvm.amdgcn.interp.p2(float %377, float %372, i32 2, i32 1, i32 %5) #3
  %379 = call nsz float @llvm.amdgcn.interp.p1(float %371, i32 3, i32 1, i32 %5) #3
  %380 = call nsz float @llvm.amdgcn.interp.p2(float %379, float %372, i32 3, i32 1, i32 %5) #3
  %381 = fsub nsz float -0.000000e+00, %374
  %382 = fadd nsz float %369, %381
  %383 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %384 = insertelement <4 x i32> undef, i32 %383, i32 0
  %385 = insertelement <4 x i32> %384, i32 0, i32 1
  %386 = insertelement <4 x i32> %385, i32 496, i32 2
  %387 = insertelement <4 x i32> %386, i32 163756, i32 3
  %388 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %387, i32 324)
  %389 = bitcast <2 x i32> %7 to <2 x float>
  %390 = extractelement <2 x float> %389, i32 0
  %391 = extractelement <2 x float> %389, i32 1
  %392 = call nsz float @llvm.amdgcn.interp.p1(float %390, i32 0, i32 1, i32 %5) #3
  %393 = call nsz float @llvm.amdgcn.interp.p2(float %392, float %391, i32 0, i32 1, i32 %5) #3
  %394 = call nsz float @llvm.amdgcn.interp.p1(float %390, i32 1, i32 1, i32 %5) #3
  %395 = call nsz float @llvm.amdgcn.interp.p2(float %394, float %391, i32 1, i32 1, i32 %5) #3
  %396 = call nsz float @llvm.amdgcn.interp.p1(float %390, i32 2, i32 1, i32 %5) #3
  %397 = call nsz float @llvm.amdgcn.interp.p2(float %396, float %391, i32 2, i32 1, i32 %5) #3
  %398 = call nsz float @llvm.amdgcn.interp.p1(float %390, i32 3, i32 1, i32 %5) #3
  %399 = call nsz float @llvm.amdgcn.interp.p2(float %398, float %391, i32 3, i32 1, i32 %5) #3
  %400 = fsub nsz float -0.000000e+00, %395
  %401 = fadd nsz float %388, %400
  %402 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %403 = insertelement <4 x i32> undef, i32 %402, i32 0
  %404 = insertelement <4 x i32> %403, i32 0, i32 1
  %405 = insertelement <4 x i32> %404, i32 496, i32 2
  %406 = insertelement <4 x i32> %405, i32 163756, i32 3
  %407 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %406, i32 328)
  %408 = bitcast <2 x i32> %7 to <2 x float>
  %409 = extractelement <2 x float> %408, i32 0
  %410 = extractelement <2 x float> %408, i32 1
  %411 = call nsz float @llvm.amdgcn.interp.p1(float %409, i32 0, i32 1, i32 %5) #3
  %412 = call nsz float @llvm.amdgcn.interp.p2(float %411, float %410, i32 0, i32 1, i32 %5) #3
  %413 = call nsz float @llvm.amdgcn.interp.p1(float %409, i32 1, i32 1, i32 %5) #3
  %414 = call nsz float @llvm.amdgcn.interp.p2(float %413, float %410, i32 1, i32 1, i32 %5) #3
  %415 = call nsz float @llvm.amdgcn.interp.p1(float %409, i32 2, i32 1, i32 %5) #3
  %416 = call nsz float @llvm.amdgcn.interp.p2(float %415, float %410, i32 2, i32 1, i32 %5) #3
  %417 = call nsz float @llvm.amdgcn.interp.p1(float %409, i32 3, i32 1, i32 %5) #3
  %418 = call nsz float @llvm.amdgcn.interp.p2(float %417, float %410, i32 3, i32 1, i32 %5) #3
  %419 = fsub nsz float -0.000000e+00, %416
  %420 = fadd nsz float %407, %419
  store float %382, float addrspace(5)* %53
  store float %401, float addrspace(5)* %52
  store float %420, float addrspace(5)* %51
  %421 = load float, float addrspace(5)* %53
  %422 = load float, float addrspace(5)* %52
  %423 = load float, float addrspace(5)* %51
  %424 = load float, float addrspace(5)* %53
  %425 = load float, float addrspace(5)* %52
  %426 = load float, float addrspace(5)* %51
  %427 = fmul nsz float %421, %424
  %428 = fmul nsz float %422, %425
  %429 = fadd nsz float %428, %427
  %430 = fmul nsz float %423, %426
  %431 = fadd nsz float %429, %430
  store float %431, float addrspace(5)* %49
  %432 = load float, float addrspace(5)* %49
  %433 = call nsz float @llvm.sqrt.f32(float %432) #3
  %434 = fdiv nsz float 1.000000e+00, %433, !fpmath !1
  store float %434, float addrspace(5)* %45
  %435 = load float, float addrspace(5)* %45
  %436 = fdiv nsz float 1.000000e+00, %435, !fpmath !1
  store float %436, float addrspace(5)* %41
  %437 = load float, float addrspace(5)* %41
  %438 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %439 = insertelement <4 x i32> undef, i32 %438, i32 0
  %440 = insertelement <4 x i32> %439, i32 0, i32 1
  %441 = insertelement <4 x i32> %440, i32 496, i32 2
  %442 = insertelement <4 x i32> %441, i32 163756, i32 3
  %443 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %442, i32 348)
  %444 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %445 = insertelement <4 x i32> undef, i32 %444, i32 0
  %446 = insertelement <4 x i32> %445, i32 0, i32 1
  %447 = insertelement <4 x i32> %446, i32 496, i32 2
  %448 = insertelement <4 x i32> %447, i32 163756, i32 3
  %449 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %448, i32 336)
  %450 = fmul nsz float %437, %443
  %451 = fadd nsz float %450, %449
  store float %451, float addrspace(5)* %37
  %452 = load float, float addrspace(5)* %37
  %453 = call nsz float @llvm.maxnum.f32(float %452, float 0.000000e+00) #3
  %454 = call nsz float @llvm.minnum.f32(float %453, float 1.000000e+00) #3
  store float %454, float addrspace(5)* %33
  %455 = load float, float addrspace(5)* %33
  %456 = ptrtoint [0 x float] addrspace(6)* %2 to i32
  %457 = insertelement <4 x i32> undef, i32 %456, i32 0
  %458 = insertelement <4 x i32> %457, i32 0, i32 1
  %459 = insertelement <4 x i32> %458, i32 496, i32 2
  %460 = insertelement <4 x i32> %459, i32 163756, i32 3
  %461 = call nsz float @llvm.SI.load.const.v4i32(<4 x i32> %460, i32 344)
  %462 = call nsz float @llvm.minnum.f32(float %455, float %461) #3
  store float %462, float addrspace(5)* %29
  %463 = load float, float addrspace(5)* %29
  %464 = load float, float addrspace(5)* %29
  %465 = fmul nsz float %463, %464
  store float %465, float addrspace(5)* %25
  %466 = load float, float addrspace(5)* %25
  %467 = load float, float addrspace(5)* %57
  %468 = load float, float addrspace(5)* %93
  %469 = fmul nsz float %466, %467
  %470 = fadd nsz float %469, %468
  %471 = load float, float addrspace(5)* %25
  %472 = load float, float addrspace(5)* %56
  %473 = load float, float addrspace(5)* %92
  %474 = fmul nsz float %471, %472
  %475 = fadd nsz float %474, %473
  %476 = load float, float addrspace(5)* %25
  %477 = load float, float addrspace(5)* %55
  %478 = load float, float addrspace(5)* %91
  %479 = fmul nsz float %476, %477
  %480 = fadd nsz float %479, %478
  store float %470, float addrspace(5)* %105
  store float %475, float addrspace(5)* %104
  store float %480, float addrspace(5)* %103
  %481 = load float, float addrspace(5)* %105
  %482 = load float, float addrspace(5)* %104
  %483 = load float, float addrspace(5)* %103
  %484 = load float, float addrspace(5)* %102
  %485 = bitcast float %4 to i32
  %486 = insertvalue <{ i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }> undef, i32 %485, 4
  %487 = insertvalue <{ i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }> %486, float %481, 5
  %488 = insertvalue <{ i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }> %487, float %482, 6
  %489 = insertvalue <{ i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }> %488, float %483, 7
  %490 = insertvalue <{ i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }> %489, float %484, 8
  %491 = insertvalue <{ i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }> %490, float %20, 19
  ret <{ i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }> %491
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.amdgcn.interp.p1(float, i32, i32, i32) #1

; Function Attrs: nounwind readnone speculatable
declare float @llvm.amdgcn.interp.p2(float, float, i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.sample.v4f32.v2f32.v8i32(<2 x float>, <8 x i32>, <4 x i32>, i32, i1, i1, i1, i1, i1) #2

; Function Attrs: nounwind readnone
declare float @llvm.SI.load.const.v4i32(<4 x i32>, i32) #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #1

; Function Attrs: nounwind readnone speculatable
declare float @llvm.maxnum.f32(float, float) #1

; Function Attrs: nounwind readnone speculatable
declare float @llvm.minnum.f32(float, float) #1

; Function Attrs: nounwind readnone speculatable
declare float @llvm.sqrt.f32(float) #1

attributes #0 = { "InitialPSInputAddr"="0xb077" "no-signed-zeros-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind readonly }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind }

!0 = !{}
!1 = !{float 2.500000e+00}
radeonsi: Compiling shader 2
